1
00:00:00,480 --> 00:00:04,880
hey there everyone ramesh here welcome

2
00:00:02,399 --> 00:00:07,440
to angular spring boot full stack

3
00:00:04,880 --> 00:00:09,920
application development course

4
00:00:07,440 --> 00:00:11,679
this is going to be three hours full

5
00:00:09,920 --> 00:00:13,599
coding course guys

6
00:00:11,679 --> 00:00:16,560
in this course you are going to learn

7
00:00:13,599 --> 00:00:20,000
how to build a complete single page web

8
00:00:16,560 --> 00:00:21,359
application using angular and spring

9
00:00:20,000 --> 00:00:22,240
boot

10
00:00:21,359 --> 00:00:24,640
okay

11
00:00:22,240 --> 00:00:25,680
in this course i am going to use angular

12
00:00:24,640 --> 00:00:28,880
10

13
00:00:25,680 --> 00:00:30,880
you can use angular 8 or 9 or angular 1

14
00:00:28,880 --> 00:00:34,160
as per your project requirement but i am

15
00:00:30,880 --> 00:00:36,079
going to use angular 10 in this course

16
00:00:34,160 --> 00:00:38,320
all right so whatever angular version

17
00:00:36,079 --> 00:00:40,160
you use you can use you know

18
00:00:38,320 --> 00:00:42,960
but make sure that you will update

19
00:00:40,160 --> 00:00:45,280
angular version uh in

20
00:00:42,960 --> 00:00:47,680
you know a package.json file

21
00:00:45,280 --> 00:00:49,840
okay so while creating angular project i

22
00:00:47,680 --> 00:00:52,239
will show you uh where you can exactly

23
00:00:49,840 --> 00:00:54,160
update the angular version

24
00:00:52,239 --> 00:00:56,879
all right guys so this is going to be a

25
00:00:54,160 --> 00:00:59,120
complete series or a course for

26
00:00:56,879 --> 00:01:03,920
developing a full stack web application

27
00:00:59,120 --> 00:01:03,920
using angular and spring boot

28
00:01:08,240 --> 00:01:12,479
in this tutorial series we will learn

29
00:01:10,560 --> 00:01:14,000
how to develop crude full stack web

30
00:01:12,479 --> 00:01:16,479
application that is basic employee

31
00:01:14,000 --> 00:01:18,240
management application using angular 10

32
00:01:16,479 --> 00:01:20,560
and springboard

33
00:01:18,240 --> 00:01:22,320
basically we are going to develop five

34
00:01:20,560 --> 00:01:23,520
features in this

35
00:01:22,320 --> 00:01:25,439
project

36
00:01:23,520 --> 00:01:27,759
so we will create

37
00:01:25,439 --> 00:01:30,400
create employee feature list and fly

38
00:01:27,759 --> 00:01:32,960
feature update employee feature delete

39
00:01:30,400 --> 00:01:34,799
employee feature and we view employee

40
00:01:32,960 --> 00:01:36,720
feature so these are the five features

41
00:01:34,799 --> 00:01:39,600
we are going to develop

42
00:01:36,720 --> 00:01:41,840
in our employee management application

43
00:01:39,600 --> 00:01:45,119
and we are going to use spring boot to

44
00:01:41,840 --> 00:01:48,479
develop restful web services and angular

45
00:01:45,119 --> 00:01:49,759
to develop client-side application

46
00:01:48,479 --> 00:01:52,079
so before

47
00:01:49,759 --> 00:01:53,520
uh you know implementing our employee

48
00:01:52,079 --> 00:01:55,680
management application that is full

49
00:01:53,520 --> 00:01:58,479
stack application let's quickly have a

50
00:01:55,680 --> 00:02:01,840
demo what exactly we are going to build

51
00:01:58,479 --> 00:02:04,320
in this tutorial series

52
00:02:01,840 --> 00:02:06,159
so this is the user interface of our pro

53
00:02:04,320 --> 00:02:07,600
stack application that is employee

54
00:02:06,159 --> 00:02:10,080
management application

55
00:02:07,600 --> 00:02:12,959
so this is the employees list page here

56
00:02:10,080 --> 00:02:14,480
we're gonna add implies

57
00:02:12,959 --> 00:02:16,879
and this is the header of our

58
00:02:14,480 --> 00:02:18,720
application this is a footer and header

59
00:02:16,879 --> 00:02:21,360
you can see here employees list tab and

60
00:02:18,720 --> 00:02:22,800
this is add employee tab

61
00:02:21,360 --> 00:02:25,440
let's go ahead and let's click on add

62
00:02:22,800 --> 00:02:26,879
employee tab and this is the create

63
00:02:25,440 --> 00:02:28,879
employee page

64
00:02:26,879 --> 00:02:31,120
and we're going to use this page to add

65
00:02:28,879 --> 00:02:32,800
a new employee to the employees list

66
00:02:31,120 --> 00:02:34,239
let's go ahead and let's add one of the

67
00:02:32,800 --> 00:02:36,879
employee

68
00:02:34,239 --> 00:02:40,160
first name ramesh last name federi and

69
00:02:36,879 --> 00:02:41,840
email id ramesh gmail.com hit submit

70
00:02:40,160 --> 00:02:43,440
yeah here we go

71
00:02:41,840 --> 00:02:45,440
my employee is added to the employee

72
00:02:43,440 --> 00:02:48,400
list let's go ahead and let's add one

73
00:02:45,440 --> 00:02:52,239
more employee let's say john cena and

74
00:02:48,400 --> 00:02:53,599
email id as john gmail.com hit submit

75
00:02:52,239 --> 00:02:55,760
let's go ahead and let's add one more

76
00:02:53,599 --> 00:02:58,879
employee let's say admin

77
00:02:55,760 --> 00:03:00,159
and last name admin and email id

78
00:02:58,879 --> 00:03:02,239
let's say

79
00:03:00,159 --> 00:03:04,720
admin gmail.com

80
00:03:02,239 --> 00:03:06,640
yeah here we go so we have added three

81
00:03:04,720 --> 00:03:08,080
employees to the employee list now let's

82
00:03:06,640 --> 00:03:09,200
go ahead and let's see

83
00:03:08,080 --> 00:03:12,080
update

84
00:03:09,200 --> 00:03:13,680
functionality i'm going to update ramesh

85
00:03:12,080 --> 00:03:15,680
43 employee

86
00:03:13,680 --> 00:03:17,519
click on update button and here i'm

87
00:03:15,680 --> 00:03:19,120
going to update first name from ramesh

88
00:03:17,519 --> 00:03:22,159
to ram

89
00:03:19,120 --> 00:03:25,280
and email id from ramesh2ram

90
00:03:22,159 --> 00:03:27,120
gmail.com hit submit button yeah here we

91
00:03:25,280 --> 00:03:28,959
go

92
00:03:27,120 --> 00:03:31,280
alright guys look at here the employee

93
00:03:28,959 --> 00:03:32,799
successfully updated

94
00:03:31,280 --> 00:03:34,239
now let's go ahead and let's delete one

95
00:03:32,799 --> 00:03:36,319
of the employee let's say i'm going to

96
00:03:34,239 --> 00:03:37,680
delete john cena employee click on

97
00:03:36,319 --> 00:03:38,640
delete button

98
00:03:37,680 --> 00:03:40,959
yeah

99
00:03:38,640 --> 00:03:43,440
so employee successfully deleted now

100
00:03:40,959 --> 00:03:46,239
let's see one more employee

101
00:03:43,440 --> 00:03:49,040
i'm going to delete ram employee yeah

102
00:03:46,239 --> 00:03:51,200
great so here we have details button you

103
00:03:49,040 --> 00:03:53,040
can click on details button to view a

104
00:03:51,200 --> 00:03:55,200
particular employee details

105
00:03:53,040 --> 00:03:57,360
in a separate page

106
00:03:55,200 --> 00:03:58,400
and here we have back to employee list

107
00:03:57,360 --> 00:04:00,080
button

108
00:03:58,400 --> 00:04:01,920
click on this button to navigate to the

109
00:04:00,080 --> 00:04:04,239
employ list page

110
00:04:01,920 --> 00:04:07,680
so these are the five features that we

111
00:04:04,239 --> 00:04:09,120
are going to develop in this project

112
00:04:07,680 --> 00:04:10,560
add employee

113
00:04:09,120 --> 00:04:12,879
list employee

114
00:04:10,560 --> 00:04:14,959
and delete update and

115
00:04:12,879 --> 00:04:16,479
view details employee so these are the

116
00:04:14,959 --> 00:04:17,759
five functionalities that we are going

117
00:04:16,479 --> 00:04:19,040
to develop in this full stack

118
00:04:17,759 --> 00:04:21,440
application

119
00:04:19,040 --> 00:04:22,800
let's take a quick overview of angular

120
00:04:21,440 --> 00:04:25,759
and springboard

121
00:04:22,800 --> 00:04:28,080
angular is a platform and framework for

122
00:04:25,759 --> 00:04:30,320
building single page client applications

123
00:04:28,080 --> 00:04:31,680
using html and typescript

124
00:04:30,320 --> 00:04:34,160
angular is

125
00:04:31,680 --> 00:04:36,560
written in typescript

126
00:04:34,160 --> 00:04:38,800
okay and you should

127
00:04:36,560 --> 00:04:41,600
have basic understanding of typescript

128
00:04:38,800 --> 00:04:43,759
in order to work with angular and we are

129
00:04:41,600 --> 00:04:46,720
going to use angular 10 which is the

130
00:04:43,759 --> 00:04:48,800
latest release of angular as up now

131
00:04:46,720 --> 00:04:50,560
well angular is

132
00:04:48,800 --> 00:04:52,720
a popular especially for developing

133
00:04:50,560 --> 00:04:56,000
single page applications

134
00:04:52,720 --> 00:04:57,759
angular is module modular in nature so

135
00:04:56,000 --> 00:05:00,000
angular application is divided into

136
00:04:57,759 --> 00:05:02,800
multiple models and each module can have

137
00:05:00,000 --> 00:05:05,039
internal components services directives

138
00:05:02,800 --> 00:05:07,120
templates etc

139
00:05:05,039 --> 00:05:09,120
and angular provides the built-in

140
00:05:07,120 --> 00:05:10,400
features like defendant injection and

141
00:05:09,120 --> 00:05:12,560
data binding

142
00:05:10,400 --> 00:05:14,479
alright so angular is one of the most

143
00:05:12,560 --> 00:05:17,680
popular typescape based framework for

144
00:05:14,479 --> 00:05:20,000
building single page applications

145
00:05:17,680 --> 00:05:21,520
well springboot is

146
00:05:20,000 --> 00:05:23,520
pretty much popular

147
00:05:21,520 --> 00:05:25,280
for developing a restful web services

148
00:05:23,520 --> 00:05:27,680
and micro services

149
00:05:25,280 --> 00:05:29,680
spring boot has taken spring framework

150
00:05:27,680 --> 00:05:31,680
to the next level it has drastically

151
00:05:29,680 --> 00:05:34,320
reduced the configuration and setup time

152
00:05:31,680 --> 00:05:36,880
required for spring based projects

153
00:05:34,320 --> 00:05:38,800
you can set up spring project with

154
00:05:36,880 --> 00:05:40,400
almost zero configuration and start

155
00:05:38,800 --> 00:05:42,800
building the things that actually matter

156
00:05:40,400 --> 00:05:45,280
to your application

157
00:05:42,800 --> 00:05:47,440
angular and spring boot is a great

158
00:05:45,280 --> 00:05:48,800
combination to develop full stack

159
00:05:47,440 --> 00:05:51,039
application

160
00:05:48,800 --> 00:05:53,840
what you will learn in this tutorial

161
00:05:51,039 --> 00:05:56,000
series you will learn how to develop

162
00:05:53,840 --> 00:05:58,560
crude full stack application with

163
00:05:56,000 --> 00:06:00,080
angular as front end and spring boot as

164
00:05:58,560 --> 00:06:02,479
a back end

165
00:06:00,080 --> 00:06:05,840
and you will learn how to build a great

166
00:06:02,479 --> 00:06:07,280
restful apis with spring boot

167
00:06:05,840 --> 00:06:09,039
you will learn how to solve the

168
00:06:07,280 --> 00:06:11,280
challenges of connecting angular

169
00:06:09,039 --> 00:06:12,960
front-end to rest api which is developed

170
00:06:11,280 --> 00:06:15,840
using springboard

171
00:06:12,960 --> 00:06:18,479
you will learn how to connect a rest api

172
00:06:15,840 --> 00:06:19,600
to jpa or hibernate with springboard so

173
00:06:18,479 --> 00:06:22,560
basically we are going to use spring

174
00:06:19,600 --> 00:06:25,280
data jpa which in turn uses hibernate as

175
00:06:22,560 --> 00:06:27,440
a gpa provider so you will learn how to

176
00:06:25,280 --> 00:06:29,440
use ping data jpa or hypernet in

177
00:06:27,440 --> 00:06:32,000
springboard application

178
00:06:29,440 --> 00:06:34,479
you will learn how to use wide variety

179
00:06:32,000 --> 00:06:35,680
of spring boot starter project such as

180
00:06:34,479 --> 00:06:37,840
springboot

181
00:06:35,680 --> 00:06:39,520
web starter dependency springboot data

182
00:06:37,840 --> 00:06:40,880
jp dependency

183
00:06:39,520 --> 00:06:42,960
and

184
00:06:40,880 --> 00:06:44,960
other dependencies so we are going to

185
00:06:42,960 --> 00:06:46,400
use mysql database so you will also

186
00:06:44,960 --> 00:06:49,199
learn how to connect springboot

187
00:06:46,400 --> 00:06:51,280
application with mysql database

188
00:06:49,199 --> 00:06:53,360
and you will learn the basics of angular

189
00:06:51,280 --> 00:06:55,840
like angular modules components data

190
00:06:53,360 --> 00:06:56,560
binding and routing so while developing

191
00:06:55,840 --> 00:06:59,039
this

192
00:06:56,560 --> 00:07:00,560
angular application i'm going to also

193
00:06:59,039 --> 00:07:03,680
explain you about

194
00:07:00,560 --> 00:07:06,080
angular modules components data bindings

195
00:07:03,680 --> 00:07:08,000
and routing as well

196
00:07:06,080 --> 00:07:10,160
now let's take a look at client server

197
00:07:08,000 --> 00:07:12,160
architecture at the server side we have

198
00:07:10,160 --> 00:07:15,039
springboard application

199
00:07:12,160 --> 00:07:16,720
which creates and exposes rest api and

200
00:07:15,039 --> 00:07:18,400
at the client side we have angular

201
00:07:16,720 --> 00:07:20,560
application which we use to develop

202
00:07:18,400 --> 00:07:22,400
single page application and it consumes

203
00:07:20,560 --> 00:07:24,400
a rest apis which is exposed by

204
00:07:22,400 --> 00:07:27,120
springboard application

205
00:07:24,400 --> 00:07:28,639
all right so this is how

206
00:07:27,120 --> 00:07:31,639
the client server architecture looks

207
00:07:28,639 --> 00:07:31,639
like

208
00:07:34,479 --> 00:07:38,000
let's take a look at our angular

209
00:07:36,240 --> 00:07:39,919
springboard crew full stack application

210
00:07:38,000 --> 00:07:42,400
architecture basically we are going to

211
00:07:39,919 --> 00:07:44,319
develop two projects spring boot project

212
00:07:42,400 --> 00:07:45,840
at the backend and angular project at

213
00:07:44,319 --> 00:07:46,639
the front end

214
00:07:45,840 --> 00:07:48,400
well

215
00:07:46,639 --> 00:07:51,039
let's first take a look at our

216
00:07:48,400 --> 00:07:52,960
springboard application architecture and

217
00:07:51,039 --> 00:07:54,960
then we'll move on to the angular

218
00:07:52,960 --> 00:07:57,120
application architecture

219
00:07:54,960 --> 00:07:59,120
so at the springboot architecture we

220
00:07:57,120 --> 00:08:02,479
have different components like spring

221
00:07:59,120 --> 00:08:04,400
rest controller spring data jpa

222
00:08:02,479 --> 00:08:06,560
so at a persistence layer we are going

223
00:08:04,400 --> 00:08:09,120
to use spring data jpa

224
00:08:06,560 --> 00:08:12,479
and spring data jp it will communicate

225
00:08:09,120 --> 00:08:15,280
with a database that is mysql so we are

226
00:08:12,479 --> 00:08:17,280
going to use mysql database in this

227
00:08:15,280 --> 00:08:19,360
series

228
00:08:17,280 --> 00:08:22,080
so spring data jpeg it internally uses

229
00:08:19,360 --> 00:08:23,120
hybernet as a jpi provider and it will

230
00:08:22,080 --> 00:08:25,120
expose

231
00:08:23,120 --> 00:08:26,879
all the database operations for a

232
00:08:25,120 --> 00:08:28,560
particular entity

233
00:08:26,879 --> 00:08:31,280
so for example we are going to create

234
00:08:28,560 --> 00:08:33,680
employee jp entity in our project

235
00:08:31,280 --> 00:08:36,640
and spring data jpa provides all the

236
00:08:33,680 --> 00:08:38,719
crude operations for employee entity so

237
00:08:36,640 --> 00:08:40,399
we use spring data jp to reduce a lot of

238
00:08:38,719 --> 00:08:43,120
ballet fluid code that is required to

239
00:08:40,399 --> 00:08:45,360
develop a persistence layer

240
00:08:43,120 --> 00:08:48,080
and here spring rest controller we

241
00:08:45,360 --> 00:08:50,560
develop using spring amuc to

242
00:08:48,080 --> 00:08:53,839
develop and expose rest endpoints and we

243
00:08:50,560 --> 00:08:57,360
are going to develop five rest apis

244
00:08:53,839 --> 00:08:59,279
for employee resource

245
00:08:57,360 --> 00:09:00,640
so this is a simple architecture of our

246
00:08:59,279 --> 00:09:02,480
springboot project

247
00:09:00,640 --> 00:09:05,680
at a database layer we are going to use

248
00:09:02,480 --> 00:09:07,519
mysql database but you are free to use

249
00:09:05,680 --> 00:09:08,720
any relational databases like postgres

250
00:09:07,519 --> 00:09:11,440
database

251
00:09:08,720 --> 00:09:13,760
sql server oracle etc because spring

252
00:09:11,440 --> 00:09:15,519
data jp internally uses hibernate ibn

253
00:09:13,760 --> 00:09:17,600
out of the box hibernate supports all

254
00:09:15,519 --> 00:09:19,040
the relational databases so we just need

255
00:09:17,600 --> 00:09:21,120
to change the configuration and

256
00:09:19,040 --> 00:09:23,440
underlying code remains same

257
00:09:21,120 --> 00:09:25,760
in case of hibernate so you are free to

258
00:09:23,440 --> 00:09:27,360
use any relational databases

259
00:09:25,760 --> 00:09:29,680
so let's take a look at angular

260
00:09:27,360 --> 00:09:31,600
application architecture so look at here

261
00:09:29,680 --> 00:09:33,600
we have different components in angular

262
00:09:31,600 --> 00:09:36,880
application we have view templates

263
00:09:33,600 --> 00:09:39,600
components services and we may have a

264
00:09:36,880 --> 00:09:43,120
direct use pipes etc

265
00:09:39,600 --> 00:09:45,519
so we use html to develop templates

266
00:09:43,120 --> 00:09:47,920
and components basically contains a

267
00:09:45,519 --> 00:09:49,839
properties and methods so which will

268
00:09:47,920 --> 00:09:51,279
hand which will handle the data for

269
00:09:49,839 --> 00:09:53,600
templates

270
00:09:51,279 --> 00:09:56,800
and we we can perform two-way binding

271
00:09:53,600 --> 00:09:58,160
between template and component

272
00:09:56,800 --> 00:10:01,200
so basically

273
00:09:58,160 --> 00:10:03,279
we use angular interpolation to bind a

274
00:10:01,200 --> 00:10:05,760
properties in templates

275
00:10:03,279 --> 00:10:08,079
components will basically handle a user

276
00:10:05,760 --> 00:10:10,880
interface data

277
00:10:08,079 --> 00:10:14,000
services are angular services

278
00:10:10,880 --> 00:10:16,399
where we keep all the common logic and

279
00:10:14,000 --> 00:10:18,640
we inject services in required

280
00:10:16,399 --> 00:10:20,880
components using angular

281
00:10:18,640 --> 00:10:23,040
dependency injection

282
00:10:20,880 --> 00:10:25,200
and in our application

283
00:10:23,040 --> 00:10:28,320
we write all the rest client code in

284
00:10:25,200 --> 00:10:31,360
services to make a restfa call

285
00:10:28,320 --> 00:10:34,959
well angular has its own http model so

286
00:10:31,360 --> 00:10:36,079
we can use http model to make a rest api

287
00:10:34,959 --> 00:10:37,120
call

288
00:10:36,079 --> 00:10:39,360
okay

289
00:10:37,120 --> 00:10:41,040
great so this is the simple architecture

290
00:10:39,360 --> 00:10:43,120
of our angular springboard crude

291
00:10:41,040 --> 00:10:44,800
poolstack application now let's quickly

292
00:10:43,120 --> 00:10:46,320
take a look at what are the tools and

293
00:10:44,800 --> 00:10:48,320
technologies that we'll be using at the

294
00:10:46,320 --> 00:10:50,399
front-end side we're going to use

295
00:10:48,320 --> 00:10:52,560
angular 10 which is a latest release of

296
00:10:50,399 --> 00:10:54,079
angular while recording this video

297
00:10:52,560 --> 00:10:56,800
and we are going to use typescript to

298
00:10:54,079 --> 00:10:58,560
write a you know a code in an angular

299
00:10:56,800 --> 00:11:00,800
application and we are going to use

300
00:10:58,560 --> 00:11:03,120
node.js and npm

301
00:11:00,800 --> 00:11:05,279
and we use visual studio code id to

302
00:11:03,120 --> 00:11:07,279
develop angular application and we are

303
00:11:05,279 --> 00:11:09,440
going to use angular cli to generate

304
00:11:07,279 --> 00:11:12,720
angular application its components

305
00:11:09,440 --> 00:11:14,640
services classes and lot more things

306
00:11:12,720 --> 00:11:16,880
and we are going to use bootstrap for

307
00:11:14,640 --> 00:11:18,079
css library to make our angular

308
00:11:16,880 --> 00:11:21,519
application

309
00:11:18,079 --> 00:11:23,920
uh stylish and responsive

310
00:11:21,519 --> 00:11:25,200
next let's take a look at the tools and

311
00:11:23,920 --> 00:11:27,200
technologies that we'll be using at the

312
00:11:25,200 --> 00:11:29,839
server side we're going to use spring

313
00:11:27,200 --> 00:11:32,160
boot 2 plus

314
00:11:29,839 --> 00:11:33,760
and spring data jpa internally uses

315
00:11:32,160 --> 00:11:36,880
hibernate

316
00:11:33,760 --> 00:11:40,079
and we're going to use marvin 3.2 plus

317
00:11:36,880 --> 00:11:42,079
and we use jdk 1.8

318
00:11:40,079 --> 00:11:44,160
and we're going to use embedded tomcat

319
00:11:42,079 --> 00:11:46,800
8.5 plus

320
00:11:44,160 --> 00:11:48,560
and we use mysql database

321
00:11:46,800 --> 00:11:51,200
well these are the tools and technology

322
00:11:48,560 --> 00:11:53,920
that we'll be using at the server side

323
00:11:51,200 --> 00:11:54,839
now let's take a look at preview widgets

324
00:11:53,920 --> 00:11:56,560
for this

325
00:11:54,839 --> 00:11:58,480
course

326
00:11:56,560 --> 00:12:00,720
so you should have basic knowledge of

327
00:11:58,480 --> 00:12:02,399
html and css

328
00:12:00,720 --> 00:12:04,399
and you should have

329
00:12:02,399 --> 00:12:06,000
basic knowledge of typescript

330
00:12:04,399 --> 00:12:07,920
if you know javascript already then

331
00:12:06,000 --> 00:12:09,200
probably you will understand typescript

332
00:12:07,920 --> 00:12:10,720
very easily

333
00:12:09,200 --> 00:12:13,360
make sure that you have installed

334
00:12:10,720 --> 00:12:15,680
node.js and npm on your machine

335
00:12:13,360 --> 00:12:18,240
and you should you should know the basic

336
00:12:15,680 --> 00:12:20,480
fundamentals of angular because i am not

337
00:12:18,240 --> 00:12:21,519
going to cover angular fundamentals or

338
00:12:20,480 --> 00:12:23,120
basics

339
00:12:21,519 --> 00:12:24,720
so make sure that you have enough

340
00:12:23,120 --> 00:12:26,800
knowledge of angular

341
00:12:24,720 --> 00:12:28,399
to develop this full stack application

342
00:12:26,800 --> 00:12:30,000
and also you have enough knowledge of

343
00:12:28,399 --> 00:12:32,480
springboot to develop our full stack

344
00:12:30,000 --> 00:12:32,480
application

345
00:12:32,639 --> 00:12:36,480
now let's understand the project

346
00:12:34,240 --> 00:12:38,079
development process

347
00:12:36,480 --> 00:12:39,920
so we'll basically develop five

348
00:12:38,079 --> 00:12:41,440
functionalities and we'll begin with

349
00:12:39,920 --> 00:12:42,959
list employee functionality and then

350
00:12:41,440 --> 00:12:46,560
create employee functionality and then

351
00:12:42,959 --> 00:12:47,519
update employer functionality next we'll

352
00:12:46,560 --> 00:12:48,720
develop

353
00:12:47,519 --> 00:12:50,320
delete employee functionality and

354
00:12:48,720 --> 00:12:53,040
finally we develop

355
00:12:50,320 --> 00:12:55,920
we apply functionality

356
00:12:53,040 --> 00:12:57,680
so in this order we'll first begin with

357
00:12:55,920 --> 00:13:01,920
list employee functionality and then

358
00:12:57,680 --> 00:13:01,920
create update delete and view okay

359
00:13:04,800 --> 00:13:11,040
let's open eclipse sds id and let's

360
00:13:07,839 --> 00:13:14,959
quickly create a springboot project

361
00:13:11,040 --> 00:13:16,480
in eclipse sds id go to the file section

362
00:13:14,959 --> 00:13:19,040
new and then choose

363
00:13:16,480 --> 00:13:20,639
spring starter project

364
00:13:19,040 --> 00:13:22,320
so look at here this is the spring

365
00:13:20,639 --> 00:13:24,959
initializer

366
00:13:22,320 --> 00:13:27,519
website url and spring initializer is

367
00:13:24,959 --> 00:13:29,839
integrated in eclipse sdsid and we can

368
00:13:27,519 --> 00:13:33,360
use pre-initializer to quickly create

369
00:13:29,839 --> 00:13:35,279
and bootstrap spring-based project

370
00:13:33,360 --> 00:13:37,200
let's give a name to the project like

371
00:13:35,279 --> 00:13:40,639
springboot backend

372
00:13:37,200 --> 00:13:44,480
and keep type as marvin packaging as a

373
00:13:40,639 --> 00:13:47,519
jar java version 8 along with java

374
00:13:44,480 --> 00:13:50,560
let's give group id as net.java gates

375
00:13:47,519 --> 00:13:52,000
and artifact id is same as the name of

376
00:13:50,560 --> 00:13:54,160
the project

377
00:13:52,000 --> 00:13:54,959
and keep version and description as it

378
00:13:54,160 --> 00:13:58,160
is

379
00:13:54,959 --> 00:14:00,639
and keep package as net.java guides dot

380
00:13:58,160 --> 00:14:03,120
springboard but you can give any package

381
00:14:00,639 --> 00:14:05,279
name that you want once you are happy

382
00:14:03,120 --> 00:14:06,560
with project details

383
00:14:05,279 --> 00:14:08,240
click next

384
00:14:06,560 --> 00:14:10,199
and here

385
00:14:08,240 --> 00:14:12,639
we have spring boot version that is

386
00:14:10,199 --> 00:14:15,440
2.3.1 so this is this is the latest

387
00:14:12,639 --> 00:14:17,440
release of spring boot as of now

388
00:14:15,440 --> 00:14:19,199
now what we'll do we'll pick up spring

389
00:14:17,440 --> 00:14:21,199
boot starter dependencies

390
00:14:19,199 --> 00:14:24,639
let's go ahead and let's pick up spring

391
00:14:21,199 --> 00:14:24,639
web starter dependency

392
00:14:25,440 --> 00:14:30,560
we use spring web starter dependency to

393
00:14:27,680 --> 00:14:32,160
develop additional web services

394
00:14:30,560 --> 00:14:34,079
and let's go ahead and let's pick up

395
00:14:32,160 --> 00:14:35,199
spring

396
00:14:34,079 --> 00:14:37,680
data

397
00:14:35,199 --> 00:14:39,839
gpa dependency

398
00:14:37,680 --> 00:14:42,079
so we use playing data jp dependency to

399
00:14:39,839 --> 00:14:44,320
develop a repository layer and spring

400
00:14:42,079 --> 00:14:46,399
data jp internally uses hibernate as a

401
00:14:44,320 --> 00:14:48,959
jpi provider

402
00:14:46,399 --> 00:14:50,480
we basically use bing data jpa to reduce

403
00:14:48,959 --> 00:14:52,959
a lot of boilerplate code that is

404
00:14:50,480 --> 00:14:54,880
required to develop a dowel layer all

405
00:14:52,959 --> 00:14:57,519
right and we're going to use mysql

406
00:14:54,880 --> 00:15:01,600
database so let's quickly

407
00:14:57,519 --> 00:15:01,600
pick up mysql jdbc driver

408
00:15:03,839 --> 00:15:09,839
and let's also choose

409
00:15:06,000 --> 00:15:11,199
spring boot dev tool dependency

410
00:15:09,839 --> 00:15:13,680
spring boot

411
00:15:11,199 --> 00:15:16,240
dev tools dependency so we use this

412
00:15:13,680 --> 00:15:18,000
dependency because whenever we make some

413
00:15:16,240 --> 00:15:21,920
changes in a project we no need to

414
00:15:18,000 --> 00:15:23,839
restart the server again and again okay

415
00:15:21,920 --> 00:15:26,480
all right guys once you select all the

416
00:15:23,839 --> 00:15:27,760
required dependencies hit finish

417
00:15:26,480 --> 00:15:30,480
this will create

418
00:15:27,760 --> 00:15:33,120
a springboard project in eclipse sds id

419
00:15:30,480 --> 00:15:35,680
yeah here we go

420
00:15:33,120 --> 00:15:37,120
once we have created springbook project

421
00:15:35,680 --> 00:15:38,320
let's go ahead and let's create a

422
00:15:37,120 --> 00:15:41,199
database

423
00:15:38,320 --> 00:15:42,880
open mysql workbench and just type sql

424
00:15:41,199 --> 00:15:44,959
statement like

425
00:15:42,880 --> 00:15:47,279
create

426
00:15:44,959 --> 00:15:48,959
database followed by name of the

427
00:15:47,279 --> 00:15:51,680
database

428
00:15:48,959 --> 00:15:54,000
let's give name of the database ads

429
00:15:51,680 --> 00:15:56,880
employee

430
00:15:54,000 --> 00:15:57,920
management underscore

431
00:15:56,880 --> 00:16:00,000
system

432
00:15:57,920 --> 00:16:02,560
something like this

433
00:16:00,000 --> 00:16:05,440
and execute this sql statement

434
00:16:02,560 --> 00:16:07,680
and refresh here and look at here the

435
00:16:05,440 --> 00:16:10,480
employee management system database is

436
00:16:07,680 --> 00:16:12,639
get created

437
00:16:10,480 --> 00:16:16,000
once we create a database let's go ahead

438
00:16:12,639 --> 00:16:20,480
and let's configure mysql gdbc url

439
00:16:16,000 --> 00:16:20,480
username password in springboot project

440
00:16:21,519 --> 00:16:24,519
go to the resource folder within a

441
00:16:23,279 --> 00:16:26,399
resource folder open

442
00:16:24,519 --> 00:16:28,399
application.properties file

443
00:16:26,399 --> 00:16:29,759
and here just type

444
00:16:28,399 --> 00:16:30,800
spring

445
00:16:29,759 --> 00:16:33,440
dot

446
00:16:30,800 --> 00:16:35,519
data source

447
00:16:33,440 --> 00:16:36,639
dot url

448
00:16:35,519 --> 00:16:38,880
okay

449
00:16:36,639 --> 00:16:40,480
let's give jdbc url to connect to the

450
00:16:38,880 --> 00:16:42,240
mysql database

451
00:16:40,480 --> 00:16:44,079
so we get here we have

452
00:16:42,240 --> 00:16:48,160
employee management system database that

453
00:16:44,079 --> 00:16:50,399
just we have created in mysql workbench

454
00:16:48,160 --> 00:16:51,519
similarly let's go ahead and let's

455
00:16:50,399 --> 00:16:53,440
configure

456
00:16:51,519 --> 00:16:55,199
username and password

457
00:16:53,440 --> 00:16:56,560
let's type the property

458
00:16:55,199 --> 00:16:59,199
spring dot

459
00:16:56,560 --> 00:16:59,199
data source

460
00:17:01,440 --> 00:17:05,039
dot

461
00:17:03,120 --> 00:17:06,240
username

462
00:17:05,039 --> 00:17:08,799
it's root

463
00:17:06,240 --> 00:17:11,199
let's also

464
00:17:08,799 --> 00:17:13,679
configure

465
00:17:11,199 --> 00:17:13,679
password

466
00:17:14,319 --> 00:17:18,319
it's again root

467
00:17:15,839 --> 00:17:21,839
okay so make sure that you will change

468
00:17:18,319 --> 00:17:23,839
julius url username password as per your

469
00:17:21,839 --> 00:17:25,199
uh you know mysql database installation

470
00:17:23,839 --> 00:17:26,720
on your machine

471
00:17:25,199 --> 00:17:29,760
now let's go ahead and let's configure

472
00:17:26,720 --> 00:17:29,760
hibernate properties

473
00:17:29,840 --> 00:17:34,400
we are going to we are using mysql

474
00:17:32,480 --> 00:17:35,760
database so

475
00:17:34,400 --> 00:17:36,880
we have to

476
00:17:35,760 --> 00:17:39,200
configure

477
00:17:36,880 --> 00:17:41,120
hibernate dialect for mysql database so

478
00:17:39,200 --> 00:17:42,880
look at here this is a property and this

479
00:17:41,120 --> 00:17:46,720
is the value

480
00:17:42,880 --> 00:17:48,000
so we are using mysql file

481
00:17:46,720 --> 00:17:49,679
dialet

482
00:17:48,000 --> 00:17:53,919
okay now let's go ahead and let's

483
00:17:49,679 --> 00:17:53,919
configure one more hybrid property

484
00:17:54,400 --> 00:17:58,880
so look at here so this is a hybernet

485
00:17:56,880 --> 00:18:01,200
detail auto property so use this

486
00:17:58,880 --> 00:18:03,039
property to automatically create the

487
00:18:01,200 --> 00:18:05,280
tables in a database so i haven't it

488
00:18:03,039 --> 00:18:07,039
will automatically create a

489
00:18:05,280 --> 00:18:09,440
tables in a database with no need to

490
00:18:07,039 --> 00:18:10,799
manually create the tables

491
00:18:09,440 --> 00:18:13,760
all right guys

492
00:18:10,799 --> 00:18:15,679
once we configure jdbc credentials and

493
00:18:13,760 --> 00:18:17,919
hibernate properties

494
00:18:15,679 --> 00:18:20,720
let's go ahead and let's create a

495
00:18:17,919 --> 00:18:22,880
packaging structure

496
00:18:20,720 --> 00:18:24,799
right click on root package

497
00:18:22,880 --> 00:18:28,000
new and then choose

498
00:18:24,799 --> 00:18:29,600
package and let's queue package name as

499
00:18:28,000 --> 00:18:31,440
model

500
00:18:29,600 --> 00:18:33,039
let's create one more package right

501
00:18:31,440 --> 00:18:34,320
click on root package new and then

502
00:18:33,039 --> 00:18:37,679
choose package

503
00:18:34,320 --> 00:18:39,520
and let's give package name as

504
00:18:37,679 --> 00:18:40,799
controller

505
00:18:39,520 --> 00:18:43,760
again let's go ahead and let's create

506
00:18:40,799 --> 00:18:45,760
one more package

507
00:18:43,760 --> 00:18:48,640
let's name it as

508
00:18:45,760 --> 00:18:48,640
a repository

509
00:18:49,520 --> 00:18:56,360
alright so let's go ahead and create one

510
00:18:51,679 --> 00:18:56,360
more package and let's name it as

511
00:18:56,480 --> 00:18:59,039
exception

512
00:19:01,919 --> 00:19:04,240
all right

513
00:19:07,600 --> 00:19:10,960
let's go ahead and let's create a jpeg

514
00:19:10,000 --> 00:19:13,120
entity

515
00:19:10,960 --> 00:19:15,600
right click on model package new and

516
00:19:13,120 --> 00:19:16,960
then choose class

517
00:19:15,600 --> 00:19:18,799
let's give

518
00:19:16,960 --> 00:19:20,480
identity name as

519
00:19:18,799 --> 00:19:21,600
employee

520
00:19:20,480 --> 00:19:23,280
all right

521
00:19:21,600 --> 00:19:25,280
let's quickly define

522
00:19:23,280 --> 00:19:26,799
instance variables

523
00:19:25,280 --> 00:19:29,360
private

524
00:19:26,799 --> 00:19:29,360
long id

525
00:19:29,679 --> 00:19:33,520
private string first name

526
00:19:36,320 --> 00:19:39,840
private string last name

527
00:19:42,640 --> 00:19:46,720
and

528
00:19:44,160 --> 00:19:49,120
private string

529
00:19:46,720 --> 00:19:52,320
email id

530
00:19:49,120 --> 00:19:53,840
all right let's quickly create get a set

531
00:19:52,320 --> 00:19:56,160
of methods to access these private

532
00:19:53,840 --> 00:19:56,160
fields

533
00:20:00,640 --> 00:20:04,880
and also create

534
00:20:02,320 --> 00:20:07,520
a parameterized constructor

535
00:20:04,880 --> 00:20:08,720
right click source generate constructor

536
00:20:07,520 --> 00:20:10,960
using fields

537
00:20:08,720 --> 00:20:13,200
deselect id and

538
00:20:10,960 --> 00:20:16,480
hit generate and let's also create a

539
00:20:13,200 --> 00:20:16,480
default constructor

540
00:20:16,799 --> 00:20:19,919
so remember whenever you create a

541
00:20:18,320 --> 00:20:22,080
parameterized constructor you have to

542
00:20:19,919 --> 00:20:24,559
create a default constructor because

543
00:20:22,080 --> 00:20:25,760
hibernate internally uses proxies

544
00:20:24,559 --> 00:20:28,640
to create

545
00:20:25,760 --> 00:20:30,880
uh you know proxy objects

546
00:20:28,640 --> 00:20:33,120
all right once we have created employee

547
00:20:30,880 --> 00:20:35,280
class now let's go ahead and let's use

548
00:20:33,120 --> 00:20:36,559
jp annotations

549
00:20:35,280 --> 00:20:38,799
to map

550
00:20:36,559 --> 00:20:40,080
uh you know uh

551
00:20:38,799 --> 00:20:42,400
this model

552
00:20:40,080 --> 00:20:45,120
to the relational database table

553
00:20:42,400 --> 00:20:48,480
let's go ahead and let's use add rate

554
00:20:45,120 --> 00:20:50,960
entity annotation

555
00:20:48,480 --> 00:20:54,799
and let's also use add rate table

556
00:20:50,960 --> 00:20:54,799
annotation to provide a table name

557
00:20:56,640 --> 00:21:01,280
let's give table name as

558
00:20:58,799 --> 00:21:03,360
employees

559
00:21:01,280 --> 00:21:04,880
all right let's define a primary key for

560
00:21:03,360 --> 00:21:07,200
our

561
00:21:04,880 --> 00:21:08,720
table let's use add id annotation and

562
00:21:07,200 --> 00:21:10,559
also let's

563
00:21:08,720 --> 00:21:12,720
use a generation

564
00:21:10,559 --> 00:21:15,440
primary key generation strategy for that

565
00:21:12,720 --> 00:21:19,760
let's use add generator value annotation

566
00:21:15,440 --> 00:21:23,280
and it has a property called strategy

567
00:21:19,760 --> 00:21:25,840
and let's use generation type as

568
00:21:23,280 --> 00:21:29,600
identity

569
00:21:25,840 --> 00:21:32,559
and let's use accurate column annotation

570
00:21:29,600 --> 00:21:34,799
to provide a column name to the field

571
00:21:32,559 --> 00:21:36,880
here basically we map a column name to

572
00:21:34,799 --> 00:21:39,039
the field and we can also give a column

573
00:21:36,880 --> 00:21:41,679
name over here

574
00:21:39,039 --> 00:21:43,440
let's use a name attribute to provide a

575
00:21:41,679 --> 00:21:45,600
column name

576
00:21:43,440 --> 00:21:47,600
let's say first

577
00:21:45,600 --> 00:21:50,720
underscore name

578
00:21:47,600 --> 00:21:50,720
and let's copy this

579
00:21:50,799 --> 00:21:56,880
and similarly give a

580
00:21:53,840 --> 00:22:00,880
column name to the last name

581
00:21:56,880 --> 00:22:03,520
last underscore name and also

582
00:22:00,880 --> 00:22:06,960
your column name to the email id email

583
00:22:03,520 --> 00:22:09,120
underscore id that's it guys

584
00:22:06,960 --> 00:22:11,360
that is pretty much we have created

585
00:22:09,120 --> 00:22:12,799
employee jp entity now what we'll do

586
00:22:11,360 --> 00:22:14,640
we'll create a

587
00:22:12,799 --> 00:22:17,120
repository interface

588
00:22:14,640 --> 00:22:18,960
right click on repository package

589
00:22:17,120 --> 00:22:21,200
new and then choose

590
00:22:18,960 --> 00:22:22,960
interface

591
00:22:21,200 --> 00:22:25,600
here let's give a

592
00:22:22,960 --> 00:22:27,440
repository name as

593
00:22:25,600 --> 00:22:30,159
employee

594
00:22:27,440 --> 00:22:30,159
repository

595
00:22:30,480 --> 00:22:34,960
great now what we'll do will extend this

596
00:22:33,360 --> 00:22:36,240
interface

597
00:22:34,960 --> 00:22:38,159
from

598
00:22:36,240 --> 00:22:40,159
jpa repository

599
00:22:38,159 --> 00:22:42,159
so jp repository basically exposes

600
00:22:40,159 --> 00:22:43,039
database code methods

601
00:22:42,159 --> 00:22:46,080
like

602
00:22:43,039 --> 00:22:47,280
save find by id find or delete by id

603
00:22:46,080 --> 00:22:49,679
delete

604
00:22:47,280 --> 00:22:51,679
okay it exposes a lot of methods

605
00:22:49,679 --> 00:22:53,600
and it provides

606
00:22:51,679 --> 00:22:55,760
out of the box implementation for all

607
00:22:53,600 --> 00:22:57,120
the database methods so we don't need to

608
00:22:55,760 --> 00:22:59,919
write any

609
00:22:57,120 --> 00:23:00,799
binder plate code that is required to

610
00:22:59,919 --> 00:23:04,400
you know

611
00:23:00,799 --> 00:23:06,640
develop the dow layer

612
00:23:04,400 --> 00:23:09,440
let's pass

613
00:23:06,640 --> 00:23:12,640
employee jp entity and here

614
00:23:09,440 --> 00:23:14,799
the type of the primary key

615
00:23:12,640 --> 00:23:15,840
let's annotate this interface with

616
00:23:14,799 --> 00:23:19,200
accurate

617
00:23:15,840 --> 00:23:19,200
repository annotation

618
00:23:19,280 --> 00:23:23,120
all right

619
00:23:20,159 --> 00:23:25,520
so look at here

620
00:23:23,120 --> 00:23:27,039
jp repository provides a lot of methods

621
00:23:25,520 --> 00:23:29,600
like find all

622
00:23:27,039 --> 00:23:30,880
and also it provides a sorting

623
00:23:29,600 --> 00:23:32,960
support

624
00:23:30,880 --> 00:23:34,840
okay and

625
00:23:32,960 --> 00:23:37,840
also

626
00:23:34,840 --> 00:23:40,000
provides a pagination so look at here it

627
00:23:37,840 --> 00:23:42,559
internally extends paging and sorting

628
00:23:40,000 --> 00:23:44,880
repository paging and sorting repository

629
00:23:42,559 --> 00:23:46,799
base provides support for sorting and

630
00:23:44,880 --> 00:23:47,679
pagination

631
00:23:46,799 --> 00:23:50,640
and

632
00:23:47,679 --> 00:23:52,480
paging and sorting repository extends

633
00:23:50,640 --> 00:23:54,799
code repository so code repository

634
00:23:52,480 --> 00:23:56,640
interface exposes all the

635
00:23:54,799 --> 00:23:57,840
crude methods

636
00:23:56,640 --> 00:24:00,799
for

637
00:23:57,840 --> 00:24:03,279
entity okay for example save

638
00:24:00,799 --> 00:24:05,360
save all find by ide

639
00:24:03,279 --> 00:24:07,279
exists by id

640
00:24:05,360 --> 00:24:08,159
okay

641
00:24:07,279 --> 00:24:10,080
so

642
00:24:08,159 --> 00:24:12,000
jpa repository internally extends all

643
00:24:10,080 --> 00:24:14,480
these interfaces so

644
00:24:12,000 --> 00:24:16,320
we can leverage all these methods

645
00:24:14,480 --> 00:24:18,400
we don't need to create

646
00:24:16,320 --> 00:24:21,200
methods over here

647
00:24:18,400 --> 00:24:21,200
okay great

648
00:24:25,120 --> 00:24:29,840
now it's time to create

649
00:24:27,039 --> 00:24:31,679
a restful web services

650
00:24:29,840 --> 00:24:34,080
so before that let's go ahead and let's

651
00:24:31,679 --> 00:24:35,039
create one custom exception

652
00:24:34,080 --> 00:24:37,679
class

653
00:24:35,039 --> 00:24:40,640
right click on exception package new and

654
00:24:37,679 --> 00:24:42,400
then choose class let's name this custom

655
00:24:40,640 --> 00:24:45,039
exception class as

656
00:24:42,400 --> 00:24:47,600
a resource not found exception

657
00:24:45,039 --> 00:24:49,360
so whenever a resource not exist in a

658
00:24:47,600 --> 00:24:50,480
database then we can throw this

659
00:24:49,360 --> 00:24:53,279
exception

660
00:24:50,480 --> 00:24:54,960
okay from the api layer

661
00:24:53,279 --> 00:24:57,039
rest api basically

662
00:24:54,960 --> 00:25:00,640
uh you know throws this exception that

663
00:24:57,039 --> 00:25:03,360
we will see a bit later

664
00:25:00,640 --> 00:25:06,320
this exception extends

665
00:25:03,360 --> 00:25:06,320
runtime exception

666
00:25:09,039 --> 00:25:10,640
okay

667
00:25:09,840 --> 00:25:12,720
and

668
00:25:10,640 --> 00:25:14,799
runtime exception internally implements

669
00:25:12,720 --> 00:25:16,240
serializable interface so let's go ahead

670
00:25:14,799 --> 00:25:17,840
and let's

671
00:25:16,240 --> 00:25:20,880
quickly add the

672
00:25:17,840 --> 00:25:22,080
serial version id here

673
00:25:20,880 --> 00:25:24,799
let's

674
00:25:22,080 --> 00:25:24,799
say public

675
00:25:24,960 --> 00:25:30,000
and here let's

676
00:25:26,840 --> 00:25:32,880
pass string message

677
00:25:30,000 --> 00:25:32,880
and we simply

678
00:25:32,960 --> 00:25:36,480
pass this message

679
00:25:34,799 --> 00:25:38,400
to the

680
00:25:36,480 --> 00:25:40,559
super class

681
00:25:38,400 --> 00:25:43,200
okay it's pretty simple

682
00:25:40,559 --> 00:25:44,720
custom exception

683
00:25:43,200 --> 00:25:46,159
now let's annotate

684
00:25:44,720 --> 00:25:49,440
this

685
00:25:46,159 --> 00:25:53,480
exception class with add the red

686
00:25:49,440 --> 00:25:53,480
response status i rotation

687
00:25:58,320 --> 00:26:03,360
use value property

688
00:26:00,240 --> 00:26:05,919
and let us say http status

689
00:26:03,360 --> 00:26:05,919
not phone

690
00:26:06,480 --> 00:26:08,960
okay

691
00:26:07,520 --> 00:26:11,200
so basically we use this custom

692
00:26:08,960 --> 00:26:13,520
exception so whenever a record not exist

693
00:26:11,200 --> 00:26:16,080
in database then rest api will throw

694
00:26:13,520 --> 00:26:17,760
this exception and

695
00:26:16,080 --> 00:26:21,360
we have annotated this exception with

696
00:26:17,760 --> 00:26:24,880
address response status annotation so

697
00:26:21,360 --> 00:26:26,159
api will return a not found status to

698
00:26:24,880 --> 00:26:27,760
the client

699
00:26:26,159 --> 00:26:29,840
okay that's

700
00:26:27,760 --> 00:26:31,440
great

701
00:26:29,840 --> 00:26:33,760
now let's go ahead and let's create

702
00:26:31,440 --> 00:26:35,760
spring muc controller right click on

703
00:26:33,760 --> 00:26:39,520
controller package new and then choose

704
00:26:35,760 --> 00:26:41,520
class and let's call controller class as

705
00:26:39,520 --> 00:26:44,159
employee

706
00:26:41,520 --> 00:26:44,159
controller

707
00:26:44,880 --> 00:26:49,520
okay within a controller we create a

708
00:26:47,039 --> 00:26:50,720
rest api so let's add

709
00:26:49,520 --> 00:26:53,600
at the rate

710
00:26:50,720 --> 00:26:56,159
press controller annotation

711
00:26:53,600 --> 00:26:57,360
and also add address request mapping

712
00:26:56,159 --> 00:26:58,960
annotation

713
00:26:57,360 --> 00:27:02,400
and let's define

714
00:26:58,960 --> 00:27:06,400
a standard url over here slash api

715
00:27:02,400 --> 00:27:08,320
slash version v1 so this is the standard

716
00:27:06,400 --> 00:27:11,120
we use typically

717
00:27:08,320 --> 00:27:12,960
whenever we develop our http is like v1

718
00:27:11,120 --> 00:27:14,480
like version one so we are releasing all

719
00:27:12,960 --> 00:27:16,559
the rest apis

720
00:27:14,480 --> 00:27:18,799
as a release one

721
00:27:16,559 --> 00:27:20,720
and this is the api so this is a

722
00:27:18,799 --> 00:27:23,039
standard uh

723
00:27:20,720 --> 00:27:25,679
url endpoint that typically we use in

724
00:27:23,039 --> 00:27:27,360
our https okay

725
00:27:25,679 --> 00:27:29,840
now let's go ahead and let's

726
00:27:27,360 --> 00:27:29,840
inject

727
00:27:30,000 --> 00:27:36,399
uh employee repository over here

728
00:27:32,840 --> 00:27:36,399
employee repository

729
00:27:36,880 --> 00:27:40,880
and let's add at the rate

730
00:27:38,880 --> 00:27:44,240
at world annotation

731
00:27:40,880 --> 00:27:45,840
to inject this repository by spring

732
00:27:44,240 --> 00:27:47,679
container

733
00:27:45,840 --> 00:27:49,200
now

734
00:27:47,679 --> 00:27:50,159
we'll develop

735
00:27:49,200 --> 00:27:51,520
get

736
00:27:50,159 --> 00:27:54,399
all employees

737
00:27:51,520 --> 00:27:54,399
arrested api

738
00:27:54,799 --> 00:27:58,080
just type public

739
00:27:56,559 --> 00:28:00,240
and then list

740
00:27:58,080 --> 00:28:03,200
so this rest api should return a list of

741
00:28:00,240 --> 00:28:05,840
employees to the client so let's give

742
00:28:03,200 --> 00:28:08,320
return type as list of employees

743
00:28:05,840 --> 00:28:10,320
let's give a method name as

744
00:28:08,320 --> 00:28:12,559
get all

745
00:28:10,320 --> 00:28:14,840
employees

746
00:28:12,559 --> 00:28:18,320
all right and just

747
00:28:14,840 --> 00:28:19,600
return empire repository

748
00:28:18,320 --> 00:28:21,679
dot

749
00:28:19,600 --> 00:28:24,159
find out method so look at here find out

750
00:28:21,679 --> 00:28:26,320
method returns a list of employees okay

751
00:28:24,159 --> 00:28:27,760
let's select this

752
00:28:26,320 --> 00:28:29,200
and let's add

753
00:28:27,760 --> 00:28:31,840
at the rate

754
00:28:29,200 --> 00:28:36,080
get mapping annotation

755
00:28:31,840 --> 00:28:37,679
and let's specify a url here slash

756
00:28:36,080 --> 00:28:41,279
impulse

757
00:28:37,679 --> 00:28:44,640
okay so once we hit a url in a browser

758
00:28:41,279 --> 00:28:47,840
like localhost 8080 api slash v1 slash

759
00:28:44,640 --> 00:28:50,880
employees then this rest api will get

760
00:28:47,840 --> 00:28:53,679
called and this api returns a list of

761
00:28:50,880 --> 00:28:55,760
employees to the client

762
00:28:53,679 --> 00:28:57,600
alright let's go ahead and let's

763
00:28:55,760 --> 00:29:00,159
run the springbook project and let us

764
00:28:57,600 --> 00:29:02,960
test this rest api

765
00:29:00,159 --> 00:29:08,200
open our springboot main class right

766
00:29:02,960 --> 00:29:08,200
click and run as springboot app

767
00:29:18,000 --> 00:29:21,039
all right guys our spring boot

768
00:29:19,440 --> 00:29:24,480
application is up and running on

769
00:29:21,039 --> 00:29:27,120
embedded tomcat server on port 8080

770
00:29:24,480 --> 00:29:29,679
and look at here we haven't created

771
00:29:27,120 --> 00:29:31,840
create employee rest api in order to

772
00:29:29,679 --> 00:29:33,679
create a records in a database

773
00:29:31,840 --> 00:29:35,840
we have directly created get all

774
00:29:33,679 --> 00:29:38,159
employees so what we'll do we'll insert

775
00:29:35,840 --> 00:29:40,880
some records in our employees table in a

776
00:29:38,159 --> 00:29:42,880
database and we call this rest api and

777
00:29:40,880 --> 00:29:44,720
will retrieve this api will review all

778
00:29:42,880 --> 00:29:47,279
the employees from the table and it will

779
00:29:44,720 --> 00:29:48,159
return to the client

780
00:29:47,279 --> 00:29:50,240
okay

781
00:29:48,159 --> 00:29:52,240
let's go back to the

782
00:29:50,240 --> 00:29:55,240
mysql workbench and let's insert few

783
00:29:52,240 --> 00:29:55,240
records

784
00:29:55,440 --> 00:30:01,440
now if you refresh

785
00:29:57,600 --> 00:30:01,440
the schemas and if you look at here

786
00:30:02,080 --> 00:30:07,039
employees management system

787
00:30:04,159 --> 00:30:09,360
database implies table is

788
00:30:07,039 --> 00:30:12,559
created okay so this table is

789
00:30:09,360 --> 00:30:14,480
automatically created by hybernet

790
00:30:12,559 --> 00:30:16,880
and now

791
00:30:14,480 --> 00:30:18,399
right click and select rows so if you

792
00:30:16,880 --> 00:30:20,080
look at the

793
00:30:18,399 --> 00:30:21,440
table there are no

794
00:30:20,080 --> 00:30:24,320
records

795
00:30:21,440 --> 00:30:26,720
in a table so let's quickly insert few

796
00:30:24,320 --> 00:30:26,720
records

797
00:30:27,600 --> 00:30:30,399
one

798
00:30:29,039 --> 00:30:32,399
email id

799
00:30:30,399 --> 00:30:35,120
parameter

800
00:30:32,399 --> 00:30:38,480
gmail.com first name

801
00:30:35,120 --> 00:30:38,480
ramesh last name

802
00:30:38,960 --> 00:30:43,919
and

803
00:30:40,399 --> 00:30:45,360
also is insert one more record

804
00:30:43,919 --> 00:30:48,159
tony at the

805
00:30:45,360 --> 00:30:48,159
gmail.com

806
00:30:48,240 --> 00:30:52,080
first name tony last name

807
00:30:50,640 --> 00:30:54,320
stark

808
00:30:52,080 --> 00:30:56,240
let's keep these two records and hit

809
00:30:54,320 --> 00:30:57,360
apply

810
00:30:56,240 --> 00:30:59,200
apply

811
00:30:57,360 --> 00:31:01,600
and finish

812
00:30:59,200 --> 00:31:01,600
all right

813
00:31:02,080 --> 00:31:06,240
let's execute the select statement again

814
00:31:04,080 --> 00:31:07,679
in order to make sure that the records

815
00:31:06,240 --> 00:31:10,080
are there in a table

816
00:31:07,679 --> 00:31:12,559
yeah we have two records in a table now

817
00:31:10,080 --> 00:31:15,120
let's go back to the browser and let's

818
00:31:12,559 --> 00:31:17,600
hit a rest api in a browser tab and

819
00:31:15,120 --> 00:31:20,399
we'll be able to get a

820
00:31:17,600 --> 00:31:21,360
response as a json array of employees

821
00:31:20,399 --> 00:31:23,120
objects

822
00:31:21,360 --> 00:31:25,039
okay great

823
00:31:23,120 --> 00:31:26,880
all right guys open the browser

824
00:31:25,039 --> 00:31:30,240
go to the new tab and just type

825
00:31:26,880 --> 00:31:33,120
localhost 8080 slash api

826
00:31:30,240 --> 00:31:34,559
slash v1 slash

827
00:31:33,120 --> 00:31:36,159
employees

828
00:31:34,559 --> 00:31:37,679
and hit enter

829
00:31:36,159 --> 00:31:39,440
yeah here we go

830
00:31:37,679 --> 00:31:41,440
we got a json

831
00:31:39,440 --> 00:31:44,000
array

832
00:31:41,440 --> 00:31:45,519
json array as a response from the rest

833
00:31:44,000 --> 00:31:46,960
api

834
00:31:45,519 --> 00:31:50,960
we can use

835
00:31:46,960 --> 00:31:55,279
postman rest client to test our get all

836
00:31:50,960 --> 00:31:57,279
employees rest api so open a postman

837
00:31:55,279 --> 00:31:58,240
client and

838
00:31:57,279 --> 00:32:00,240
in a

839
00:31:58,240 --> 00:32:01,600
enter request uh you'll just type

840
00:32:00,240 --> 00:32:06,320
localhost

841
00:32:01,600 --> 00:32:10,000
8080 api slash women slash employees and

842
00:32:06,320 --> 00:32:12,320
select http get method

843
00:32:10,000 --> 00:32:14,559
all right and hit send

844
00:32:12,320 --> 00:32:16,240
button and here you can see

845
00:32:14,559 --> 00:32:17,760
we got a

846
00:32:16,240 --> 00:32:21,760
json response

847
00:32:17,760 --> 00:32:21,760
we got an array of employer objects

848
00:32:25,279 --> 00:32:29,679
hey guys it's time to create angular

849
00:32:27,600 --> 00:32:32,320
application

850
00:32:29,679 --> 00:32:34,320
so before creating angular application

851
00:32:32,320 --> 00:32:38,159
make sure that you have installed

852
00:32:34,320 --> 00:32:40,880
node.js and npm on your machine

853
00:32:38,159 --> 00:32:43,440
so in order to install node.js what you

854
00:32:40,880 --> 00:32:44,480
can do is you can just type node.js in

855
00:32:43,440 --> 00:32:45,679
browser

856
00:32:44,480 --> 00:32:48,080
hit finish

857
00:32:45,679 --> 00:32:50,240
and head over to the node.js

858
00:32:48,080 --> 00:32:52,640
official website so it will navigate to

859
00:32:50,240 --> 00:32:55,600
the official website of

860
00:32:52,640 --> 00:32:57,679
node.js on download page so so this is

861
00:32:55,600 --> 00:32:58,720
the download page of node.js official

862
00:32:57,679 --> 00:33:00,880
website

863
00:32:58,720 --> 00:33:04,399
from here you can

864
00:33:00,880 --> 00:33:06,320
download a latest list of node.js

865
00:33:04,399 --> 00:33:09,600
go ahead and download a latest list of

866
00:33:06,320 --> 00:33:11,600
node.js and install on your machine

867
00:33:09,600 --> 00:33:14,080
so when you install node.js it will

868
00:33:11,600 --> 00:33:17,679
automatically install npm so you no need

869
00:33:14,080 --> 00:33:20,480
to manually install npm again

870
00:33:17,679 --> 00:33:23,440
well let us check the version of node.js

871
00:33:20,480 --> 00:33:24,799
and npm that we have installed

872
00:33:23,440 --> 00:33:26,559
in our machine

873
00:33:24,799 --> 00:33:27,519
so for that let's go ahead and let's

874
00:33:26,559 --> 00:33:30,159
open

875
00:33:27,519 --> 00:33:32,960
a command prompt so i'm using windows so

876
00:33:30,159 --> 00:33:35,360
i can use a command prompt here but if

877
00:33:32,960 --> 00:33:37,360
you are using linux or ubuntu you can

878
00:33:35,360 --> 00:33:38,399
just use a terminal

879
00:33:37,360 --> 00:33:40,080
to check

880
00:33:38,399 --> 00:33:42,799
a version of node.js just type the

881
00:33:40,080 --> 00:33:44,960
command node hyphen v so this will

882
00:33:42,799 --> 00:33:47,039
tell you the version of node.js that you

883
00:33:44,960 --> 00:33:50,080
are using and in order to check the

884
00:33:47,039 --> 00:33:51,679
version of npm just type the command npm

885
00:33:50,080 --> 00:33:53,360
hyphen v

886
00:33:51,679 --> 00:33:54,720
so this will give you

887
00:33:53,360 --> 00:33:59,200
the version of

888
00:33:54,720 --> 00:34:01,279
npm that you are install in your machine

889
00:33:59,200 --> 00:34:04,000
all right guys once we have we have

890
00:34:01,279 --> 00:34:06,559
installed node.js and npm

891
00:34:04,000 --> 00:34:08,079
let's go ahead and let's install angular

892
00:34:06,559 --> 00:34:10,720
cli

893
00:34:08,079 --> 00:34:13,119
if you are unaware with angular cli so

894
00:34:10,720 --> 00:34:16,079
angular cli is a command line interface

895
00:34:13,119 --> 00:34:17,520
tool which we can use to create angular

896
00:34:16,079 --> 00:34:20,240
applications

897
00:34:17,520 --> 00:34:22,720
so it's pretty awesome too that follows

898
00:34:20,240 --> 00:34:23,839
the best practices to create application

899
00:34:22,720 --> 00:34:26,000
structure

900
00:34:23,839 --> 00:34:29,040
file structure naming conventions for

901
00:34:26,000 --> 00:34:31,280
components component templates services

902
00:34:29,040 --> 00:34:32,879
directives a lot of things

903
00:34:31,280 --> 00:34:35,359
all right guys we are going to use

904
00:34:32,879 --> 00:34:37,919
angular cli to create and setup angular

905
00:34:35,359 --> 00:34:39,520
application and we also use angular cli

906
00:34:37,919 --> 00:34:43,200
to create a components

907
00:34:39,520 --> 00:34:45,440
services classes and a lot of things

908
00:34:43,200 --> 00:34:49,399
let's head over to the browser and let's

909
00:34:45,440 --> 00:34:49,399
search for angular cli

910
00:34:49,760 --> 00:34:54,879
open new tab in a browser and just

911
00:34:51,919 --> 00:34:57,200
search for angular cli and head over to

912
00:34:54,879 --> 00:34:59,520
the angular cl official website and look

913
00:34:57,200 --> 00:35:00,960
at here these are the commands you can

914
00:34:59,520 --> 00:35:03,760
use to

915
00:35:00,960 --> 00:35:05,359
you know install angular cli i have to

916
00:35:03,760 --> 00:35:06,800
create angular project and run the

917
00:35:05,359 --> 00:35:09,040
angular project so these are the couple

918
00:35:06,800 --> 00:35:11,680
of commands you can use to quickly

919
00:35:09,040 --> 00:35:14,839
install angular cli and create angular

920
00:35:11,680 --> 00:35:16,400
project and run angular project

921
00:35:14,839 --> 00:35:18,160
okay

922
00:35:16,400 --> 00:35:20,079
so if you want to know more about these

923
00:35:18,160 --> 00:35:21,680
commands you can read the description

924
00:35:20,079 --> 00:35:23,599
over here

925
00:35:21,680 --> 00:35:27,040
all right let's go ahead and let's use

926
00:35:23,599 --> 00:35:28,960
this command to install angular cli

927
00:35:27,040 --> 00:35:32,160
you can just copy this command and head

928
00:35:28,960 --> 00:35:34,240
over to the command prompt paste it here

929
00:35:32,160 --> 00:35:36,000
so this command will install angular cli

930
00:35:34,240 --> 00:35:38,000
globally

931
00:35:36,000 --> 00:35:40,720
well i have already installed angular

932
00:35:38,000 --> 00:35:42,160
clr in my machine so what i will do is i

933
00:35:40,720 --> 00:35:43,920
will just check

934
00:35:42,160 --> 00:35:47,040
the version of

935
00:35:43,920 --> 00:35:48,880
angular cli just enter the command ng

936
00:35:47,040 --> 00:35:50,160
iphone iphone

937
00:35:48,880 --> 00:35:52,480
version

938
00:35:50,160 --> 00:35:54,240
so once you install angular cli in our

939
00:35:52,480 --> 00:35:55,040
machine you can use this command to

940
00:35:54,240 --> 00:35:57,280
check

941
00:35:55,040 --> 00:36:00,000
the version of angular cli that you are

942
00:35:57,280 --> 00:36:01,119
installed in your machine

943
00:36:00,000 --> 00:36:03,119
all right guys

944
00:36:01,119 --> 00:36:05,280
so look at here once the command

945
00:36:03,119 --> 00:36:07,760
completes you can able to see

946
00:36:05,280 --> 00:36:09,680
angular cli 10.0.7 here this is the

947
00:36:07,760 --> 00:36:11,040
version of angular cli that i am right

948
00:36:09,680 --> 00:36:14,000
now using

949
00:36:11,040 --> 00:36:16,320
and you can able to also see the node.js

950
00:36:14,000 --> 00:36:17,760
version here

951
00:36:16,320 --> 00:36:19,760
all right guys

952
00:36:17,760 --> 00:36:22,480
all right guys once we have installed

953
00:36:19,760 --> 00:36:25,200
node.js npm and angular cli

954
00:36:22,480 --> 00:36:27,440
we're gonna need a vs code id to develop

955
00:36:25,200 --> 00:36:30,240
angular application for that just search

956
00:36:27,440 --> 00:36:32,160
for vs code download in a browser and

957
00:36:30,240 --> 00:36:34,000
hit finish and head over to the download

958
00:36:32,160 --> 00:36:35,760
page of vs code

959
00:36:34,000 --> 00:36:37,760
official website

960
00:36:35,760 --> 00:36:41,040
and this is the download page so from

961
00:36:37,760 --> 00:36:43,839
here we can download you know vs code

962
00:36:41,040 --> 00:36:45,760
ide installer if you are using windows

963
00:36:43,839 --> 00:36:46,880
then check out this

964
00:36:45,760 --> 00:36:49,280
button

965
00:36:46,880 --> 00:36:51,040
and if you are using mac then check out

966
00:36:49,280 --> 00:36:52,800
this button so just click on this button

967
00:36:51,040 --> 00:36:55,839
you will be able to download

968
00:36:52,800 --> 00:36:55,839
vs code installer

969
00:36:55,920 --> 00:36:59,760
once you have installed vs code id in

970
00:36:58,160 --> 00:37:01,359
your machine

971
00:36:59,760 --> 00:37:02,320
then we are good to

972
00:37:01,359 --> 00:37:04,560
create

973
00:37:02,320 --> 00:37:05,920
angular application and

974
00:37:04,560 --> 00:37:07,599
we are good to develop angular

975
00:37:05,920 --> 00:37:09,359
application

976
00:37:07,599 --> 00:37:11,839
all right great

977
00:37:09,359 --> 00:37:13,680
so go to the file system and create a

978
00:37:11,839 --> 00:37:15,760
folder something like angular spring

979
00:37:13,680 --> 00:37:19,200
boot crude full stack app

980
00:37:15,760 --> 00:37:21,920
and open this folder in a command prompt

981
00:37:19,200 --> 00:37:23,040
all right and just type the command code

982
00:37:21,920 --> 00:37:24,720
and dot

983
00:37:23,040 --> 00:37:28,480
so this will open

984
00:37:24,720 --> 00:37:31,200
a vs code id inside this folder

985
00:37:28,480 --> 00:37:31,200
hit enter

986
00:37:34,160 --> 00:37:38,079
i hope you guys are following the steps

987
00:37:39,680 --> 00:37:42,720
yeah great

988
00:37:41,200 --> 00:37:46,640
now within this folder we are going to

989
00:37:42,720 --> 00:37:48,079
create our angular application

990
00:37:46,640 --> 00:37:50,079
well

991
00:37:48,079 --> 00:37:52,000
we are going to use integrated terminal

992
00:37:50,079 --> 00:37:53,760
of vs code

993
00:37:52,000 --> 00:37:56,800
so in order to get an integrated

994
00:37:53,760 --> 00:37:59,839
terminal go to the terminal tab here

995
00:37:56,800 --> 00:38:01,760
click on new new terminal

996
00:37:59,839 --> 00:38:04,240
and at the bottom you can able to see

997
00:38:01,760 --> 00:38:06,480
here

998
00:38:04,240 --> 00:38:07,760
a terminal is opened

999
00:38:06,480 --> 00:38:09,200
well

1000
00:38:07,760 --> 00:38:11,040
in order to create

1001
00:38:09,200 --> 00:38:12,720
angular application we are going to use

1002
00:38:11,040 --> 00:38:13,920
command

1003
00:38:12,720 --> 00:38:14,880
that is

1004
00:38:13,920 --> 00:38:17,680
new

1005
00:38:14,880 --> 00:38:19,520
ng new followed by name of the project

1006
00:38:17,680 --> 00:38:20,480
so this is the command which we can use

1007
00:38:19,520 --> 00:38:22,560
to

1008
00:38:20,480 --> 00:38:24,640
create angular app

1009
00:38:22,560 --> 00:38:28,480
once we create angular app we can use

1010
00:38:24,640 --> 00:38:30,800
the command ng server to run angular app

1011
00:38:28,480 --> 00:38:33,280
well go to the integrated terminal and

1012
00:38:30,800 --> 00:38:36,000
just type the command emg

1013
00:38:33,280 --> 00:38:38,320
new followed by name of the project so

1014
00:38:36,000 --> 00:38:39,599
i'm going to give name of the project as

1015
00:38:38,320 --> 00:38:41,520
angular

1016
00:38:39,599 --> 00:38:44,960
front end

1017
00:38:41,520 --> 00:38:47,599
you can do any project name that you are

1018
00:38:44,960 --> 00:38:51,040
happy with but i am going to give a

1019
00:38:47,599 --> 00:38:53,119
project name as angular front-end

1020
00:38:51,040 --> 00:38:53,920
all right hit enter

1021
00:38:53,119 --> 00:38:57,920
so

1022
00:38:53,920 --> 00:39:00,960
this will ask you few options

1023
00:38:57,920 --> 00:39:02,800
would you like to add angular routing

1024
00:39:00,960 --> 00:39:03,680
yes

1025
00:39:02,800 --> 00:39:06,000
which

1026
00:39:03,680 --> 00:39:08,560
style sheet format would you like to use

1027
00:39:06,000 --> 00:39:10,560
so i'm going to use default that is css

1028
00:39:08,560 --> 00:39:12,400
so don't choose any option just hit

1029
00:39:10,560 --> 00:39:14,160
enter

1030
00:39:12,400 --> 00:39:16,480
and this command take couple of minutes

1031
00:39:14,160 --> 00:39:18,079
to install packages

1032
00:39:16,480 --> 00:39:20,000
it will basically create

1033
00:39:18,079 --> 00:39:21,920
node underscore models package and it

1034
00:39:20,000 --> 00:39:24,800
will install all the packages and

1035
00:39:21,920 --> 00:39:24,800
necessary stuff

1036
00:39:25,680 --> 00:39:31,599
once the command completes it says

1037
00:39:28,560 --> 00:39:33,440
packages installed successfully

1038
00:39:31,599 --> 00:39:35,760
and you can able to see

1039
00:39:33,440 --> 00:39:37,040
angular hyphen front-end folder is

1040
00:39:35,760 --> 00:39:39,599
created

1041
00:39:37,040 --> 00:39:40,800
and if you expand this folder you can

1042
00:39:39,599 --> 00:39:43,839
able to see

1043
00:39:40,800 --> 00:39:45,920
a whole lot of files and folders are

1044
00:39:43,839 --> 00:39:48,400
created inside this

1045
00:39:45,920 --> 00:39:50,640
angular hyphen front-end folder so this

1046
00:39:48,400 --> 00:39:52,800
is our angular application and this is

1047
00:39:50,640 --> 00:39:54,880
the folder structure that is created by

1048
00:39:52,800 --> 00:39:58,160
angular cli

1049
00:39:54,880 --> 00:40:00,400
so before knowing few of the important

1050
00:39:58,160 --> 00:40:04,240
files and folders let's go ahead and

1051
00:40:00,400 --> 00:40:06,400
let's first run our angular application

1052
00:40:04,240 --> 00:40:09,040
go to the integrator manual and just

1053
00:40:06,400 --> 00:40:11,839
type the command cd

1054
00:40:09,040 --> 00:40:14,240
and then navigate to and navigate inside

1055
00:40:11,839 --> 00:40:16,400
the folder that is angular hyphen front

1056
00:40:14,240 --> 00:40:16,400
end

1057
00:40:18,240 --> 00:40:21,760
hit enter

1058
00:40:19,839 --> 00:40:24,240
so before running angular application

1059
00:40:21,760 --> 00:40:25,680
using ng server command make sure that

1060
00:40:24,240 --> 00:40:29,200
you are inside

1061
00:40:25,680 --> 00:40:30,960
a folder okay and just type the command

1062
00:40:29,200 --> 00:40:32,560
ng

1063
00:40:30,960 --> 00:40:34,240
so hit finish

1064
00:40:32,560 --> 00:40:36,640
so this will basically run angular

1065
00:40:34,240 --> 00:40:39,839
application in local development server

1066
00:40:36,640 --> 00:40:43,839
on port 4200

1067
00:40:39,839 --> 00:40:46,960
once ng server command completes it says

1068
00:40:43,839 --> 00:40:49,760
confired successfully

1069
00:40:46,960 --> 00:40:53,520
all right and angular live development

1070
00:40:49,760 --> 00:40:54,960
server is listening on localhost 4200

1071
00:40:53,520 --> 00:40:58,000
let's go ahead and let's open the

1072
00:40:54,960 --> 00:41:00,800
browser and hit this url in a browser to

1073
00:40:58,000 --> 00:41:04,240
access our angular application

1074
00:41:00,800 --> 00:41:05,119
go to the browser and in a new tab just

1075
00:41:04,240 --> 00:41:07,280
type

1076
00:41:05,119 --> 00:41:09,839
a localhost

1077
00:41:07,280 --> 00:41:12,880
4200

1078
00:41:09,839 --> 00:41:16,079
yeah here it is so this is the default

1079
00:41:12,880 --> 00:41:18,800
as you know template provided by angular

1080
00:41:16,079 --> 00:41:21,920
so this template or html page contains

1081
00:41:18,800 --> 00:41:23,040
few links which will in turn navigate to

1082
00:41:21,920 --> 00:41:25,599
the

1083
00:41:23,040 --> 00:41:28,319
angular official website documentation

1084
00:41:25,599 --> 00:41:30,240
angular clr documentation and angular

1085
00:41:28,319 --> 00:41:33,240
blog site

1086
00:41:30,240 --> 00:41:33,240
alright

1087
00:41:35,760 --> 00:41:40,720
alright guys our angular application is

1088
00:41:37,839 --> 00:41:42,640
up and running on port 4200 let's go

1089
00:41:40,720 --> 00:41:45,119
ahead and let's explore important

1090
00:41:42,640 --> 00:41:47,920
folders and files in our angular app

1091
00:41:45,119 --> 00:41:50,560
generated by angular cli let's begin

1092
00:41:47,920 --> 00:41:52,880
with package.json file

1093
00:41:50,560 --> 00:41:55,040
so package.json file contains the name

1094
00:41:52,880 --> 00:41:56,720
of the project version of the project

1095
00:41:55,040 --> 00:41:59,040
and a few scripts

1096
00:41:56,720 --> 00:42:00,960
to run angular application to build

1097
00:41:59,040 --> 00:42:03,200
angular application and to test angular

1098
00:42:00,960 --> 00:42:05,280
application and this is the dependency

1099
00:42:03,200 --> 00:42:07,839
section inside a dependency section we

1100
00:42:05,280 --> 00:42:09,839
define all the dependencies

1101
00:42:07,839 --> 00:42:12,240
and its version required to run our

1102
00:42:09,839 --> 00:42:14,240
angular application so notice here we

1103
00:42:12,240 --> 00:42:15,359
are using angular 10 which is latest

1104
00:42:14,240 --> 00:42:17,680
list of

1105
00:42:15,359 --> 00:42:19,920
angular and look at here we are using

1106
00:42:17,680 --> 00:42:22,480
dev dependencies

1107
00:42:19,920 --> 00:42:25,200
so basically package.json file contains

1108
00:42:22,480 --> 00:42:27,200
all the tools libraries and packages

1109
00:42:25,200 --> 00:42:28,880
which are required to run our angular

1110
00:42:27,200 --> 00:42:31,200
application

1111
00:42:28,880 --> 00:42:34,800
and package.json file which which looks

1112
00:42:31,200 --> 00:42:36,960
like um palm.xml in my own project

1113
00:42:34,800 --> 00:42:39,200
so whenever we use the command npm

1114
00:42:36,960 --> 00:42:42,160
install it will install all the

1115
00:42:39,200 --> 00:42:45,599
dependencies and its version in node

1116
00:42:42,160 --> 00:42:48,160
underscore modules folder likewise in

1117
00:42:45,599 --> 00:42:49,760
marvin project so palm.xml contains all

1118
00:42:48,160 --> 00:42:51,599
the dependencies and plugin sites so

1119
00:42:49,760 --> 00:42:53,119
whenever we run the command like marvin

1120
00:42:51,599 --> 00:42:54,079
install

1121
00:42:53,119 --> 00:42:55,839
maven

1122
00:42:54,079 --> 00:42:57,920
clean install then

1123
00:42:55,839 --> 00:42:59,920
basically marvin will download all the

1124
00:42:57,920 --> 00:43:02,640
dependencies from the internet and it

1125
00:42:59,920 --> 00:43:04,000
will store in a local repository

1126
00:43:02,640 --> 00:43:06,800
so similarly

1127
00:43:04,000 --> 00:43:08,720
when we run the command npm install so

1128
00:43:06,800 --> 00:43:11,200
node.js will basically

1129
00:43:08,720 --> 00:43:13,440
download and install all these

1130
00:43:11,200 --> 00:43:15,680
dependencies in node underscore modules

1131
00:43:13,440 --> 00:43:17,119
folder

1132
00:43:15,680 --> 00:43:18,560
alright so this is all about

1133
00:43:17,119 --> 00:43:20,040
package.json

1134
00:43:18,560 --> 00:43:21,760
and we have

1135
00:43:20,040 --> 00:43:24,319
tsconfig.json

1136
00:43:21,760 --> 00:43:27,359
file so this file

1137
00:43:24,319 --> 00:43:29,040
related to typescript configuration

1138
00:43:27,359 --> 00:43:30,240
and it internally

1139
00:43:29,040 --> 00:43:32,800
called

1140
00:43:30,240 --> 00:43:36,720
tsconfig.app.json

1141
00:43:32,800 --> 00:43:37,760
and ts config.spec.json

1142
00:43:36,720 --> 00:43:40,640
well

1143
00:43:37,760 --> 00:43:42,960
so we write a typescript code in angular

1144
00:43:40,640 --> 00:43:45,359
application right and browser don't

1145
00:43:42,960 --> 00:43:47,839
understand the typescript so these are

1146
00:43:45,359 --> 00:43:50,000
the few typescript configuration files

1147
00:43:47,839 --> 00:43:52,640
that will that will convert a typescript

1148
00:43:50,000 --> 00:43:55,119
code into javascript so that browser can

1149
00:43:52,640 --> 00:43:56,800
able to compile and run the angular

1150
00:43:55,119 --> 00:44:00,000
application

1151
00:43:56,800 --> 00:44:01,599
so next is node underscore models folder

1152
00:44:00,000 --> 00:44:04,000
so this folder contains all the

1153
00:44:01,599 --> 00:44:06,079
dependencies packages that are required

1154
00:44:04,000 --> 00:44:08,400
to run angular application

1155
00:44:06,079 --> 00:44:09,520
and this folder will basically generate

1156
00:44:08,400 --> 00:44:12,319
when we

1157
00:44:09,520 --> 00:44:13,680
uh create our angular app using angular

1158
00:44:12,319 --> 00:44:16,319
cli

1159
00:44:13,680 --> 00:44:18,160
and whenever we use npm command to

1160
00:44:16,319 --> 00:44:19,280
install any javascript libraries or

1161
00:44:18,160 --> 00:44:21,599
packages

1162
00:44:19,280 --> 00:44:24,079
so these labeling packages are will get

1163
00:44:21,599 --> 00:44:27,040
you know stored in this local folder

1164
00:44:24,079 --> 00:44:29,040
that is node underscore modules folder

1165
00:44:27,040 --> 00:44:32,000
next is src folder so all your

1166
00:44:29,040 --> 00:44:34,000
development goes inside src folder

1167
00:44:32,000 --> 00:44:35,760
within a such folder

1168
00:44:34,000 --> 00:44:37,920
you can find

1169
00:44:35,760 --> 00:44:39,680
file so this is a very important file

1170
00:44:37,920 --> 00:44:41,839
and this is the entry point of our

1171
00:44:39,680 --> 00:44:44,480
angular application

1172
00:44:41,839 --> 00:44:46,160
next is index.html file so this is a

1173
00:44:44,480 --> 00:44:48,720
single file which will get served in a

1174
00:44:46,160 --> 00:44:50,720
browser and we are developing single

1175
00:44:48,720 --> 00:44:51,520
page application so we should have only

1176
00:44:50,720 --> 00:44:54,400
one

1177
00:44:51,520 --> 00:44:56,960
html file and it in turn update uh the

1178
00:44:54,400 --> 00:44:59,119
same html file so look at here app root

1179
00:44:56,960 --> 00:45:01,359
so this is the selector which we have

1180
00:44:59,119 --> 00:45:03,520
configured in app component

1181
00:45:01,359 --> 00:45:04,880
and this selector in turn

1182
00:45:03,520 --> 00:45:07,520
get call

1183
00:45:04,880 --> 00:45:09,280
app component html template

1184
00:45:07,520 --> 00:45:10,640
okay great

1185
00:45:09,280 --> 00:45:12,960
next is

1186
00:45:10,640 --> 00:45:14,880
app module so app module is a root

1187
00:45:12,960 --> 00:45:17,200
module of our application and inside

1188
00:45:14,880 --> 00:45:19,200
this model we configure

1189
00:45:17,200 --> 00:45:21,920
you know components in declare

1190
00:45:19,200 --> 00:45:24,640
declarations array and other modules

1191
00:45:21,920 --> 00:45:28,560
dependent modules inside imports array

1192
00:45:24,640 --> 00:45:31,920
and we configure providers like services

1193
00:45:28,560 --> 00:45:34,240
and within a app module we bootstrap and

1194
00:45:31,920 --> 00:45:36,079
kickstart app component and app

1195
00:45:34,240 --> 00:45:38,079
component is our

1196
00:45:36,079 --> 00:45:40,560
root component

1197
00:45:38,079 --> 00:45:43,280
well angular application can have

1198
00:45:40,560 --> 00:45:45,760
any number of modules but it should have

1199
00:45:43,280 --> 00:45:48,079
at least one module and that is called

1200
00:45:45,760 --> 00:45:49,040
app module or root model

1201
00:45:48,079 --> 00:45:51,200
okay

1202
00:45:49,040 --> 00:45:53,280
and angular application can have any

1203
00:45:51,200 --> 00:45:55,119
number of components but it should have

1204
00:45:53,280 --> 00:45:58,240
at least one component that is called a

1205
00:45:55,119 --> 00:45:59,359
root component or app component

1206
00:45:58,240 --> 00:46:01,359
understood

1207
00:45:59,359 --> 00:46:03,119
and next is uh

1208
00:46:01,359 --> 00:46:06,319
folly fields so this is related to

1209
00:46:03,119 --> 00:46:08,960
browser uh uh specific uh to support

1210
00:46:06,319 --> 00:46:11,839
different browsers so this file will

1211
00:46:08,960 --> 00:46:14,640
uh you know take care and styles.css so

1212
00:46:11,839 --> 00:46:18,160
here we basically globally uh you know

1213
00:46:14,640 --> 00:46:20,319
configure css files

1214
00:46:18,160 --> 00:46:22,079
and this is a test.ts file which is

1215
00:46:20,319 --> 00:46:24,400
related to test cases in angular

1216
00:46:22,079 --> 00:46:26,480
application and this environments folder

1217
00:46:24,400 --> 00:46:28,319
so all the environments uh

1218
00:46:26,480 --> 00:46:29,280
you know configurations goes inside this

1219
00:46:28,319 --> 00:46:31,119
folder

1220
00:46:29,280 --> 00:46:33,119
and assets folder contains a static

1221
00:46:31,119 --> 00:46:36,000
files like images uh

1222
00:46:33,119 --> 00:46:38,240
javascript files css files etc

1223
00:46:36,000 --> 00:46:40,400
and this is the app routing modules

1224
00:46:38,240 --> 00:46:42,640
uh we basically configure a routing of

1225
00:46:40,400 --> 00:46:44,240
our angular application so this is a

1226
00:46:42,640 --> 00:46:46,800
pretty much about

1227
00:46:44,240 --> 00:46:48,960
uh i know the files and the important

1228
00:46:46,800 --> 00:46:50,960
files in our angular application

1229
00:46:48,960 --> 00:46:53,520
now let's see how the control flows in

1230
00:46:50,960 --> 00:46:55,359
our angular application so look at your

1231
00:46:53,520 --> 00:46:56,960
main.ts file so this is the entry point

1232
00:46:55,359 --> 00:47:00,079
of our angular application and the

1233
00:46:56,960 --> 00:47:02,400
control first comes to the main dock and

1234
00:47:00,079 --> 00:47:05,040
main dot ts file in turn

1235
00:47:02,400 --> 00:47:07,680
bootstrap and kickstart app model using

1236
00:47:05,040 --> 00:47:10,160
bootstrap model method

1237
00:47:07,680 --> 00:47:13,119
and app module in turn bootstrap and

1238
00:47:10,160 --> 00:47:14,880
kickstart app component app component is

1239
00:47:13,119 --> 00:47:17,599
our root component and aqua app

1240
00:47:14,880 --> 00:47:20,079
component has a property called title

1241
00:47:17,599 --> 00:47:21,040
and this title will be you know rendered

1242
00:47:20,079 --> 00:47:23,920
inside

1243
00:47:21,040 --> 00:47:26,400
app component html template so it's this

1244
00:47:23,920 --> 00:47:29,839
is how the control flows in

1245
00:47:26,400 --> 00:47:29,839
angular application

1246
00:47:32,880 --> 00:47:36,640
let's go ahead and let's understand what

1247
00:47:34,720 --> 00:47:38,800
are the components that we are going to

1248
00:47:36,640 --> 00:47:40,559
develop going forward in our angular

1249
00:47:38,800 --> 00:47:41,359
application

1250
00:47:40,559 --> 00:47:44,640
well

1251
00:47:41,359 --> 00:47:47,119
we are going to create four components

1252
00:47:44,640 --> 00:47:48,319
and each component

1253
00:47:47,119 --> 00:47:50,319
represents

1254
00:47:48,319 --> 00:47:52,800
a functionality for example create

1255
00:47:50,319 --> 00:47:55,599
employee component we develop to perform

1256
00:47:52,800 --> 00:47:57,920
create employee functionality

1257
00:47:55,599 --> 00:48:00,480
we create employee list component to

1258
00:47:57,920 --> 00:48:02,000
perform employees functionality we

1259
00:48:00,480 --> 00:48:04,240
create update employee component to

1260
00:48:02,000 --> 00:48:05,520
perform update employee functionality

1261
00:48:04,240 --> 00:48:08,000
and we create

1262
00:48:05,520 --> 00:48:10,480
employee details component to perform

1263
00:48:08,000 --> 00:48:12,720
view employee details functionality so

1264
00:48:10,480 --> 00:48:15,760
each component represents

1265
00:48:12,720 --> 00:48:17,359
a you know separate functionality

1266
00:48:15,760 --> 00:48:18,640
okay great

1267
00:48:17,359 --> 00:48:21,440
now we have

1268
00:48:18,640 --> 00:48:24,720
employee service so employee service is

1269
00:48:21,440 --> 00:48:25,760
basically a angular service which holds

1270
00:48:24,720 --> 00:48:28,880
all the

1271
00:48:25,760 --> 00:48:31,760
http rest client code

1272
00:48:28,880 --> 00:48:35,040
and basically we use angular service

1273
00:48:31,760 --> 00:48:38,079
to you know to keep all the common logic

1274
00:48:35,040 --> 00:48:40,240
and we can inject employee service in

1275
00:48:38,079 --> 00:48:43,119
required components so basically we use

1276
00:48:40,240 --> 00:48:45,760
angular dependency injection to inject

1277
00:48:43,119 --> 00:48:48,640
angular services in various components

1278
00:48:45,760 --> 00:48:51,359
and we can delegate a task to the

1279
00:48:48,640 --> 00:48:52,720
employee service for example we can keep

1280
00:48:51,359 --> 00:48:54,720
all the logging

1281
00:48:52,720 --> 00:48:57,119
uh common logic in employee service and

1282
00:48:54,720 --> 00:48:58,480
we can inject in required components and

1283
00:48:57,119 --> 00:49:00,559
we can call

1284
00:48:58,480 --> 00:49:02,559
you know logging methods

1285
00:49:00,559 --> 00:49:04,079
so in our angular application we create

1286
00:49:02,559 --> 00:49:05,839
employee service

1287
00:49:04,079 --> 00:49:08,880
class

1288
00:49:05,839 --> 00:49:10,960
which will communicate with server using

1289
00:49:08,880 --> 00:49:12,240
a rest apis

1290
00:49:10,960 --> 00:49:14,720
and

1291
00:49:12,240 --> 00:49:17,440
so employee service internally uses http

1292
00:49:14,720 --> 00:49:19,520
client module to make rsd pay call so

1293
00:49:17,440 --> 00:49:23,200
basically we are going to

1294
00:49:19,520 --> 00:49:25,359
make a get a rest api call

1295
00:49:23,200 --> 00:49:28,559
and post the rest api call

1296
00:49:25,359 --> 00:49:31,680
and put rusty pay call

1297
00:49:28,559 --> 00:49:32,720
and delete rest api call so these are

1298
00:49:31,680 --> 00:49:34,960
the

1299
00:49:32,720 --> 00:49:37,280
crude operations right so we are going

1300
00:49:34,960 --> 00:49:38,720
to write a rest client code in employee

1301
00:49:37,280 --> 00:49:41,200
service to make

1302
00:49:38,720 --> 00:49:42,880
this rest api call

1303
00:49:41,200 --> 00:49:45,520
okay great

1304
00:49:42,880 --> 00:49:47,760
and look at here we have a router so we

1305
00:49:45,520 --> 00:49:51,359
are going to configure

1306
00:49:47,760 --> 00:49:54,400
routing in app routing model

1307
00:49:51,359 --> 00:49:56,640
angular provides its own

1308
00:49:54,400 --> 00:49:58,559
routing model so we can use angular

1309
00:49:56,640 --> 00:50:00,960
provided modules

1310
00:49:58,559 --> 00:50:03,520
to configure routing in our angular

1311
00:50:00,960 --> 00:50:06,319
application

1312
00:50:03,520 --> 00:50:08,559
all right great

1313
00:50:06,319 --> 00:50:10,240
and also we are going to create a

1314
00:50:08,559 --> 00:50:11,760
employee

1315
00:50:10,240 --> 00:50:14,319
employee model

1316
00:50:11,760 --> 00:50:17,280
so this is basically a typescript class

1317
00:50:14,319 --> 00:50:19,280
it contains a properties

1318
00:50:17,280 --> 00:50:21,760
and we create this employee typescript

1319
00:50:19,280 --> 00:50:24,559
class model to hold a response of the

1320
00:50:21,760 --> 00:50:27,520
rest apis so going forward we'll create

1321
00:50:24,559 --> 00:50:29,200
all these components service and we

1322
00:50:27,520 --> 00:50:30,319
configure routing in our angular

1323
00:50:29,200 --> 00:50:32,480
application

1324
00:50:30,319 --> 00:50:34,880
so basically we will begin with employee

1325
00:50:32,480 --> 00:50:38,000
list component but before that

1326
00:50:34,880 --> 00:50:40,559
we are going to integrate bootstrap 4

1327
00:50:38,000 --> 00:50:42,160
css library in our angular application

1328
00:50:40,559 --> 00:50:44,640
in next video

1329
00:50:42,160 --> 00:50:46,480
we'll integrate bootstrap for css

1330
00:50:44,640 --> 00:50:48,960
library in our angular application so

1331
00:50:46,480 --> 00:50:52,079
that we can make our angular application

1332
00:50:48,960 --> 00:50:54,880
responsive and stylish

1333
00:50:52,079 --> 00:50:57,040
so once we integrate bootstrap css labor

1334
00:50:54,880 --> 00:51:00,319
in our angular application next we'll

1335
00:50:57,040 --> 00:51:01,280
start creating employee list component

1336
00:51:00,319 --> 00:51:04,400
and then

1337
00:51:01,280 --> 00:51:06,960
once we complete employees component

1338
00:51:04,400 --> 00:51:09,119
then we'll start creating a create

1339
00:51:06,960 --> 00:51:11,119
employee component and once we complete

1340
00:51:09,119 --> 00:51:12,880
create employee component end to end

1341
00:51:11,119 --> 00:51:15,599
then we'll start update employee

1342
00:51:12,880 --> 00:51:18,319
component so once we complete update

1343
00:51:15,599 --> 00:51:20,400
employee component then we'll

1344
00:51:18,319 --> 00:51:22,559
create employee details component to

1345
00:51:20,400 --> 00:51:24,880
perform view employee details

1346
00:51:22,559 --> 00:51:26,640
functionality

1347
00:51:24,880 --> 00:51:28,480
alright guys this is the quick summary

1348
00:51:26,640 --> 00:51:32,240
of our angular application that we are

1349
00:51:28,480 --> 00:51:32,240
going to develop going forward

1350
00:51:35,839 --> 00:51:40,079
let's go ahead and let's add bootstrap

1351
00:51:37,520 --> 00:51:42,480
css library in our angular application

1352
00:51:40,079 --> 00:51:44,880
bootstrap is a css

1353
00:51:42,480 --> 00:51:47,119
framework which we can use to develop a

1354
00:51:44,880 --> 00:51:49,200
responsive layouts in our web

1355
00:51:47,119 --> 00:51:51,119
applications

1356
00:51:49,200 --> 00:51:53,359
so there are various ways to integrate

1357
00:51:51,119 --> 00:51:57,200
bootstrap in our angular application we

1358
00:51:53,359 --> 00:51:59,119
will see a few of the simple ways

1359
00:51:57,200 --> 00:52:00,240
so first we'll

1360
00:51:59,119 --> 00:52:02,319
see

1361
00:52:00,240 --> 00:52:06,160
how to install bootstrap using npm

1362
00:52:02,319 --> 00:52:08,640
command and we'll add a path to our

1363
00:52:06,160 --> 00:52:10,160
angular application

1364
00:52:08,640 --> 00:52:12,720
for example

1365
00:52:10,160 --> 00:52:15,280
open new integrated terminal in vs code

1366
00:52:12,720 --> 00:52:18,160
go to the terminal click on new terminal

1367
00:52:15,280 --> 00:52:20,160
and make sure that you are in a root

1368
00:52:18,160 --> 00:52:21,680
folder of your project

1369
00:52:20,160 --> 00:52:25,040
and here you need to just type the

1370
00:52:21,680 --> 00:52:27,040
command npm install bootstrap hypernyp

1371
00:52:25,040 --> 00:52:28,559
and save

1372
00:52:27,040 --> 00:52:31,280
and hit enter

1373
00:52:28,559 --> 00:52:33,200
so this will install a bootstrap css

1374
00:52:31,280 --> 00:52:35,359
packages inside

1375
00:52:33,200 --> 00:52:38,280
a node underscore modules

1376
00:52:35,359 --> 00:52:40,240
folder and it will add a new entry in

1377
00:52:38,280 --> 00:52:42,800
package.json file

1378
00:52:40,240 --> 00:52:45,760
with its version for example if you open

1379
00:52:42,800 --> 00:52:47,680
for package.json file here you can see

1380
00:52:45,760 --> 00:52:49,599
a booster package is added once

1381
00:52:47,680 --> 00:52:50,960
bootstrap css package is successfully

1382
00:52:49,599 --> 00:52:54,000
installed

1383
00:52:50,960 --> 00:52:57,359
go to the angular.json file

1384
00:52:54,000 --> 00:52:59,280
and here you can find

1385
00:52:57,359 --> 00:53:02,240
you know styles

1386
00:52:59,280 --> 00:53:04,000
array so here you can configure

1387
00:53:02,240 --> 00:53:05,920
a bootstrap css

1388
00:53:04,000 --> 00:53:07,520
you know library like this so this is

1389
00:53:05,920 --> 00:53:10,079
the path to

1390
00:53:07,520 --> 00:53:11,200
the bootstrap css library that just we

1391
00:53:10,079 --> 00:53:12,960
have

1392
00:53:11,200 --> 00:53:15,440
installed

1393
00:53:12,960 --> 00:53:17,040
so this is the first way

1394
00:53:15,440 --> 00:53:18,640
and

1395
00:53:17,040 --> 00:53:19,880
the second way is

1396
00:53:18,640 --> 00:53:23,280
go to the

1397
00:53:19,880 --> 00:53:25,200
styles.css file and here we can

1398
00:53:23,280 --> 00:53:28,079
just import

1399
00:53:25,200 --> 00:53:30,480
uh the path of the bootstrap css library

1400
00:53:28,079 --> 00:53:32,800
that just we have installed so this is

1401
00:53:30,480 --> 00:53:33,760
pretty simple and i prefer using this

1402
00:53:32,800 --> 00:53:36,240
way

1403
00:53:33,760 --> 00:53:38,680
i globally define the css

1404
00:53:36,240 --> 00:53:41,359
file path over here inside stall

1405
00:53:38,680 --> 00:53:44,240
styles.css file

1406
00:53:41,359 --> 00:53:46,000
and another way is you can download

1407
00:53:44,240 --> 00:53:48,400
bootstrap css

1408
00:53:46,000 --> 00:53:51,760
uh you know remote links from

1409
00:53:48,400 --> 00:53:54,480
cdn for example go to the browser and in

1410
00:53:51,760 --> 00:53:57,599
a new tab just search for

1411
00:53:54,480 --> 00:54:00,480
bootstrap for cdn link

1412
00:53:57,599 --> 00:54:02,160
and go to the official website of

1413
00:54:00,480 --> 00:54:04,960
bootstrap

1414
00:54:02,160 --> 00:54:07,920
and here you can find the cdn remote

1415
00:54:04,960 --> 00:54:10,720
links of bootstrap css library

1416
00:54:07,920 --> 00:54:12,160
go ahead and click on copy button so

1417
00:54:10,720 --> 00:54:14,640
this will copy

1418
00:54:12,160 --> 00:54:17,920
this url

1419
00:54:14,640 --> 00:54:17,920
so comment out this code

1420
00:54:18,319 --> 00:54:22,800
and go to the index.html file and go to

1421
00:54:21,440 --> 00:54:24,640
the header section

1422
00:54:22,800 --> 00:54:26,960
within a header section just paste the

1423
00:54:24,640 --> 00:54:26,960
link

1424
00:54:27,520 --> 00:54:32,559
okay so this is the another way

1425
00:54:29,839 --> 00:54:34,480
so these are the three ways uh

1426
00:54:32,559 --> 00:54:36,839
i have found you know integrating

1427
00:54:34,480 --> 00:54:40,480
bootstrap css library in angular

1428
00:54:36,839 --> 00:54:42,799
application so you can use either one to

1429
00:54:40,480 --> 00:54:44,079
integrate bootstrap in you know angular

1430
00:54:42,799 --> 00:54:47,359
application

1431
00:54:44,079 --> 00:54:50,240
so to keep it simple i am going to use

1432
00:54:47,359 --> 00:54:53,040
the cdn remote links like this

1433
00:54:50,240 --> 00:54:55,200
or you can also use uh this way so this

1434
00:54:53,040 --> 00:54:58,559
is the

1435
00:54:55,200 --> 00:55:01,040
standard way that i prefer so let me

1436
00:54:58,559 --> 00:55:01,040
do this

1437
00:55:02,240 --> 00:55:05,200
and let me use

1438
00:55:04,000 --> 00:55:07,599
this way

1439
00:55:05,200 --> 00:55:10,960
so you can go to the styles.css and you

1440
00:55:07,599 --> 00:55:13,680
can configure this path like this

1441
00:55:10,960 --> 00:55:15,280
and in order to make sure that

1442
00:55:13,680 --> 00:55:17,440
whether the bootstrap is successfully

1443
00:55:15,280 --> 00:55:19,119
integrated in our angular application

1444
00:55:17,440 --> 00:55:21,359
what i will do is i will

1445
00:55:19,119 --> 00:55:24,240
open app component

1446
00:55:21,359 --> 00:55:27,040
template and i will just remove all the

1447
00:55:24,240 --> 00:55:32,160
code and i will add some

1448
00:55:27,040 --> 00:55:35,680
css to h1 html element like this

1449
00:55:32,160 --> 00:55:37,040
let me use a double curly braces though

1450
00:55:35,680 --> 00:55:39,359
this is called

1451
00:55:37,040 --> 00:55:41,359
uh interpolation in angular so we can

1452
00:55:39,359 --> 00:55:43,599
use antifullation to access the

1453
00:55:41,359 --> 00:55:45,760
properties of component

1454
00:55:43,599 --> 00:55:48,000
and title is defined in app component so

1455
00:55:45,760 --> 00:55:49,920
i am going to just display title in a

1456
00:55:48,000 --> 00:55:52,960
web page

1457
00:55:49,920 --> 00:55:54,720
and let's use text center bootstrap css

1458
00:55:52,960 --> 00:55:56,799
class in order to

1459
00:55:54,720 --> 00:55:58,000
i know display this title at the center

1460
00:55:56,799 --> 00:55:59,839
of the page

1461
00:55:58,000 --> 00:56:02,319
let's go ahead and let's use class

1462
00:55:59,839 --> 00:56:03,599
property and here i'm going to say text

1463
00:56:02,319 --> 00:56:05,359
hyphen

1464
00:56:03,599 --> 00:56:07,119
center

1465
00:56:05,359 --> 00:56:09,680
let's save the file and let's go back to

1466
00:56:07,119 --> 00:56:09,680
the browser

1467
00:56:10,240 --> 00:56:14,799
and let's

1468
00:56:11,920 --> 00:56:15,760
let's refresh and you can able to see

1469
00:56:14,799 --> 00:56:17,520
here

1470
00:56:15,760 --> 00:56:19,440
angular front end so this is the name of

1471
00:56:17,520 --> 00:56:21,920
the project that is

1472
00:56:19,440 --> 00:56:24,160
the title that is printed on a

1473
00:56:21,920 --> 00:56:26,079
middle of the page it means that a

1474
00:56:24,160 --> 00:56:28,319
bootstrap css library is successfully

1475
00:56:26,079 --> 00:56:31,839
indicated in angular application

1476
00:56:28,319 --> 00:56:31,839
if you comment out this code

1477
00:56:32,559 --> 00:56:34,960
all right

1478
00:56:36,000 --> 00:56:39,440
and save the file

1479
00:56:38,160 --> 00:56:42,400
and look at here

1480
00:56:39,440 --> 00:56:45,119
so without a bootstrap css library how

1481
00:56:42,400 --> 00:56:48,720
the title aligned here

1482
00:56:45,119 --> 00:56:48,720
okay you got the difference right

1483
00:56:49,760 --> 00:56:53,760
so look at here after adding bootstrap

1484
00:56:51,839 --> 00:56:55,440
css library

1485
00:56:53,760 --> 00:56:56,720
the title is aligned at the center of

1486
00:56:55,440 --> 00:56:58,079
the page

1487
00:56:56,720 --> 00:57:01,760
all right guys we have successfully

1488
00:56:58,079 --> 00:57:03,200
integrated bootstrap css library in our

1489
00:57:01,760 --> 00:57:05,040
you know angular application going

1490
00:57:03,200 --> 00:57:06,960
forward we are going to use a lot of

1491
00:57:05,040 --> 00:57:10,160
bookshare css classes

1492
00:57:06,960 --> 00:57:14,079
to make our web pages responsive

1493
00:57:10,160 --> 00:57:14,079
and uh you know pretty

1494
00:57:17,680 --> 00:57:21,119
we are going to create employee list

1495
00:57:20,000 --> 00:57:23,520
component

1496
00:57:21,119 --> 00:57:25,359
which will display a list of employees

1497
00:57:23,520 --> 00:57:26,720
on a web page

1498
00:57:25,359 --> 00:57:29,040
all right

1499
00:57:26,720 --> 00:57:30,720
before that let's recap what we have

1500
00:57:29,040 --> 00:57:33,040
done so far

1501
00:57:30,720 --> 00:57:35,119
we have created springbrook project we

1502
00:57:33,040 --> 00:57:36,480
have created jp entity and jpeg

1503
00:57:35,119 --> 00:57:38,559
repository

1504
00:57:36,480 --> 00:57:40,880
we have created and exposed

1505
00:57:38,559 --> 00:57:43,359
list employee rest api

1506
00:57:40,880 --> 00:57:45,440
we have created angular application and

1507
00:57:43,359 --> 00:57:46,799
we had a quick overview of angular

1508
00:57:45,440 --> 00:57:49,599
application

1509
00:57:46,799 --> 00:57:52,640
and in previous video we have added

1510
00:57:49,599 --> 00:57:55,280
bootstrap 4 in our angular application

1511
00:57:52,640 --> 00:57:57,040
in this video we will create typescript

1512
00:57:55,280 --> 00:57:59,040
class for employee

1513
00:57:57,040 --> 00:58:01,599
so we create a employee typescript class

1514
00:57:59,040 --> 00:58:04,720
which will hold a response of list

1515
00:58:01,599 --> 00:58:06,799
employee rest api and we also create

1516
00:58:04,720 --> 00:58:08,960
angular list component

1517
00:58:06,799 --> 00:58:11,359
angular least employee component to

1518
00:58:08,960 --> 00:58:13,440
display a list of employees on a web

1519
00:58:11,359 --> 00:58:15,839
page

1520
00:58:13,440 --> 00:58:18,559
in next video we'll connect our angular

1521
00:58:15,839 --> 00:58:19,440
application with least employer rest api

1522
00:58:18,559 --> 00:58:20,720
and

1523
00:58:19,440 --> 00:58:22,640
we will get

1524
00:58:20,720 --> 00:58:25,280
a list of employees from list employee

1525
00:58:22,640 --> 00:58:27,680
rest api and we populate a list of

1526
00:58:25,280 --> 00:58:28,880
employees on our web page

1527
00:58:27,680 --> 00:58:31,520
alright guys

1528
00:58:28,880 --> 00:58:34,079
let's go ahead and let's create

1529
00:58:31,520 --> 00:58:36,400
typescript class for employee and

1530
00:58:34,079 --> 00:58:37,839
we'll also create angular list employee

1531
00:58:36,400 --> 00:58:40,960
component

1532
00:58:37,839 --> 00:58:44,240
let's switch to the vs code id and let's

1533
00:58:40,960 --> 00:58:46,000
create typescript class using angular

1534
00:58:44,240 --> 00:58:47,839
cli

1535
00:58:46,000 --> 00:58:50,160
make sure that

1536
00:58:47,839 --> 00:58:52,240
you are in a project that is a root

1537
00:58:50,160 --> 00:58:53,440
folder or project angular iphone front

1538
00:58:52,240 --> 00:58:55,440
end

1539
00:58:53,440 --> 00:58:58,400
and let's go ahead and let's use angular

1540
00:58:55,440 --> 00:59:00,799
cli to create typescript class

1541
00:58:58,400 --> 00:59:03,200
let's use the command

1542
00:59:00,799 --> 00:59:03,200
ng

1543
00:59:03,359 --> 00:59:08,640
g g for generate and then class

1544
00:59:07,040 --> 00:59:10,720
and name of the class

1545
00:59:08,640 --> 00:59:13,200
let's say employee

1546
00:59:10,720 --> 00:59:14,720
so this command will create a typescript

1547
00:59:13,200 --> 00:59:16,640
class

1548
00:59:14,720 --> 00:59:18,720
hit enter

1549
00:59:16,640 --> 00:59:24,319
so this command created

1550
00:59:18,720 --> 00:59:25,520
two files employ.ts and employ.spec.ts

1551
00:59:24,319 --> 00:59:28,880
well

1552
00:59:25,520 --> 00:59:32,000
expand app folder within app folder you

1553
00:59:28,880 --> 00:59:33,280
can see these two files are created all

1554
00:59:32,000 --> 00:59:35,359
right

1555
00:59:33,280 --> 00:59:37,680
so let's go ahead and let's define some

1556
00:59:35,359 --> 00:59:38,480
properties in our employee typescript

1557
00:59:37,680 --> 00:59:40,640
class

1558
00:59:38,480 --> 00:59:42,319
so basically we are creating employee

1559
00:59:40,640 --> 00:59:46,559
typescript class which will basically

1560
00:59:42,319 --> 00:59:48,000
hold a response of a rest api

1561
00:59:46,559 --> 00:59:50,000
okay

1562
00:59:48,000 --> 00:59:51,680
let's go and let's define some of the

1563
00:59:50,000 --> 00:59:52,720
properties

1564
00:59:51,680 --> 00:59:54,799
id

1565
00:59:52,720 --> 00:59:57,040
so the type of the id is

1566
00:59:54,799 --> 00:59:58,000
number so in typescript we have number

1567
00:59:57,040 --> 00:59:59,440
as

1568
00:59:58,000 --> 01:00:01,040
a type

1569
00:59:59,440 --> 01:00:03,200
and then

1570
01:00:01,040 --> 01:00:07,359
define first name

1571
01:00:03,200 --> 01:00:09,359
property and this should be string

1572
01:00:07,359 --> 01:00:11,359
last name

1573
01:00:09,359 --> 01:00:12,480
this should be string

1574
01:00:11,359 --> 01:00:14,960
and then

1575
01:00:12,480 --> 01:00:16,960
email id

1576
01:00:14,960 --> 01:00:18,960
and again this should be stream it's

1577
01:00:16,960 --> 01:00:21,040
pretty simple and

1578
01:00:18,960 --> 01:00:22,960
these properties should match

1579
01:00:21,040 --> 01:00:25,040
the jpa employee entity that we have

1580
01:00:22,960 --> 01:00:26,640
created in our springboard project

1581
01:00:25,040 --> 01:00:29,359
all right

1582
01:00:26,640 --> 01:00:31,920
great

1583
01:00:29,359 --> 01:00:34,319
now let's go ahead and let's create

1584
01:00:31,920 --> 01:00:36,480
employee list component

1585
01:00:34,319 --> 01:00:39,599
we are going to use angular cli to

1586
01:00:36,480 --> 01:00:41,599
generate employee list component

1587
01:00:39,599 --> 01:00:43,920
go to the integrated terminal

1588
01:00:41,599 --> 01:00:46,720
and make sure that you are in a

1589
01:00:43,920 --> 01:00:49,440
root folder of your project

1590
01:00:46,720 --> 01:00:50,799
and just type the command

1591
01:00:49,440 --> 01:00:53,440
ng

1592
01:00:50,799 --> 01:00:56,079
and then g for generate

1593
01:00:53,440 --> 01:00:57,599
c for component and let's type name of

1594
01:00:56,079 --> 01:00:58,640
the component

1595
01:00:57,599 --> 01:01:01,440
let's say

1596
01:00:58,640 --> 01:01:03,359
employee hyphen list

1597
01:01:01,440 --> 01:01:06,559
hit enter

1598
01:01:03,359 --> 01:01:07,599
so notice here this command created four

1599
01:01:06,559 --> 01:01:09,040
files

1600
01:01:07,599 --> 01:01:12,599
and

1601
01:01:09,040 --> 01:01:15,359
also updated one of the file that is

1602
01:01:12,599 --> 01:01:17,920
app.module.ts file

1603
01:01:15,359 --> 01:01:20,720
well if you go to the apps folder

1604
01:01:17,920 --> 01:01:22,960
expand app folder and expand

1605
01:01:20,720 --> 01:01:26,079
employee hyphen list folder so this

1606
01:01:22,960 --> 01:01:28,079
command created employee list folder and

1607
01:01:26,079 --> 01:01:30,839
within a folder it has created four

1608
01:01:28,079 --> 01:01:33,680
files and it also updated

1609
01:01:30,839 --> 01:01:34,720
app.module.ts file

1610
01:01:33,680 --> 01:01:36,160
okay

1611
01:01:34,720 --> 01:01:39,119
so

1612
01:01:36,160 --> 01:01:40,480
angular cli will take care to update

1613
01:01:39,119 --> 01:01:42,720
newly created

1614
01:01:40,480 --> 01:01:45,520
component in app model

1615
01:01:42,720 --> 01:01:47,040
so we no need to explicitly add a newly

1616
01:01:45,520 --> 01:01:50,960
created component

1617
01:01:47,040 --> 01:01:53,440
in declaration section of app model

1618
01:01:50,960 --> 01:01:55,039
okay so look at here we just created

1619
01:01:53,440 --> 01:01:57,839
employee list component right and

1620
01:01:55,039 --> 01:01:59,920
angular cli will automatically added

1621
01:01:57,839 --> 01:02:02,799
employees component to the declarations

1622
01:01:59,920 --> 01:02:04,480
array and this component belong to

1623
01:02:02,799 --> 01:02:06,880
this model

1624
01:02:04,480 --> 01:02:09,520
so as i mentioned earlier each module

1625
01:02:06,880 --> 01:02:12,640
have multiple components

1626
01:02:09,520 --> 01:02:15,359
and we can have as many as models in our

1627
01:02:12,640 --> 01:02:17,520
angular application

1628
01:02:15,359 --> 01:02:19,520
well

1629
01:02:17,520 --> 01:02:21,760
so look at here inside a employee list

1630
01:02:19,520 --> 01:02:24,319
folder we have four files

1631
01:02:21,760 --> 01:02:26,559
this is the employees component dot css

1632
01:02:24,319 --> 01:02:28,319
file this is a component private css

1633
01:02:26,559 --> 01:02:30,240
file which will applicable to employee

1634
01:02:28,319 --> 01:02:33,200
list component template

1635
01:02:30,240 --> 01:02:35,119
this is employees component template

1636
01:02:33,200 --> 01:02:37,520
it has some default text which is

1637
01:02:35,119 --> 01:02:40,079
provided by angular cli

1638
01:02:37,520 --> 01:02:42,720
and this is the employees component

1639
01:02:40,079 --> 01:02:45,119
which will basically handle the data and

1640
01:02:42,720 --> 01:02:46,480
it will process the data

1641
01:02:45,119 --> 01:02:49,200
and this is

1642
01:02:46,480 --> 01:02:52,000
the employee list component test class

1643
01:02:49,200 --> 01:02:54,720
so this is related to test cases and we

1644
01:02:52,000 --> 01:02:56,720
are not going to focus on test cases in

1645
01:02:54,720 --> 01:02:58,799
this series

1646
01:02:56,720 --> 01:03:01,760
so let's get in let's open employees

1647
01:02:58,799 --> 01:03:03,520
component.ts file so it has employees

1648
01:03:01,760 --> 01:03:06,079
component basically this is a typescript

1649
01:03:03,520 --> 01:03:07,119
class which is annotated with add

1650
01:03:06,079 --> 01:03:08,799
component

1651
01:03:07,119 --> 01:03:10,720
decorator

1652
01:03:08,799 --> 01:03:13,599
so look at here basically add component

1653
01:03:10,720 --> 01:03:15,839
decorator that marks this type

1654
01:03:13,599 --> 01:03:18,160
typescript class as angular component

1655
01:03:15,839 --> 01:03:20,160
and provides the configuration metadata

1656
01:03:18,160 --> 01:03:21,599
that determines how the component should

1657
01:03:20,160 --> 01:03:25,280
be processed

1658
01:03:21,599 --> 01:03:27,839
intensity and used at a runtime

1659
01:03:25,280 --> 01:03:30,960
all right and at the right component

1660
01:03:27,839 --> 01:03:34,079
decorator has three attributes selector

1661
01:03:30,960 --> 01:03:37,039
template url and style urls

1662
01:03:34,079 --> 01:03:38,160
so we use selector as a custom html

1663
01:03:37,039 --> 01:03:40,400
element

1664
01:03:38,160 --> 01:03:42,640
and this selector will be replaced with

1665
01:03:40,400 --> 01:03:44,480
this employee list component

1666
01:03:42,640 --> 01:03:46,880
template at a runtime

1667
01:03:44,480 --> 01:03:49,359
and this empowers component.css file

1668
01:03:46,880 --> 01:03:51,440
this is a component css private file

1669
01:03:49,359 --> 01:03:54,559
which will only applicable to

1670
01:03:51,440 --> 01:03:55,839
employees component.html file

1671
01:03:54,559 --> 01:03:58,240
now what we'll do let's go ahead and

1672
01:03:55,839 --> 01:04:00,240
let's copy this selector

1673
01:03:58,240 --> 01:04:01,839
and let's open

1674
01:04:00,240 --> 01:04:03,200
app component

1675
01:04:01,839 --> 01:04:04,640
template

1676
01:04:03,200 --> 01:04:07,280
and here

1677
01:04:04,640 --> 01:04:10,559
we're going to use a selector as

1678
01:04:07,280 --> 01:04:12,640
custom html html element like this

1679
01:04:10,559 --> 01:04:15,200
and if you save the file and

1680
01:04:12,640 --> 01:04:17,359
if you go back to the browser

1681
01:04:15,200 --> 01:04:18,240
we will be able to see our employee list

1682
01:04:17,359 --> 01:04:20,960
works

1683
01:04:18,240 --> 01:04:22,240
text printed on a web page

1684
01:04:20,960 --> 01:04:24,880
okay

1685
01:04:22,240 --> 01:04:26,960
so look at here

1686
01:04:24,880 --> 01:04:28,480
employees component template has

1687
01:04:26,960 --> 01:04:30,400
employee list works

1688
01:04:28,480 --> 01:04:32,319
paragraph so this is the paragraph

1689
01:04:30,400 --> 01:04:34,160
printed on a web page

1690
01:04:32,319 --> 01:04:37,119
now we can

1691
01:04:34,160 --> 01:04:39,200
we can you know add a html code to

1692
01:04:37,119 --> 01:04:40,559
display a list of employees

1693
01:04:39,200 --> 01:04:43,039
on our web page

1694
01:04:40,559 --> 01:04:45,280
so let's go ahead and let's

1695
01:04:43,039 --> 01:04:47,039
create a html template which will

1696
01:04:45,280 --> 01:04:48,720
display a list of employees on a web

1697
01:04:47,039 --> 01:04:51,839
page

1698
01:04:48,720 --> 01:04:52,880
let's replace this default

1699
01:04:51,839 --> 01:04:54,640
content

1700
01:04:52,880 --> 01:04:57,839
and let's go ahead and let's

1701
01:04:54,640 --> 01:04:59,760
add html code here

1702
01:04:57,839 --> 01:05:02,559
i'm going to create h2

1703
01:04:59,760 --> 01:05:05,119
html element and let's say

1704
01:05:02,559 --> 01:05:07,520
employee list so this is

1705
01:05:05,119 --> 01:05:11,200
the header upload page

1706
01:05:07,520 --> 01:05:14,400
and then i'm going to create a table

1707
01:05:11,200 --> 01:05:16,240
and let's add a bootstrap css classes

1708
01:05:14,400 --> 01:05:20,079
to the table

1709
01:05:16,240 --> 01:05:22,480
table and then table stupid

1710
01:05:20,079 --> 01:05:24,160
table header

1711
01:05:22,480 --> 01:05:26,160
inside table header let's go ahead and

1712
01:05:24,160 --> 01:05:27,359
let's create a table uh

1713
01:05:26,160 --> 01:05:28,720
a row here

1714
01:05:27,359 --> 01:05:30,400
and inside our

1715
01:05:28,720 --> 01:05:32,160
row we are going to create

1716
01:05:30,400 --> 01:05:34,640
column

1717
01:05:32,160 --> 01:05:36,720
let's say first name

1718
01:05:34,640 --> 01:05:40,880
employee first name

1719
01:05:36,720 --> 01:05:42,720
and this is employee last name

1720
01:05:40,880 --> 01:05:43,920
and similarly let's create one more

1721
01:05:42,720 --> 01:05:46,240
column

1722
01:05:43,920 --> 01:05:48,000
and this is gonna

1723
01:05:46,240 --> 01:05:51,119
employ email id

1724
01:05:48,000 --> 01:05:53,760
okay pretty simple and let's create a

1725
01:05:51,119 --> 01:05:53,760
table body

1726
01:05:54,079 --> 01:05:58,799
inside a table body let's use a table

1727
01:05:57,200 --> 01:06:01,039
for row here

1728
01:05:58,799 --> 01:06:03,440
and then

1729
01:06:01,039 --> 01:06:05,440
inside a table row

1730
01:06:03,440 --> 01:06:06,960
we're going to use

1731
01:06:05,440 --> 01:06:09,520
ng for

1732
01:06:06,960 --> 01:06:12,400
inbuilt angular directive to iterate

1733
01:06:09,520 --> 01:06:14,160
over a list of employees

1734
01:06:12,400 --> 01:06:15,599
so look at here this is the important

1735
01:06:14,160 --> 01:06:17,599
step

1736
01:06:15,599 --> 01:06:19,280
let's use star ing

1737
01:06:17,599 --> 01:06:22,079
for so this is

1738
01:06:19,280 --> 01:06:24,240
the inbuilt angular derivative which we

1739
01:06:22,079 --> 01:06:26,400
can use to iterate over a area of

1740
01:06:24,240 --> 01:06:29,760
elements or a list of elements

1741
01:06:26,400 --> 01:06:31,839
so ng4 which works similar to for loops

1742
01:06:29,760 --> 01:06:35,119
which we use in programming languages

1743
01:06:31,839 --> 01:06:37,200
like in java c c plus plus etc

1744
01:06:35,119 --> 01:06:38,559
but the difference is ng for directive

1745
01:06:37,200 --> 01:06:40,319
we use to

1746
01:06:38,559 --> 01:06:42,400
iterate over html

1747
01:06:40,319 --> 01:06:44,880
elements so in this case we are going to

1748
01:06:42,400 --> 01:06:47,280
iterate over a table row

1749
01:06:44,880 --> 01:06:49,200
if we have 10 elements in an array

1750
01:06:47,280 --> 01:06:50,720
then ng for direct you will

1751
01:06:49,200 --> 01:06:52,880
create a 10

1752
01:06:50,720 --> 01:06:55,760
uh you know html elements

1753
01:06:52,880 --> 01:06:58,839
all right that will see once we

1754
01:06:55,760 --> 01:07:01,200
create once we write this code

1755
01:06:58,839 --> 01:07:03,280
okay and here

1756
01:07:01,200 --> 01:07:04,799
within a double quote let's create a

1757
01:07:03,280 --> 01:07:07,440
variable

1758
01:07:04,799 --> 01:07:09,440
javascript variable let

1759
01:07:07,440 --> 01:07:10,640
and then employee

1760
01:07:09,440 --> 01:07:12,559
of

1761
01:07:10,640 --> 01:07:15,760
employees

1762
01:07:12,559 --> 01:07:18,319
okay so implies basically this is an

1763
01:07:15,760 --> 01:07:20,000
array which we need to define in a

1764
01:07:18,319 --> 01:07:22,559
component

1765
01:07:20,000 --> 01:07:26,240
so go to the employee list component

1766
01:07:22,559 --> 01:07:29,119
and here we are going to define

1767
01:07:26,240 --> 01:07:33,039
a property called employees and this is

1768
01:07:29,119 --> 01:07:33,039
the type of employee array

1769
01:07:37,920 --> 01:07:43,200
and make sure make sure that you import

1770
01:07:40,640 --> 01:07:45,200
employee typescript class

1771
01:07:43,200 --> 01:07:46,799
at the top

1772
01:07:45,200 --> 01:07:49,599
import

1773
01:07:46,799 --> 01:07:49,599
and then employee

1774
01:07:50,960 --> 01:07:53,960
from

1775
01:08:00,319 --> 01:08:03,920
employee

1776
01:08:01,599 --> 01:08:06,480
okay great

1777
01:08:03,920 --> 01:08:08,319
so once we define employees

1778
01:08:06,480 --> 01:08:10,000
you know property in our employee list

1779
01:08:08,319 --> 01:08:10,960
component and this property we can

1780
01:08:10,000 --> 01:08:15,680
access

1781
01:08:10,960 --> 01:08:18,799
in employee list component template

1782
01:08:15,680 --> 01:08:19,920
using ng directory like this

1783
01:08:18,799 --> 01:08:22,839
now

1784
01:08:19,920 --> 01:08:26,400
we are iterating our employees

1785
01:08:22,839 --> 01:08:28,719
array now let's go ahead and let's use

1786
01:08:26,400 --> 01:08:31,359
a td html element here

1787
01:08:28,719 --> 01:08:32,960
and then use double curly basis

1788
01:08:31,359 --> 01:08:35,279
so this is called

1789
01:08:32,960 --> 01:08:38,960
interpolation in angular so we can use

1790
01:08:35,279 --> 01:08:40,080
interpolation to access properties from

1791
01:08:38,960 --> 01:08:42,080
object

1792
01:08:40,080 --> 01:08:43,440
in our case we have

1793
01:08:42,080 --> 01:08:45,600
employee

1794
01:08:43,440 --> 01:08:47,040
and then let's go ahead and let's

1795
01:08:45,600 --> 01:08:51,359
call property

1796
01:08:47,040 --> 01:08:52,880
of the employee object like first name

1797
01:08:51,359 --> 01:08:55,920
so look at here

1798
01:08:52,880 --> 01:08:57,600
the array type so the array type we have

1799
01:08:55,920 --> 01:09:00,000
a employee right

1800
01:08:57,600 --> 01:09:02,239
so this employee class has properties id

1801
01:09:00,000 --> 01:09:04,799
first name last name and email id

1802
01:09:02,239 --> 01:09:06,960
so we are using these properties to

1803
01:09:04,799 --> 01:09:10,400
access employee first name last name

1804
01:09:06,960 --> 01:09:12,159
email id all right so here

1805
01:09:10,400 --> 01:09:13,440
so just we have called first name

1806
01:09:12,159 --> 01:09:15,600
similarly

1807
01:09:13,440 --> 01:09:16,640
let's go ahead and let's

1808
01:09:15,600 --> 01:09:20,080
use

1809
01:09:16,640 --> 01:09:23,920
a last name employee last name

1810
01:09:20,080 --> 01:09:26,319
last name property let's call

1811
01:09:23,920 --> 01:09:27,120
email id

1812
01:09:26,319 --> 01:09:28,960
okay

1813
01:09:27,120 --> 01:09:31,279
great

1814
01:09:28,960 --> 01:09:32,640
let's save the files and let's go back

1815
01:09:31,279 --> 01:09:35,279
to the browser

1816
01:09:32,640 --> 01:09:36,480
yeah here we go the html table is

1817
01:09:35,279 --> 01:09:38,480
looking good

1818
01:09:36,480 --> 01:09:40,640
and the bootstrap css classes are also

1819
01:09:38,480 --> 01:09:41,600
successfully added to the html

1820
01:09:40,640 --> 01:09:43,279
table

1821
01:09:41,600 --> 01:09:45,679
now what we will do we will add some

1822
01:09:43,279 --> 01:09:48,159
dummy data to the table and in next

1823
01:09:45,679 --> 01:09:51,199
video we will make a step a call and

1824
01:09:48,159 --> 01:09:52,880
will populate our htp response data in a

1825
01:09:51,199 --> 01:09:55,440
table

1826
01:09:52,880 --> 01:09:56,560
let's open employees component and

1827
01:09:55,440 --> 01:10:00,159
inside

1828
01:09:56,560 --> 01:10:03,440
in the init method we are going to add

1829
01:10:00,159 --> 01:10:04,960
few records to the employees array

1830
01:10:03,440 --> 01:10:07,920
so look at here this is employees array

1831
01:10:04,960 --> 01:10:10,960
and we have added two objects employee

1832
01:10:07,920 --> 01:10:13,600
objects to the employee array

1833
01:10:10,960 --> 01:10:15,199
well let's save the file and let's go

1834
01:10:13,600 --> 01:10:16,480
back to the browser

1835
01:10:15,199 --> 01:10:19,199
and look at here

1836
01:10:16,480 --> 01:10:21,199
we can able to see two employees are

1837
01:10:19,199 --> 01:10:22,560
displayed in html

1838
01:10:21,199 --> 01:10:24,800
table

1839
01:10:22,560 --> 01:10:27,199
well let's go ahead and let's add some

1840
01:10:24,800 --> 01:10:28,239
bootstrap css class like container to

1841
01:10:27,199 --> 01:10:30,800
the do

1842
01:10:28,239 --> 01:10:32,880
so that we can align this table

1843
01:10:30,800 --> 01:10:34,320
in a proper format

1844
01:10:32,880 --> 01:10:36,640
let's open

1845
01:10:34,320 --> 01:10:38,159
app component

1846
01:10:36,640 --> 01:10:39,360
template

1847
01:10:38,159 --> 01:10:41,120
and here

1848
01:10:39,360 --> 01:10:44,480
let's go ahead and let's create

1849
01:10:41,120 --> 01:10:47,679
our view

1850
01:10:44,480 --> 01:10:51,360
let's add a bootstrap css class

1851
01:10:47,679 --> 01:10:51,360
that is a container

1852
01:10:53,440 --> 01:10:56,239
and let's enclose

1853
01:10:55,120 --> 01:10:59,920
this

1854
01:10:56,239 --> 01:11:02,640
app employee list uh you know element

1855
01:10:59,920 --> 01:11:04,239
inside you and let's save the file and

1856
01:11:02,640 --> 01:11:06,800
let's see how

1857
01:11:04,239 --> 01:11:08,800
the table looks in the browser so look

1858
01:11:06,800 --> 01:11:11,199
at here now our

1859
01:11:08,800 --> 01:11:13,360
html table looks good

1860
01:11:11,199 --> 01:11:14,800
right

1861
01:11:13,360 --> 01:11:17,360
all right guys

1862
01:11:14,800 --> 01:11:20,239
in next video we will make a sdk call

1863
01:11:17,360 --> 01:11:21,280
and we'll populate a real data

1864
01:11:20,239 --> 01:11:24,280
on a

1865
01:11:21,280 --> 01:11:24,280
table

1866
01:11:27,920 --> 01:11:31,760
in previous video we have created

1867
01:11:29,760 --> 01:11:33,520
employees component which will display a

1868
01:11:31,760 --> 01:11:36,159
list of employees

1869
01:11:33,520 --> 01:11:38,239
on a web page like this and we have

1870
01:11:36,159 --> 01:11:42,080
created some dummy data and we have

1871
01:11:38,239 --> 01:11:44,719
populated a dummy data on a web page

1872
01:11:42,080 --> 01:11:47,199
in this video we are going to create a

1873
01:11:44,719 --> 01:11:50,480
angular service which will make in turn

1874
01:11:47,199 --> 01:11:52,080
a rest api call and will populate a sdp

1875
01:11:50,480 --> 01:11:53,600
response data

1876
01:11:52,080 --> 01:11:56,080
on a web page

1877
01:11:53,600 --> 01:11:57,679
all right so before implementing

1878
01:11:56,080 --> 01:12:00,080
angular service in our angular

1879
01:11:57,679 --> 01:12:04,080
application let's quickly have a

1880
01:12:00,080 --> 01:12:06,800
overview of angular service

1881
01:12:04,080 --> 01:12:08,800
we use angular service to share the data

1882
01:12:06,800 --> 01:12:10,000
among various components in angular

1883
01:12:08,800 --> 01:12:12,480
application

1884
01:12:10,000 --> 01:12:15,360
sometimes we want to write a similar

1885
01:12:12,480 --> 01:12:17,840
piece of code in various components

1886
01:12:15,360 --> 01:12:19,199
so instead of repeating same code in

1887
01:12:17,840 --> 01:12:20,480
various components in angular

1888
01:12:19,199 --> 01:12:23,440
application

1889
01:12:20,480 --> 01:12:26,000
we can keep as you know common code in

1890
01:12:23,440 --> 01:12:28,000
an angular service and we can inject

1891
01:12:26,000 --> 01:12:30,880
that angular service in required

1892
01:12:28,000 --> 01:12:31,920
components so that we can reuse the same

1893
01:12:30,880 --> 01:12:35,840
code

1894
01:12:31,920 --> 01:12:37,520
so to achieve this we can use angular

1895
01:12:35,840 --> 01:12:38,880
and angular provides a dependency

1896
01:12:37,520 --> 01:12:41,600
injection feature

1897
01:12:38,880 --> 01:12:44,880
so dependency injection feature make the

1898
01:12:41,600 --> 01:12:47,679
testing and debugging very simple

1899
01:12:44,880 --> 01:12:49,600
a component can delegate certain tasks

1900
01:12:47,679 --> 01:12:52,080
to the services such as fetching data

1901
01:12:49,600 --> 01:12:53,040
from the server validating user input or

1902
01:12:52,080 --> 01:12:55,520
logging

1903
01:12:53,040 --> 01:12:57,760
directly to the console

1904
01:12:55,520 --> 01:13:00,400
so validating user input and logging so

1905
01:12:57,760 --> 01:13:01,520
these are the common code which required

1906
01:13:00,400 --> 01:13:04,080
to

1907
01:13:01,520 --> 01:13:05,679
reuse in different components so this

1908
01:13:04,080 --> 01:13:07,360
common code we can

1909
01:13:05,679 --> 01:13:08,880
write in angular service and we can

1910
01:13:07,360 --> 01:13:10,960
inject that service in various

1911
01:13:08,880 --> 01:13:12,640
components to call

1912
01:13:10,960 --> 01:13:13,520
these services

1913
01:13:12,640 --> 01:13:15,840
and

1914
01:13:13,520 --> 01:13:17,840
inside angular service we can write a

1915
01:13:15,840 --> 01:13:19,520
rest client code which in turn make a

1916
01:13:17,840 --> 01:13:21,520
sdp call

1917
01:13:19,520 --> 01:13:23,440
and we can inject angular service in

1918
01:13:21,520 --> 01:13:25,360
angular component so that angular

1919
01:13:23,440 --> 01:13:27,440
component can delegate

1920
01:13:25,360 --> 01:13:29,600
i know this task like fetching data from

1921
01:13:27,440 --> 01:13:32,400
the server to the service

1922
01:13:29,600 --> 01:13:35,360
now service is responsible to fetch the

1923
01:13:32,400 --> 01:13:37,600
data from the server

1924
01:13:35,360 --> 01:13:38,800
well to define a class as a service in

1925
01:13:37,600 --> 01:13:41,199
angular

1926
01:13:38,800 --> 01:13:43,440
we use add injectable decorator to

1927
01:13:41,199 --> 01:13:45,280
provide the metadata that allows angular

1928
01:13:43,440 --> 01:13:46,960
to inject into a component as a

1929
01:13:45,280 --> 01:13:47,920
dependency

1930
01:13:46,960 --> 01:13:48,719
all right

1931
01:13:47,920 --> 01:13:50,800
so

1932
01:13:48,719 --> 01:13:53,360
we'll see about i will see more about

1933
01:13:50,800 --> 01:13:54,880
add injectable decorator once we create

1934
01:13:53,360 --> 01:13:56,719
angular service in our angular

1935
01:13:54,880 --> 01:13:58,640
application

1936
01:13:56,719 --> 01:14:00,000
so look at here

1937
01:13:58,640 --> 01:14:01,760
in this video we are going to create

1938
01:14:00,000 --> 01:14:04,640
angular service

1939
01:14:01,760 --> 01:14:08,000
which in turn use http client module to

1940
01:14:04,640 --> 01:14:10,239
make a restfa call and we inject

1941
01:14:08,000 --> 01:14:12,560
employee service in different components

1942
01:14:10,239 --> 01:14:15,679
and different components will call

1943
01:14:12,560 --> 01:14:17,520
a methods of employee service

1944
01:14:15,679 --> 01:14:19,760
all right guys let's go ahead and let's

1945
01:14:17,520 --> 01:14:21,600
create employee service in our angular

1946
01:14:19,760 --> 01:14:24,000
application

1947
01:14:21,600 --> 01:14:25,920
so switch to the integrated terminal

1948
01:14:24,000 --> 01:14:28,400
and make sure that you are in a root

1949
01:14:25,920 --> 01:14:32,159
folder of your application

1950
01:14:28,400 --> 01:14:34,480
and let's use angular cli to generate

1951
01:14:32,159 --> 01:14:36,239
angular service

1952
01:14:34,480 --> 01:14:38,239
just type the command

1953
01:14:36,239 --> 01:14:41,280
ng

1954
01:14:38,239 --> 01:14:43,760
and g g for generate s for service

1955
01:14:41,280 --> 01:14:46,880
followed by name of the service

1956
01:14:43,760 --> 01:14:48,480
let's give a service as employee

1957
01:14:46,880 --> 01:14:51,840
hit enter

1958
01:14:48,480 --> 01:14:54,400
so this command created two files

1959
01:14:51,840 --> 01:14:57,840
all right if you expand app folder

1960
01:14:54,400 --> 01:14:57,840
within app folder you can see

1961
01:14:59,320 --> 01:15:02,640
employee.service.tsignemploy.service.spec.ts

1962
01:15:00,400 --> 01:15:06,159
so these are the two files created by

1963
01:15:02,640 --> 01:15:07,560
this command angular cli command

1964
01:15:06,159 --> 01:15:09,760
go ahead and click on

1965
01:15:07,560 --> 01:15:11,360
employee.service.ts and look at here

1966
01:15:09,760 --> 01:15:13,040
this is the employee service so

1967
01:15:11,360 --> 01:15:15,440
basically this is the typescript class

1968
01:15:13,040 --> 01:15:16,719
which is annotated with add injectable

1969
01:15:15,440 --> 01:15:19,600
decorator

1970
01:15:16,719 --> 01:15:21,440
so this at injectable decorator marks

1971
01:15:19,600 --> 01:15:23,120
this typescript class

1972
01:15:21,440 --> 01:15:26,000
as a you know

1973
01:15:23,120 --> 01:15:27,920
as a provider and it can be injected

1974
01:15:26,000 --> 01:15:30,960
into various components

1975
01:15:27,920 --> 01:15:33,760
all right and this service is provided

1976
01:15:30,960 --> 01:15:33,760
at a root level

1977
01:15:33,920 --> 01:15:39,280
now let's go ahead and let's use

1978
01:15:36,080 --> 01:15:41,040
http client model to make rsd pay call

1979
01:15:39,280 --> 01:15:42,560
so before that make sure that your

1980
01:15:41,040 --> 01:15:44,400
spring boot application is up and

1981
01:15:42,560 --> 01:15:45,920
running and you are able to access

1982
01:15:44,400 --> 01:15:47,840
arrest endpoints

1983
01:15:45,920 --> 01:15:50,560
let's go ahead and let's

1984
01:15:47,840 --> 01:15:52,360
access one of the rest api

1985
01:15:50,560 --> 01:15:55,280
in a browser just type

1986
01:15:52,360 --> 01:15:57,840
localhost.js api slash v1 slash

1987
01:15:55,280 --> 01:16:00,239
employees so this will

1988
01:15:57,840 --> 01:16:01,760
gives you a area of employees as a

1989
01:16:00,239 --> 01:16:03,360
response

1990
01:16:01,760 --> 01:16:05,520
well our application is up and running

1991
01:16:03,360 --> 01:16:07,440
and we can able to access the you know

1992
01:16:05,520 --> 01:16:09,679
employee list rest api

1993
01:16:07,440 --> 01:16:10,960
now let's go ahead and let's use http

1994
01:16:09,679 --> 01:16:12,159
client

1995
01:16:10,960 --> 01:16:15,600
module

1996
01:16:12,159 --> 01:16:15,600
to call this rest endpoint

1997
01:16:15,840 --> 01:16:21,600
so just follow the steps so first step

1998
01:16:18,320 --> 01:16:24,640
is go to the app module

1999
01:16:21,600 --> 01:16:26,800
and app module use depends on http

2000
01:16:24,640 --> 01:16:27,760
client module in order to use http

2001
01:16:26,800 --> 01:16:29,679
client

2002
01:16:27,760 --> 01:16:31,760
here just type

2003
01:16:29,679 --> 01:16:34,480
http

2004
01:16:31,760 --> 01:16:37,600
client module

2005
01:16:34,480 --> 01:16:40,159
all right and make sure that http client

2006
01:16:37,600 --> 01:16:41,600
module is imported at the top

2007
01:16:40,159 --> 01:16:43,679
just type the

2008
01:16:41,600 --> 01:16:47,360
statement import

2009
01:16:43,679 --> 01:16:49,840
within a curly basis http client model

2010
01:16:47,360 --> 01:16:49,840
from

2011
01:16:50,239 --> 01:16:53,120
at angular

2012
01:16:54,000 --> 01:16:58,560
slash common slash

2013
01:16:56,320 --> 01:17:01,280
http

2014
01:16:58,560 --> 01:17:03,040
alright so http client module is present

2015
01:17:01,280 --> 01:17:06,480
in package

2016
01:17:03,040 --> 01:17:08,080
angular slash command slash http

2017
01:17:06,480 --> 01:17:11,280
alright so this is the first step so

2018
01:17:08,080 --> 01:17:13,120
make sure that we import http line model

2019
01:17:11,280 --> 01:17:15,520
in imports array of

2020
01:17:13,120 --> 01:17:17,360
app model

2021
01:17:15,520 --> 01:17:20,640
now second step is

2022
01:17:17,360 --> 01:17:22,640
go ahead and inject http client in

2023
01:17:20,640 --> 01:17:26,560
employee service

2024
01:17:22,640 --> 01:17:26,560
so go back to the employee service again

2025
01:17:26,880 --> 01:17:31,360
and here in constructor we are going to

2026
01:17:29,360 --> 01:17:33,199
inject http client

2027
01:17:31,360 --> 01:17:34,719
module

2028
01:17:33,199 --> 01:17:37,600
private

2029
01:17:34,719 --> 01:17:41,120
and then http client

2030
01:17:37,600 --> 01:17:41,120
and this is http client

2031
01:17:42,719 --> 01:17:47,600
and make sure that we import http client

2032
01:17:45,440 --> 01:17:49,280
from the angular package

2033
01:17:47,600 --> 01:17:53,360
and let's go ahead and let's

2034
01:17:49,280 --> 01:17:53,360
import http client at the top

2035
01:17:53,840 --> 01:17:57,600
http client

2036
01:17:56,159 --> 01:17:59,280
from

2037
01:17:57,600 --> 01:18:01,840
it should be from

2038
01:17:59,280 --> 01:18:05,600
angular package angular

2039
01:18:01,840 --> 01:18:06,560
slash command slash http

2040
01:18:05,600 --> 01:18:08,960
great

2041
01:18:06,560 --> 01:18:10,800
now we have imported http client module

2042
01:18:08,960 --> 01:18:13,840
and we have injected

2043
01:18:10,800 --> 01:18:15,280
in employee service using constructor

2044
01:18:13,840 --> 01:18:16,880
now let's go ahead and let define the

2045
01:18:15,280 --> 01:18:20,960
property here

2046
01:18:16,880 --> 01:18:22,960
private and let's say base url

2047
01:18:20,960 --> 01:18:26,560
and we are going to define a base url

2048
01:18:22,960 --> 01:18:28,640
for our rest endpoints

2049
01:18:26,560 --> 01:18:30,800
go to the browser and just copy this url

2050
01:18:28,640 --> 01:18:33,120
so this is going to be a base url of all

2051
01:18:30,800 --> 01:18:35,280
the crude rest apis

2052
01:18:33,120 --> 01:18:36,960
copy and paste here

2053
01:18:35,280 --> 01:18:39,199
and save the file

2054
01:18:36,960 --> 01:18:41,199
let's go ahead and let's create a method

2055
01:18:39,199 --> 01:18:43,679
let's say get

2056
01:18:41,199 --> 01:18:47,120
employees list

2057
01:18:43,679 --> 01:18:49,040
followed by colon and just call

2058
01:18:47,120 --> 01:18:51,199
observable

2059
01:18:49,040 --> 01:18:54,400
so make sure that observable

2060
01:18:51,199 --> 01:18:56,560
you know imported from rxjs library

2061
01:18:54,400 --> 01:18:58,800
at the top

2062
01:18:56,560 --> 01:19:02,080
and then we need to provide a type here

2063
01:18:58,800 --> 01:19:04,800
type is rep employees

2064
01:19:02,080 --> 01:19:05,840
because this rest endpoint you know api

2065
01:19:04,800 --> 01:19:08,400
returns

2066
01:19:05,840 --> 01:19:09,679
a rap employee object so for that

2067
01:19:08,400 --> 01:19:10,800
we need to

2068
01:19:09,679 --> 01:19:13,520
pass

2069
01:19:10,800 --> 01:19:15,440
employee array like this

2070
01:19:13,520 --> 01:19:16,960
now let's go ahead and let's return

2071
01:19:15,440 --> 01:19:18,560
this dot

2072
01:19:16,960 --> 01:19:20,800
http client

2073
01:19:18,560 --> 01:19:21,760
and then call get so we're going to make

2074
01:19:20,800 --> 01:19:23,440
a get

2075
01:19:21,760 --> 01:19:26,080
a request type for that we are going to

2076
01:19:23,440 --> 01:19:28,080
call get method

2077
01:19:26,080 --> 01:19:30,480
and we are going to pass a parameter to

2078
01:19:28,080 --> 01:19:32,320
the get method that is base url

2079
01:19:30,480 --> 01:19:33,520
so look at here

2080
01:19:32,320 --> 01:19:36,400
we need to

2081
01:19:33,520 --> 01:19:37,280
use a backstick here not a single quote

2082
01:19:36,400 --> 01:19:39,600
okay

2083
01:19:37,280 --> 01:19:39,600
and then

2084
01:19:41,199 --> 01:19:45,040
dollar

2085
01:19:42,800 --> 01:19:46,239
within the currently basis

2086
01:19:45,040 --> 01:19:49,480
this dot

2087
01:19:46,239 --> 01:19:49,480
base url

2088
01:19:49,920 --> 01:19:54,800
okay

2089
01:19:50,880 --> 01:19:58,239
and here uh the return type is

2090
01:19:54,800 --> 01:20:00,000
employee array right so let's just pass

2091
01:19:58,239 --> 01:20:04,640
this

2092
01:20:00,000 --> 01:20:06,400
up employee to the get method like this

2093
01:20:04,640 --> 01:20:08,639
yeah here we go

2094
01:20:06,400 --> 01:20:11,280
so this looks good right

2095
01:20:08,639 --> 01:20:12,880
so this is observable

2096
01:20:11,280 --> 01:20:16,320
and we are going to subscribe for this

2097
01:20:12,880 --> 01:20:18,639
observable object in component

2098
01:20:16,320 --> 01:20:20,320
if you look at the documentation of get

2099
01:20:18,639 --> 01:20:22,719
method

2100
01:20:20,320 --> 01:20:25,199
so get method basically you know

2101
01:20:22,719 --> 01:20:27,440
it constructs a get request that

2102
01:20:25,199 --> 01:20:28,880
interfaces the body as a json

2103
01:20:27,440 --> 01:20:30,960
object and returns

2104
01:20:28,880 --> 01:20:32,480
the response body in the given type

2105
01:20:30,960 --> 01:20:36,000
and if you look at the return type of

2106
01:20:32,480 --> 01:20:38,159
the get method it returns observable

2107
01:20:36,000 --> 01:20:38,960
of the http response

2108
01:20:38,159 --> 01:20:42,080
okay

2109
01:20:38,960 --> 01:20:44,400
it returns basically observable

2110
01:20:42,080 --> 01:20:46,400
object

2111
01:20:44,400 --> 01:20:49,440
now let's go back to the

2112
01:20:46,400 --> 01:20:51,600
component employees component

2113
01:20:49,440 --> 01:20:54,880
and let's go and let's inject employee

2114
01:20:51,600 --> 01:20:57,679
service and employ this component

2115
01:20:54,880 --> 01:20:59,040
go to the constructor and here type

2116
01:20:57,679 --> 01:21:00,719
private

2117
01:20:59,040 --> 01:21:03,600
and then

2118
01:21:00,719 --> 01:21:03,600
employ service

2119
01:21:07,520 --> 01:21:11,360
employee service

2120
01:21:09,440 --> 01:21:13,600
and make sure that we import employee

2121
01:21:11,360 --> 01:21:14,400
service at the top

2122
01:21:13,600 --> 01:21:16,400
import

2123
01:21:14,400 --> 01:21:18,880
within the curry basis

2124
01:21:16,400 --> 01:21:21,199
empire service

2125
01:21:18,880 --> 01:21:21,199
from

2126
01:21:23,120 --> 01:21:27,120
empire service

2127
01:21:24,960 --> 01:21:28,719
okay so once we inject employee service

2128
01:21:27,120 --> 01:21:31,040
in employees component

2129
01:21:28,719 --> 01:21:32,560
we can call employee service methods

2130
01:21:31,040 --> 01:21:34,880
so in previous video we have created

2131
01:21:32,560 --> 01:21:37,120
submit dummy data right here inside

2132
01:21:34,880 --> 01:21:39,840
ngoninit method so let's go ahead and

2133
01:21:37,120 --> 01:21:43,440
delete this data

2134
01:21:39,840 --> 01:21:46,400
and let's create a method here this dot

2135
01:21:43,440 --> 01:21:47,360
get employees

2136
01:21:46,400 --> 01:21:48,719
okay

2137
01:21:47,360 --> 01:21:50,960
and just

2138
01:21:48,719 --> 01:21:51,920
define this method here

2139
01:21:50,960 --> 01:21:53,360
let's say

2140
01:21:51,920 --> 01:21:56,239
private

2141
01:21:53,360 --> 01:21:58,080
get employees

2142
01:21:56,239 --> 01:21:59,520
and here we are going to call

2143
01:21:58,080 --> 01:22:01,840
employee service

2144
01:21:59,520 --> 01:22:04,320
and then get employee list method

2145
01:22:01,840 --> 01:22:06,719
so this method returns observable object

2146
01:22:04,320 --> 01:22:08,400
right so we can go ahead and we can

2147
01:22:06,719 --> 01:22:10,880
subscribe to this

2148
01:22:08,400 --> 01:22:11,840
method so basically it does asynchronous

2149
01:22:10,880 --> 01:22:14,480
call

2150
01:22:11,840 --> 01:22:16,320
and this subscribe will call once it get

2151
01:22:14,480 --> 01:22:17,440
the data

2152
01:22:16,320 --> 01:22:20,560
and

2153
01:22:17,440 --> 01:22:22,719
to the subscribe method we are going to

2154
01:22:20,560 --> 01:22:24,800
handle the resp you know response of the

2155
01:22:22,719 --> 01:22:26,080
rest api

2156
01:22:24,800 --> 01:22:28,159
and data

2157
01:22:26,080 --> 01:22:30,400
followed by

2158
01:22:28,159 --> 01:22:34,000
error syntax and here

2159
01:22:30,400 --> 01:22:36,480
we're gonna assign a response to the

2160
01:22:34,000 --> 01:22:36,480
employees

2161
01:22:37,679 --> 01:22:41,440
it's property simple right

2162
01:22:39,920 --> 01:22:42,960
so this is the response data and we

2163
01:22:41,440 --> 01:22:44,800
assign this response data to the

2164
01:22:42,960 --> 01:22:46,239
employees property so this employees

2165
01:22:44,800 --> 01:22:49,600
property is

2166
01:22:46,239 --> 01:22:50,840
our app employee objects

2167
01:22:49,600 --> 01:22:53,600
all right

2168
01:22:50,840 --> 01:22:55,679
guys let's save the file and let's go

2169
01:22:53,600 --> 01:22:56,639
back to the browser and let's see

2170
01:22:55,679 --> 01:22:58,480
whether

2171
01:22:56,639 --> 01:23:01,280
we get a successful response from the

2172
01:22:58,480 --> 01:23:03,440
server or not

2173
01:23:01,280 --> 01:23:05,040
here if you refresh you can see here

2174
01:23:03,440 --> 01:23:07,920
admin

2175
01:23:05,040 --> 01:23:10,800
youth employee is successfully populated

2176
01:23:07,920 --> 01:23:13,199
on the employee list page

2177
01:23:10,800 --> 01:23:17,040
so this is the rest api that we have

2178
01:23:13,199 --> 01:23:20,800
invoked from the angular service

2179
01:23:17,040 --> 01:23:22,159
and same response we have printed on a

2180
01:23:20,800 --> 01:23:25,280
table

2181
01:23:22,159 --> 01:23:28,320
now open mysql workbench and let's add a

2182
01:23:25,280 --> 01:23:32,239
few more records to the table so that

2183
01:23:28,320 --> 01:23:34,800
we'll see few more records in a web page

2184
01:23:32,239 --> 01:23:36,960
let's say id 30 and

2185
01:23:34,800 --> 01:23:38,480
first name ramesh

2186
01:23:36,960 --> 01:23:40,719
so this is the email id right

2187
01:23:38,480 --> 01:23:43,600
programmatic

2188
01:23:40,719 --> 01:23:44,960
gmail.com first name ramesh

2189
01:23:43,600 --> 01:23:46,639
last name

2190
01:23:44,960 --> 01:23:48,480
birthday

2191
01:23:46,639 --> 01:23:49,679
and id 31

2192
01:23:48,480 --> 01:23:52,560
email id

2193
01:23:49,679 --> 01:23:55,199
c9 gmail.com

2194
01:23:52,560 --> 01:23:57,360
first name john

2195
01:23:55,199 --> 01:23:59,520
last name cena

2196
01:23:57,360 --> 01:24:02,560
and apply

2197
01:23:59,520 --> 01:24:03,679
apply and finish

2198
01:24:02,560 --> 01:24:05,679
okay

2199
01:24:03,679 --> 01:24:08,880
let's go back to the browser

2200
01:24:05,679 --> 01:24:10,560
and let's go ahead and let's refresh

2201
01:24:08,880 --> 01:24:12,320
and here we go

2202
01:24:10,560 --> 01:24:14,000
so i mentioned john so these are the two

2203
01:24:12,320 --> 01:24:15,199
employees we have just inserted in

2204
01:24:14,000 --> 01:24:18,560
database

2205
01:24:15,199 --> 01:24:20,400
and the same employees record we have

2206
01:24:18,560 --> 01:24:23,440
successfully got from the rest api and

2207
01:24:20,400 --> 01:24:26,000
we have populated on a web page

2208
01:24:23,440 --> 01:24:28,800
all right guys we have successfully

2209
01:24:26,000 --> 01:24:31,800
created a list employee

2210
01:24:28,800 --> 01:24:31,800
feature

2211
01:24:34,880 --> 01:24:38,480
hey guys

2212
01:24:36,080 --> 01:24:40,719
we have completed end-to-end list

2213
01:24:38,480 --> 01:24:43,040
employee functionality

2214
01:24:40,719 --> 01:24:45,199
in this video we are going to configure

2215
01:24:43,040 --> 01:24:46,960
routing and navigation in our angular

2216
01:24:45,199 --> 01:24:48,960
application

2217
01:24:46,960 --> 01:24:50,480
well going forward we will be creating a

2218
01:24:48,960 --> 01:24:51,840
lot of components in our angular

2219
01:24:50,480 --> 01:24:54,560
application

2220
01:24:51,840 --> 01:24:56,239
and hence in this video let's go ahead

2221
01:24:54,560 --> 01:24:59,360
and let's configure routing and

2222
01:24:56,239 --> 01:25:00,560
navigation in our angular application

2223
01:24:59,360 --> 01:25:02,960
all right

2224
01:25:00,560 --> 01:25:04,880
so configuring and you know routing and

2225
01:25:02,960 --> 01:25:06,719
navigation is pretty simple in angular

2226
01:25:04,880 --> 01:25:08,400
project you just

2227
01:25:06,719 --> 01:25:10,719
follow the steps i am going to implement

2228
01:25:08,400 --> 01:25:11,840
in this video

2229
01:25:10,719 --> 01:25:14,000
well

2230
01:25:11,840 --> 01:25:17,199
when we create angular application using

2231
01:25:14,000 --> 01:25:19,520
angular cli command like ng new followed

2232
01:25:17,199 --> 01:25:21,520
by name of the project so this command

2233
01:25:19,520 --> 01:25:24,000
will ask a question for us like would

2234
01:25:21,520 --> 01:25:26,880
you like to add angular routing

2235
01:25:24,000 --> 01:25:29,280
so if we have a requirement uh you know

2236
01:25:26,880 --> 01:25:31,280
to configure routing in our angular app

2237
01:25:29,280 --> 01:25:33,760
then we say s

2238
01:25:31,280 --> 01:25:36,000
otherwise we say no all right

2239
01:25:33,760 --> 01:25:38,639
let's say we want to configure routing

2240
01:25:36,000 --> 01:25:39,760
in our angular application and we say

2241
01:25:38,639 --> 01:25:42,480
yes

2242
01:25:39,760 --> 01:25:44,960
then angular cli will automatically

2243
01:25:42,480 --> 01:25:48,239
configure routing for us

2244
01:25:44,960 --> 01:25:50,480
and we need to only configure routes

2245
01:25:48,239 --> 01:25:51,760
that are required to navigate to

2246
01:25:50,480 --> 01:25:54,960
specific

2247
01:25:51,760 --> 01:25:58,480
url path to specific component

2248
01:25:54,960 --> 01:26:00,239
so that we will see a bit later

2249
01:25:58,480 --> 01:26:01,679
if you don't

2250
01:26:00,239 --> 01:26:04,159
specify

2251
01:26:01,679 --> 01:26:06,880
an angular routing option here

2252
01:26:04,159 --> 01:26:09,600
if you say no for this question then you

2253
01:26:06,880 --> 01:26:10,639
need to manually configure routing step

2254
01:26:09,600 --> 01:26:12,800
by step

2255
01:26:10,639 --> 01:26:14,400
and let's go and let's understand what

2256
01:26:12,800 --> 01:26:18,719
are the required steps required to

2257
01:26:14,400 --> 01:26:18,719
configure routing in angular application

2258
01:26:19,040 --> 01:26:24,400
first step is open index.html and here

2259
01:26:23,360 --> 01:26:25,760
inside

2260
01:26:24,400 --> 01:26:28,800
header

2261
01:26:25,760 --> 01:26:32,719
tab you can find a base tag

2262
01:26:28,800 --> 01:26:35,120
base href equals to slash

2263
01:26:32,719 --> 01:26:37,520
so this base tag is required

2264
01:26:35,120 --> 01:26:41,280
so that the application knows how to

2265
01:26:37,520 --> 01:26:44,400
construct the urls while navigation

2266
01:26:41,280 --> 01:26:46,000
so this is the first step

2267
01:26:44,400 --> 01:26:50,239
and second step is

2268
01:26:46,000 --> 01:26:52,800
you need to create approaching.module.ts

2269
01:26:50,239 --> 01:26:55,520
so we have already you know configured

2270
01:26:52,800 --> 01:26:56,960
routing using angular cli so angular cli

2271
01:26:55,520 --> 01:26:58,639
already created

2272
01:26:56,960 --> 01:27:00,480
all the necessary steps that are

2273
01:26:58,639 --> 01:27:01,600
required to configure routing in angular

2274
01:27:00,480 --> 01:27:02,400
application

2275
01:27:01,600 --> 01:27:04,400
but

2276
01:27:02,400 --> 01:27:06,960
if you don't configure

2277
01:27:04,400 --> 01:27:09,520
routing while application creation using

2278
01:27:06,960 --> 01:27:11,199
angular cli command like engineer then

2279
01:27:09,520 --> 01:27:14,080
you need to manually configure routing

2280
01:27:11,199 --> 01:27:15,840
like this so first step is you need to

2281
01:27:14,080 --> 01:27:18,320
you know provide base tag

2282
01:27:15,840 --> 01:27:21,000
in index.html like this and second

2283
01:27:18,320 --> 01:27:23,440
second step is you need to create

2284
01:27:21,000 --> 01:27:25,040
approaching.module.ts file like this

2285
01:27:23,440 --> 01:27:27,520
and we

2286
01:27:25,040 --> 01:27:30,480
create a app routing model

2287
01:27:27,520 --> 01:27:33,920
and it is annotated with add ng module

2288
01:27:30,480 --> 01:27:36,480
decorator and here we specify a router

2289
01:27:33,920 --> 01:27:38,960
model from

2290
01:27:36,480 --> 01:27:41,440
angular slash router package

2291
01:27:38,960 --> 01:27:45,280
and router model has a method

2292
01:27:41,440 --> 01:27:47,520
for routes and forward method takes

2293
01:27:45,280 --> 01:27:50,000
routes as an array

2294
01:27:47,520 --> 01:27:53,280
and so look at here we have defined a

2295
01:27:50,000 --> 01:27:57,120
constant routes array and inside array

2296
01:27:53,280 --> 01:27:59,520
we configure routes and each route we

2297
01:27:57,120 --> 01:28:02,400
configure as an object

2298
01:27:59,520 --> 01:28:05,440
all right and this route is type of

2299
01:28:02,400 --> 01:28:06,639
routes a model which is from

2300
01:28:05,440 --> 01:28:09,440
angular

2301
01:28:06,639 --> 01:28:12,159
router package

2302
01:28:09,440 --> 01:28:14,560
all right so this is the second step

2303
01:28:12,159 --> 01:28:16,639
and the third step is

2304
01:28:14,560 --> 01:28:20,320
go to the app

2305
01:28:16,639 --> 01:28:22,080
module.ts file and here you can see app

2306
01:28:20,320 --> 01:28:24,239
routing model

2307
01:28:22,080 --> 01:28:26,000
so you need to import

2308
01:28:24,239 --> 01:28:28,719
app routing module and you need to

2309
01:28:26,000 --> 01:28:30,960
provide app routing model

2310
01:28:28,719 --> 01:28:33,600
inside imports array

2311
01:28:30,960 --> 01:28:35,600
so that our application needs to know we

2312
01:28:33,600 --> 01:28:37,440
have configured routing in our angular

2313
01:28:35,600 --> 01:28:40,400
application

2314
01:28:37,440 --> 01:28:43,120
all right so this is the third step

2315
01:28:40,400 --> 01:28:46,400
and fourth step is we need to configure

2316
01:28:43,120 --> 01:28:49,440
routing in our app routing model

2317
01:28:46,400 --> 01:28:51,840
so here inside routes array we need to

2318
01:28:49,440 --> 01:28:54,239
define our routes

2319
01:28:51,840 --> 01:28:54,239
all right

2320
01:28:54,880 --> 01:29:00,719
inside routes array

2321
01:28:57,199 --> 01:29:00,719
let's create a javascript object

2322
01:29:00,800 --> 01:29:03,440
and

2323
01:29:01,760 --> 01:29:05,920
so

2324
01:29:03,440 --> 01:29:07,440
a router definition is a javascript

2325
01:29:05,920 --> 01:29:10,639
object

2326
01:29:07,440 --> 01:29:13,440
here i will define a path

2327
01:29:10,639 --> 01:29:16,000
so path in our case is

2328
01:29:13,440 --> 01:29:16,000
employees

2329
01:29:16,400 --> 01:29:20,400
and then

2330
01:29:17,840 --> 01:29:20,400
component

2331
01:29:20,719 --> 01:29:26,000
component is

2332
01:29:23,440 --> 01:29:27,040
employees component

2333
01:29:26,000 --> 01:29:29,360
all right

2334
01:29:27,040 --> 01:29:30,800
so look at here

2335
01:29:29,360 --> 01:29:33,920
this route

2336
01:29:30,800 --> 01:29:36,320
is a definition of javascript object

2337
01:29:33,920 --> 01:29:38,880
okay and each route

2338
01:29:36,320 --> 01:29:40,800
typically has two properties

2339
01:29:38,880 --> 01:29:42,639
first property is path

2340
01:29:40,800 --> 01:29:45,679
so it's a string

2341
01:29:42,639 --> 01:29:46,800
and it specifies the url path for the

2342
01:29:45,679 --> 01:29:49,520
route

2343
01:29:46,800 --> 01:29:52,000
and second property is component

2344
01:29:49,520 --> 01:29:54,159
it specifies what component your

2345
01:29:52,000 --> 01:29:55,760
application needs to display for this

2346
01:29:54,159 --> 01:29:58,080
particular path

2347
01:29:55,760 --> 01:29:59,600
it's pretty simple right

2348
01:29:58,080 --> 01:30:00,960
now let's go ahead and let's configure

2349
01:29:59,600 --> 01:30:01,920
one more route

2350
01:30:00,960 --> 01:30:05,360
so

2351
01:30:01,920 --> 01:30:09,520
we need to compute the route to redirect

2352
01:30:05,360 --> 01:30:11,360
url from empty part to slash employees

2353
01:30:09,520 --> 01:30:15,120
so let's go ahead and let's configure

2354
01:30:11,360 --> 01:30:17,360
route to redirect from empty

2355
01:30:15,120 --> 01:30:18,480
empty path to

2356
01:30:17,360 --> 01:30:19,520
employees

2357
01:30:18,480 --> 01:30:22,320
okay

2358
01:30:19,520 --> 01:30:24,320
let me show you how to do it

2359
01:30:22,320 --> 01:30:25,520
let's create a javascript object inside

2360
01:30:24,320 --> 01:30:27,120
an array

2361
01:30:25,520 --> 01:30:30,000
and this is path

2362
01:30:27,120 --> 01:30:32,480
and path is empty

2363
01:30:30,000 --> 01:30:35,840
and then we have redirect

2364
01:30:32,480 --> 01:30:35,840
to property

2365
01:30:39,440 --> 01:30:43,440
this should be

2366
01:30:40,960 --> 01:30:43,440
employed

2367
01:30:45,520 --> 01:30:51,360
and then we need to define

2368
01:30:49,120 --> 01:30:54,320
a path

2369
01:30:51,360 --> 01:30:56,239
match so this should be

2370
01:30:54,320 --> 01:30:57,360
a full

2371
01:30:56,239 --> 01:31:00,560
all right

2372
01:30:57,360 --> 01:31:03,360
so when we enter a empty path in browser

2373
01:31:00,560 --> 01:31:04,800
like localhost 4200 it should redirect

2374
01:31:03,360 --> 01:31:06,800
to employees

2375
01:31:04,800 --> 01:31:08,320
a path and employees

2376
01:31:06,800 --> 01:31:10,719
path

2377
01:31:08,320 --> 01:31:13,440
has a component like employee list

2378
01:31:10,719 --> 01:31:14,800
component and this is the path match

2379
01:31:13,440 --> 01:31:17,679
strategy

2380
01:31:14,800 --> 01:31:20,800
so it is recommended to use path match

2381
01:31:17,679 --> 01:31:22,400
full strategy when we configure

2382
01:31:20,800 --> 01:31:24,480
a empty path

2383
01:31:22,400 --> 01:31:26,239
all right so this is a pretty simple

2384
01:31:24,480 --> 01:31:28,960
routes we have defined

2385
01:31:26,239 --> 01:31:30,719
in routes array and these routes are a

2386
01:31:28,960 --> 01:31:34,000
we pass to

2387
01:31:30,719 --> 01:31:35,760
for root method of router module

2388
01:31:34,000 --> 01:31:37,600
and this router module

2389
01:31:35,760 --> 01:31:39,760
we we get from

2390
01:31:37,600 --> 01:31:41,440
angular slash router package

2391
01:31:39,760 --> 01:31:42,560
it's pretty simple right you understood

2392
01:31:41,440 --> 01:31:45,199
the flow right

2393
01:31:42,560 --> 01:31:46,400
so first we configure base

2394
01:31:45,199 --> 01:31:49,760
tag

2395
01:31:46,400 --> 01:31:50,800
with href equals to slash in index.html

2396
01:31:49,760 --> 01:31:53,679
and then

2397
01:31:50,800 --> 01:31:56,800
we create app routing model and inside

2398
01:31:53,679 --> 01:31:59,280
app routing model we provide we import

2399
01:31:56,800 --> 01:32:00,320
router module from angular slash router

2400
01:31:59,280 --> 01:32:01,280
package

2401
01:32:00,320 --> 01:32:04,080
and this

2402
01:32:01,280 --> 01:32:06,320
model has forward method and we pass

2403
01:32:04,080 --> 01:32:08,159
routes to this forward method

2404
01:32:06,320 --> 01:32:11,440
and then we

2405
01:32:08,159 --> 01:32:14,480
we import app routing model inside our

2406
01:32:11,440 --> 01:32:16,960
root model that is app model

2407
01:32:14,480 --> 01:32:20,239
here so this is third step

2408
01:32:16,960 --> 01:32:22,239
and we configure routes in our routes

2409
01:32:20,239 --> 01:32:24,560
array in

2410
01:32:22,239 --> 01:32:27,440
app routing model

2411
01:32:24,560 --> 01:32:30,239
so this is the post step

2412
01:32:27,440 --> 01:32:31,760
and fifth step is we need to configure a

2413
01:32:30,239 --> 01:32:33,199
router outlet

2414
01:32:31,760 --> 01:32:35,600
directive

2415
01:32:33,199 --> 01:32:38,880
so go to the app component dot

2416
01:32:35,600 --> 01:32:41,199
html template and here we have provided

2417
01:32:38,880 --> 01:32:46,320
app employee list selector as a custom

2418
01:32:41,199 --> 01:32:46,320
html element so let's replace this with

2419
01:32:46,560 --> 01:32:52,600
the directory called

2420
01:32:49,600 --> 01:32:52,600
router

2421
01:32:55,520 --> 01:32:59,040
router outlet

2422
01:32:57,600 --> 01:33:02,000
so router

2423
01:32:59,040 --> 01:33:04,960
outlet is angular provided directly

2424
01:33:02,000 --> 01:33:06,960
okay so we need to use this directive in

2425
01:33:04,960 --> 01:33:09,040
order to update our templates to

2426
01:33:06,960 --> 01:33:10,000
dynamically load a component based on

2427
01:33:09,040 --> 01:33:12,080
the

2428
01:33:10,000 --> 01:33:14,000
url path

2429
01:33:12,080 --> 01:33:16,239
let's save all the files let's go back

2430
01:33:14,000 --> 01:33:19,199
to the browser and let's verify how our

2431
01:33:16,239 --> 01:33:19,199
routing works

2432
01:33:20,320 --> 01:33:24,000
so if you type the url local host port

2433
01:33:22,639 --> 01:33:25,679
to double zero

2434
01:33:24,000 --> 01:33:29,600
it should redirect

2435
01:33:25,679 --> 01:33:31,920
to the employees path so look at here

2436
01:33:29,600 --> 01:33:33,679
when i enter localhost port double zero

2437
01:33:31,920 --> 01:33:37,159
it is redirecting to

2438
01:33:33,679 --> 01:33:37,159
slash employees

2439
01:33:37,440 --> 01:33:41,679
so this is what we have we have provided

2440
01:33:40,320 --> 01:33:44,000
route here

2441
01:33:41,679 --> 01:33:45,679
so when we type

2442
01:33:44,000 --> 01:33:47,360
empty path then it should redirect to

2443
01:33:45,679 --> 01:33:49,040
the employees and the corresponding

2444
01:33:47,360 --> 01:33:50,560
component that is employed component

2445
01:33:49,040 --> 01:33:51,520
will get rendered

2446
01:33:50,560 --> 01:33:55,600
okay

2447
01:33:51,520 --> 01:33:58,800
great and when we use the url path

2448
01:33:55,600 --> 01:34:01,920
localhost 4200 slash implies this should

2449
01:33:58,800 --> 01:34:03,360
render the employee list component

2450
01:34:01,920 --> 01:34:05,040
all right guys we have successfully

2451
01:34:03,360 --> 01:34:06,560
configured routing in our angular

2452
01:34:05,040 --> 01:34:08,400
application

2453
01:34:06,560 --> 01:34:11,920
now let's go ahead and let's

2454
01:34:08,400 --> 01:34:13,760
see how the navigation we can configure

2455
01:34:11,920 --> 01:34:15,040
currently our application supports two

2456
01:34:13,760 --> 01:34:18,320
routes right

2457
01:34:15,040 --> 01:34:21,360
however only way to use these routes is

2458
01:34:18,320 --> 01:34:24,320
for the users to manually type the url

2459
01:34:21,360 --> 01:34:27,120
path in the browser's address bar

2460
01:34:24,320 --> 01:34:29,760
but sometimes we want to click on some

2461
01:34:27,120 --> 01:34:31,280
link or button then we should

2462
01:34:29,760 --> 01:34:33,760
you know navigate to the corresponding

2463
01:34:31,280 --> 01:34:35,520
component this is called the navigation

2464
01:34:33,760 --> 01:34:37,120
and let's see how to configure

2465
01:34:35,520 --> 01:34:40,000
navigation

2466
01:34:37,120 --> 01:34:42,239
in our angular application

2467
01:34:40,000 --> 01:34:43,360
so open app component

2468
01:34:42,239 --> 01:34:45,520
template

2469
01:34:43,360 --> 01:34:47,600
and now what we'll do will

2470
01:34:45,520 --> 01:34:49,600
implement header and putter for our

2471
01:34:47,600 --> 01:34:51,600
application and also will provide a

2472
01:34:49,600 --> 01:34:53,280
navigation links

2473
01:34:51,600 --> 01:34:55,679
in header section

2474
01:34:53,280 --> 01:34:57,920
okay for that let's go ahead and let's

2475
01:34:55,679 --> 01:35:01,440
first

2476
01:34:57,920 --> 01:35:03,119
write the code for the header

2477
01:35:01,440 --> 01:35:06,880
this is the

2478
01:35:03,119 --> 01:35:10,400
navigation tag and here we're going to

2479
01:35:06,880 --> 01:35:11,199
add some booster css classes

2480
01:35:10,400 --> 01:35:14,560
okay

2481
01:35:11,199 --> 01:35:18,639
and inside this navigation bar

2482
01:35:14,560 --> 01:35:18,639
will configure the urls

2483
01:35:19,920 --> 01:35:24,880
and provide a bootstrap css class like

2484
01:35:22,639 --> 01:35:26,800
this

2485
01:35:24,880 --> 01:35:30,239
so this is the unorder list

2486
01:35:26,800 --> 01:35:32,639
so let's also define a list here

2487
01:35:30,239 --> 01:35:35,440
and let's go ahead and let's provide a

2488
01:35:32,639 --> 01:35:37,679
bootstrap css class that is navigate now

2489
01:35:35,440 --> 01:35:39,040
hyphen item

2490
01:35:37,679 --> 01:35:42,000
and let's go and let's configure

2491
01:35:39,040 --> 01:35:44,080
hyperlink here

2492
01:35:42,000 --> 01:35:46,320
and bootstrap css class

2493
01:35:44,080 --> 01:35:46,320
like

2494
01:35:49,119 --> 01:35:51,679
now link

2495
01:35:51,840 --> 01:35:54,840
and then

2496
01:35:53,440 --> 01:35:57,920
let's

2497
01:35:54,840 --> 01:36:00,159
say employee list

2498
01:35:57,920 --> 01:36:02,080
so once we click on this hyperlink that

2499
01:36:00,159 --> 01:36:04,719
is employee list we should be able to

2500
01:36:02,080 --> 01:36:06,560
navigate to the employee list

2501
01:36:04,719 --> 01:36:09,600
page

2502
01:36:06,560 --> 01:36:10,560
now let's use a angular directive that

2503
01:36:09,600 --> 01:36:12,239
is

2504
01:36:10,560 --> 01:36:15,280
router link

2505
01:36:12,239 --> 01:36:17,600
to provide a navigation path url path

2506
01:36:15,280 --> 01:36:21,360
here for example

2507
01:36:17,600 --> 01:36:23,920
a router link so router link is a

2508
01:36:21,360 --> 01:36:24,960
angular provided directive and here we

2509
01:36:23,920 --> 01:36:27,600
provide

2510
01:36:24,960 --> 01:36:29,440
a url path so this is the employees so

2511
01:36:27,600 --> 01:36:33,440
that we have configured

2512
01:36:29,440 --> 01:36:33,440
in app routing model here

2513
01:36:33,760 --> 01:36:39,199
all right so this is the angular

2514
01:36:35,920 --> 01:36:42,719
directive that will basically

2515
01:36:39,199 --> 01:36:44,800
connects the routes to a specified

2516
01:36:42,719 --> 01:36:47,119
template files

2517
01:36:44,800 --> 01:36:47,119
okay

2518
01:36:47,440 --> 01:36:54,080
now we want to identify the active route

2519
01:36:51,119 --> 01:36:57,760
right so for that we can use angular

2520
01:36:54,080 --> 01:36:59,920
directive called router link active so

2521
01:36:57,760 --> 01:37:03,600
we can use this directive

2522
01:36:59,920 --> 01:37:05,119
to identify the active route

2523
01:37:03,600 --> 01:37:07,520
and this active

2524
01:37:05,119 --> 01:37:09,679
is basically provided by

2525
01:37:07,520 --> 01:37:11,520
bootstrap so we can use active class

2526
01:37:09,679 --> 01:37:14,080
here

2527
01:37:11,520 --> 01:37:16,960
so this is a simple header

2528
01:37:14,080 --> 01:37:19,679
and here i have just added a single link

2529
01:37:16,960 --> 01:37:23,360
so going forward we'll add few more

2530
01:37:19,679 --> 01:37:25,840
links to our header section now let's go

2531
01:37:23,360 --> 01:37:29,360
ahead and let's add a folder footer

2532
01:37:25,840 --> 01:37:32,400
section to our angular application

2533
01:37:29,360 --> 01:37:35,440
let's write a code here just use footer

2534
01:37:32,400 --> 01:37:38,320
html element

2535
01:37:35,440 --> 01:37:40,239
and the css class

2536
01:37:38,320 --> 01:37:43,199
let's say porter so this is the custom

2537
01:37:40,239 --> 01:37:45,600
css class that will

2538
01:37:43,199 --> 01:37:47,040
you know add a style to this css class

2539
01:37:45,600 --> 01:37:49,440
bit later

2540
01:37:47,040 --> 01:37:51,920
and inside putter we're going to add a

2541
01:37:49,440 --> 01:37:51,920
new here

2542
01:37:52,480 --> 01:37:57,840
and let's add a bootstrap css class that

2543
01:37:54,800 --> 01:37:59,360
is container

2544
01:37:57,840 --> 01:38:01,040
and inside of you

2545
01:37:59,360 --> 01:38:02,800
let's specify

2546
01:38:01,040 --> 01:38:06,800
spam

2547
01:38:02,800 --> 01:38:06,800
and inside spam let's write the text

2548
01:38:07,119 --> 01:38:11,760
like all writes result 2020 at java

2549
01:38:10,639 --> 01:38:16,119
guides

2550
01:38:11,760 --> 01:38:16,119
it's a pretty simple footer

2551
01:38:19,199 --> 01:38:24,000
let's open

2552
01:38:20,440 --> 01:38:26,800
styles.css file and inside this file

2553
01:38:24,000 --> 01:38:28,800
let's create a porter css class

2554
01:38:26,800 --> 01:38:31,119
with some

2555
01:38:28,800 --> 01:38:32,400
you know css properties like position

2556
01:38:31,119 --> 01:38:34,880
absolute

2557
01:38:32,400 --> 01:38:36,639
width hundred percent height 70 pixel

2558
01:38:34,880 --> 01:38:39,440
background color blue

2559
01:38:36,639 --> 01:38:41,679
text align center color white

2560
01:38:39,440 --> 01:38:43,760
okay let's save all the files and let's

2561
01:38:41,679 --> 01:38:45,119
go back to the browser and let's see how

2562
01:38:43,760 --> 01:38:47,280
it looks

2563
01:38:45,119 --> 01:38:49,199
yeah here we go

2564
01:38:47,280 --> 01:38:50,639
so look at here our angular application

2565
01:38:49,199 --> 01:38:52,400
looks good now

2566
01:38:50,639 --> 01:38:54,960
so let me recap what we have done in

2567
01:38:52,400 --> 01:38:56,960
this video we have configured routing

2568
01:38:54,960 --> 01:38:59,520
for our angular application

2569
01:38:56,960 --> 01:39:02,480
for example if we enter a url localhost

2570
01:38:59,520 --> 01:39:04,480
4200 it should redirect to slash

2571
01:39:02,480 --> 01:39:06,080
employees url

2572
01:39:04,480 --> 01:39:08,719
and we have

2573
01:39:06,080 --> 01:39:10,480
added header with some navigation links

2574
01:39:08,719 --> 01:39:13,800
and we have also added footer to our

2575
01:39:10,480 --> 01:39:13,800
angular application

2576
01:39:16,880 --> 01:39:20,480
let's create

2577
01:39:18,080 --> 01:39:23,040
add employee rest api open employee

2578
01:39:20,480 --> 01:39:27,440
controller

2579
01:39:23,040 --> 01:39:29,679
and here just let me write the comment

2580
01:39:27,440 --> 01:39:32,320
create employee

2581
01:39:29,679 --> 01:39:35,280
rest api

2582
01:39:32,320 --> 01:39:37,199
all right just create a method first

2583
01:39:35,280 --> 01:39:38,880
public

2584
01:39:37,199 --> 01:39:40,880
and employ

2585
01:39:38,880 --> 01:39:43,520
so this rest api returns a employer

2586
01:39:40,880 --> 01:39:45,360
object as a json so let's keep empower

2587
01:39:43,520 --> 01:39:47,520
as a return type

2588
01:39:45,360 --> 01:39:48,880
and the name of the method is

2589
01:39:47,520 --> 01:39:51,360
create employee

2590
01:39:48,880 --> 01:39:55,320
and just pass employee

2591
01:39:51,360 --> 01:39:55,320
object as a method argument

2592
01:39:55,840 --> 01:39:58,480
okay

2593
01:39:57,280 --> 01:40:01,280
and this

2594
01:39:58,480 --> 01:40:01,280
method returns

2595
01:40:05,360 --> 01:40:10,159
employee object right so let's call

2596
01:40:08,239 --> 01:40:11,760
employee repository dot save method so

2597
01:40:10,159 --> 01:40:13,600
save method return

2598
01:40:11,760 --> 01:40:15,840
i employ object

2599
01:40:13,600 --> 01:40:17,679
so let's pass employee

2600
01:40:15,840 --> 01:40:19,679
object as a method argument to the same

2601
01:40:17,679 --> 01:40:22,239
method

2602
01:40:19,679 --> 01:40:23,119
now we have created a method okay let's

2603
01:40:22,239 --> 01:40:25,520
use

2604
01:40:23,119 --> 01:40:27,040
annotations to make this method as a

2605
01:40:25,520 --> 01:40:28,800
rest endpoint

2606
01:40:27,040 --> 01:40:30,960
let's use at the read

2607
01:40:28,800 --> 01:40:32,239
post mapping annotation so this method

2608
01:40:30,960 --> 01:40:34,480
will handle

2609
01:40:32,239 --> 01:40:36,880
http post request hence we are going to

2610
01:40:34,480 --> 01:40:40,880
use at the red post mapping annotation

2611
01:40:36,880 --> 01:40:42,719
and let's configure url over here slash

2612
01:40:40,880 --> 01:40:43,679
employees

2613
01:40:42,719 --> 01:40:46,239
and

2614
01:40:43,679 --> 01:40:48,000
post the request contains a json

2615
01:40:46,239 --> 01:40:50,159
request body right

2616
01:40:48,000 --> 01:40:52,320
and json request party we are going to

2617
01:40:50,159 --> 01:40:54,560
directly map to the employee object so

2618
01:40:52,320 --> 01:40:56,560
let's use that

2619
01:40:54,560 --> 01:40:59,040
for that let's use address

2620
01:40:56,560 --> 01:41:01,440
request body annotation

2621
01:40:59,040 --> 01:41:03,119
that's it guys very simple

2622
01:41:01,440 --> 01:41:06,800
rest api

2623
01:41:03,119 --> 01:41:06,800
now what we'll do we'll start the

2624
01:41:08,000 --> 01:41:13,280
tomcat server that is we will just run

2625
01:41:10,719 --> 01:41:16,239
our springbook project and we will test

2626
01:41:13,280 --> 01:41:18,320
create employee rest api using postman

2627
01:41:16,239 --> 01:41:19,679
dress client

2628
01:41:18,320 --> 01:41:21,119
now look at here our springboard

2629
01:41:19,679 --> 01:41:22,960
application is up and running our

2630
01:41:21,119 --> 01:41:25,280
embedded tomcat server on port zero

2631
01:41:22,960 --> 01:41:27,679
edurate zero now let's go back to the

2632
01:41:25,280 --> 01:41:29,440
post managed client

2633
01:41:27,679 --> 01:41:32,080
and let us

2634
01:41:29,440 --> 01:41:33,679
test the api

2635
01:41:32,080 --> 01:41:36,480
so look at here

2636
01:41:33,679 --> 01:41:39,040
the http method is post

2637
01:41:36,480 --> 01:41:41,360
and this is the rest endpoint url

2638
01:41:39,040 --> 01:41:44,159
localhost eight zero zero slash api

2639
01:41:41,360 --> 01:41:47,119
slash v1 slash employees

2640
01:41:44,159 --> 01:41:48,960
and in a header just type content type

2641
01:41:47,119 --> 01:41:51,199
as application slash json and in the

2642
01:41:48,960 --> 01:41:52,639
body select raw and

2643
01:41:51,199 --> 01:41:53,920
give a json

2644
01:41:52,639 --> 01:41:56,800
request

2645
01:41:53,920 --> 01:41:59,280
uh you know a body like this

2646
01:41:56,800 --> 01:42:02,480
first name thumb last name cruise email

2647
01:41:59,280 --> 01:42:05,360
id thomadder gmail.gmail.com

2648
01:42:02,480 --> 01:42:07,040
hit send button

2649
01:42:05,360 --> 01:42:11,040
so look at here

2650
01:42:07,040 --> 01:42:13,440
we got a successful response with http

2651
01:42:11,040 --> 01:42:15,280
status 200

2652
01:42:13,440 --> 01:42:17,119
okay

2653
01:42:15,280 --> 01:42:19,520
all right guys we have successfully

2654
01:42:17,119 --> 01:42:22,000
stored a recording to a database let's

2655
01:42:19,520 --> 01:42:24,960
go ahead and let's verify

2656
01:42:22,000 --> 01:42:29,119
open mysql workbench and just

2657
01:42:24,960 --> 01:42:31,280
execute select query on employees table

2658
01:42:29,119 --> 01:42:35,280
so look at here a new record is

2659
01:42:31,280 --> 01:42:36,480
successfully inserted into a database

2660
01:42:35,280 --> 01:42:38,560
all right

2661
01:42:36,480 --> 01:42:40,320
now what we'll do we'll add one more

2662
01:42:38,560 --> 01:42:43,280
record

2663
01:42:40,320 --> 01:42:44,400
let's give post name as

2664
01:42:43,280 --> 01:42:46,800
amir

2665
01:42:44,400 --> 01:42:47,760
and last name as

2666
01:42:46,800 --> 01:42:49,199
khan

2667
01:42:47,760 --> 01:42:50,639
and

2668
01:42:49,199 --> 01:42:54,239
email as

2669
01:42:50,639 --> 01:42:57,520
amir gmail.com and hit send button

2670
01:42:54,239 --> 01:42:59,760
so look at here we got a response

2671
01:42:57,520 --> 01:43:01,679
and let's verify a record in a database

2672
01:42:59,760 --> 01:43:03,520
table

2673
01:43:01,679 --> 01:43:05,040
here we go so look at here record is

2674
01:43:03,520 --> 01:43:07,360
added to the database

2675
01:43:05,040 --> 01:43:09,119
it's pretty simple

2676
01:43:07,360 --> 01:43:11,520
all right

2677
01:43:09,119 --> 01:43:14,639
great we have successfully created add

2678
01:43:11,520 --> 01:43:14,639
employee rest ap

2679
01:43:17,440 --> 01:43:21,360
so we are going to create create

2680
01:43:19,280 --> 01:43:23,600
employee component

2681
01:43:21,360 --> 01:43:25,199
and we are going to create create

2682
01:43:23,600 --> 01:43:26,880
employee form

2683
01:43:25,199 --> 01:43:29,440
through which

2684
01:43:26,880 --> 01:43:31,040
we can add a employee

2685
01:43:29,440 --> 01:43:32,320
all right before that

2686
01:43:31,040 --> 01:43:34,639
let's quickly

2687
01:43:32,320 --> 01:43:35,920
uh you know look into the two-way

2688
01:43:34,639 --> 01:43:39,440
binding

2689
01:43:35,920 --> 01:43:42,080
all right consider we have a form with

2690
01:43:39,440 --> 01:43:45,040
first name last name email id and

2691
01:43:42,080 --> 01:43:47,760
similarly here we have a component class

2692
01:43:45,040 --> 01:43:49,520
it has a property employee so employee

2693
01:43:47,760 --> 01:43:51,360
is basically a typescript class it

2694
01:43:49,520 --> 01:43:53,360
contains the properties first name last

2695
01:43:51,360 --> 01:43:55,360
name and email id

2696
01:43:53,360 --> 01:43:57,600
so when we create the employee property

2697
01:43:55,360 --> 01:44:00,560
of employee typescript class in

2698
01:43:57,600 --> 01:44:02,639
component we access its properties in

2699
01:44:00,560 --> 01:44:05,639
html template using

2700
01:44:02,639 --> 01:44:05,639
employee.firstnameemploy.lastnameemploy.email

2701
01:44:06,080 --> 01:44:09,760
this

2702
01:44:07,440 --> 01:44:12,960
whenever i enter something in first name

2703
01:44:09,760 --> 01:44:14,719
last name and email id input controls

2704
01:44:12,960 --> 01:44:17,360
then the corresponding properties will

2705
01:44:14,719 --> 01:44:18,239
get automatically updated in component

2706
01:44:17,360 --> 01:44:21,679
class

2707
01:44:18,239 --> 01:44:23,920
and whenever i do some changes in model

2708
01:44:21,679 --> 01:44:25,920
properties in component class then the

2709
01:44:23,920 --> 01:44:28,560
corresponding properties will get

2710
01:44:25,920 --> 01:44:31,199
updated in html template

2711
01:44:28,560 --> 01:44:32,400
so this is how the two-way works in

2712
01:44:31,199 --> 01:44:34,239
angular

2713
01:44:32,400 --> 01:44:36,239
so look at here here we have data

2714
01:44:34,239 --> 01:44:38,159
binding and event binding

2715
01:44:36,239 --> 01:44:40,080
so whenever we define properties in

2716
01:44:38,159 --> 01:44:41,520
component class and we bind that

2717
01:44:40,080 --> 01:44:43,600
properties in

2718
01:44:41,520 --> 01:44:45,440
component template then it is called

2719
01:44:43,600 --> 01:44:48,480
property binding or

2720
01:44:45,440 --> 01:44:51,199
data binding so we basically use angular

2721
01:44:48,480 --> 01:44:52,719
interpolation to bind a properties in

2722
01:44:51,199 --> 01:44:55,040
html template

2723
01:44:52,719 --> 01:44:57,360
and when we perform some

2724
01:44:55,040 --> 01:45:00,560
events on html template it should be

2725
01:44:57,360 --> 01:45:03,119
bind in component class using of methods

2726
01:45:00,560 --> 01:45:05,360
or functions

2727
01:45:03,119 --> 01:45:07,360
so angular provides a nice feature that

2728
01:45:05,360 --> 01:45:09,360
is two-way binding and angular also

2729
01:45:07,360 --> 01:45:11,440
provides ng model directive so we can

2730
01:45:09,360 --> 01:45:13,760
use ng model direct to to achieve

2731
01:45:11,440 --> 01:45:16,800
two-way binding in our angular

2732
01:45:13,760 --> 01:45:19,679
application set door to a vs code id and

2733
01:45:16,800 --> 01:45:22,400
let's quickly create a component

2734
01:45:19,679 --> 01:45:24,960
so make sure that you are in a project

2735
01:45:22,400 --> 01:45:27,440
a root folder a project angular hyphen

2736
01:45:24,960 --> 01:45:29,600
front end and just type the angular cli

2737
01:45:27,440 --> 01:45:31,040
command

2738
01:45:29,600 --> 01:45:32,400
ng

2739
01:45:31,040 --> 01:45:35,679
g for generate

2740
01:45:32,400 --> 01:45:39,440
c for component and just followed by the

2741
01:45:35,679 --> 01:45:41,040
name of the component let's say create

2742
01:45:39,440 --> 01:45:42,840
employee

2743
01:45:41,040 --> 01:45:45,760
hit

2744
01:45:42,840 --> 01:45:49,040
enter when this command completes it

2745
01:45:45,760 --> 01:45:50,320
created four files and app model is also

2746
01:45:49,040 --> 01:45:53,360
updated

2747
01:45:50,320 --> 01:45:55,040
well if you expand app folder within app

2748
01:45:53,360 --> 01:45:56,159
folder you can see here create employee

2749
01:45:55,040 --> 01:45:58,159
folder is

2750
01:45:56,159 --> 01:46:01,280
created and within a create employee

2751
01:45:58,159 --> 01:46:03,760
folder four files are generated

2752
01:46:01,280 --> 01:46:06,000
and if you open app model

2753
01:46:03,760 --> 01:46:07,600
angular cli has automatically added

2754
01:46:06,000 --> 01:46:10,239
create employee component to

2755
01:46:07,600 --> 01:46:11,360
declarations array

2756
01:46:10,239 --> 01:46:13,600
all right

2757
01:46:11,360 --> 01:46:16,400
now let's go ahead and let's configure

2758
01:46:13,600 --> 01:46:18,960
route for our newly created component

2759
01:46:16,400 --> 01:46:21,679
that is create employee component

2760
01:46:18,960 --> 01:46:23,520
let's go ahead and let's open

2761
01:46:21,679 --> 01:46:25,920
app routing model

2762
01:46:23,520 --> 01:46:27,520
module and here we're going to configure

2763
01:46:25,920 --> 01:46:30,000
a route

2764
01:46:27,520 --> 01:46:31,920
so let's go ahead and let's

2765
01:46:30,000 --> 01:46:33,199
create a javascript object within a

2766
01:46:31,920 --> 01:46:35,520
routes array

2767
01:46:33,199 --> 01:46:36,560
let's specify path

2768
01:46:35,520 --> 01:46:38,239
and then

2769
01:46:36,560 --> 01:46:39,679
let's say

2770
01:46:38,239 --> 01:46:41,280
create employee

2771
01:46:39,679 --> 01:46:42,719
as our path

2772
01:46:41,280 --> 01:46:45,119
followed by

2773
01:46:42,719 --> 01:46:47,040
components property

2774
01:46:45,119 --> 01:46:49,360
so once we

2775
01:46:47,040 --> 01:46:51,119
enter a path like create hyphen employee

2776
01:46:49,360 --> 01:46:53,040
then corresponding component will get

2777
01:46:51,119 --> 01:46:54,800
rendered

2778
01:46:53,040 --> 01:46:57,920
so the component name is

2779
01:46:54,800 --> 01:46:57,920
create employee component

2780
01:46:58,639 --> 01:47:02,800
it's pretty simple right

2781
01:47:00,400 --> 01:47:04,320
so once we configure route

2782
01:47:02,800 --> 01:47:05,440
now we can able to

2783
01:47:04,320 --> 01:47:08,080
provide

2784
01:47:05,440 --> 01:47:10,560
a links in the header section of our

2785
01:47:08,080 --> 01:47:12,560
angular application let's open app

2786
01:47:10,560 --> 01:47:14,639
component template

2787
01:47:12,560 --> 01:47:17,119
and here we are going to configure

2788
01:47:14,639 --> 01:47:18,080
a link for add employee

2789
01:47:17,119 --> 01:47:20,719
page

2790
01:47:18,080 --> 01:47:23,280
so let's go ahead and let's copy this

2791
01:47:20,719 --> 01:47:25,360
list and paste it here

2792
01:47:23,280 --> 01:47:26,719
and let's change the link name

2793
01:47:25,360 --> 01:47:28,080
accordingly

2794
01:47:26,719 --> 01:47:29,840
so this is

2795
01:47:28,080 --> 01:47:32,320
going to be our

2796
01:47:29,840 --> 01:47:34,080
create employee or let's say

2797
01:47:32,320 --> 01:47:35,920
add employee

2798
01:47:34,080 --> 01:47:38,080
link and here we are going to change a

2799
01:47:35,920 --> 01:47:39,760
router link

2800
01:47:38,080 --> 01:47:41,600
create employee

2801
01:47:39,760 --> 01:47:43,920
so this is the path that we have

2802
01:47:41,600 --> 01:47:45,040
configured in a route

2803
01:47:43,920 --> 01:47:46,159
here

2804
01:47:45,040 --> 01:47:47,840
okay

2805
01:47:46,159 --> 01:47:48,960
let's save the file and let's go back to

2806
01:47:47,840 --> 01:47:51,119
browser

2807
01:47:48,960 --> 01:47:53,520
and here you can able to see

2808
01:47:51,119 --> 01:47:56,239
add employee link is added in a header

2809
01:47:53,520 --> 01:47:57,920
section if you click on add employee you

2810
01:47:56,239 --> 01:47:59,040
should able to navigate to create

2811
01:47:57,920 --> 01:48:00,719
employee

2812
01:47:59,040 --> 01:48:02,400
path

2813
01:48:00,719 --> 01:48:05,920
all right so our

2814
01:48:02,400 --> 01:48:07,600
routing is perfectly working

2815
01:48:05,920 --> 01:48:10,000
if you click on employee list it should

2816
01:48:07,600 --> 01:48:11,679
navigate to the employees list page and

2817
01:48:10,000 --> 01:48:14,880
if you click on add employee to navigate

2818
01:48:11,679 --> 01:48:16,800
to create employee page

2819
01:48:14,880 --> 01:48:20,080
let me summarize what we have done in

2820
01:48:16,800 --> 01:48:22,800
this video we had a quick look on two

2821
01:48:20,080 --> 01:48:25,199
way binding in angular so basically we

2822
01:48:22,800 --> 01:48:27,040
are going to use ng model directive to

2823
01:48:25,199 --> 01:48:28,480
achieve two-way binding in our angular

2824
01:48:27,040 --> 01:48:30,719
application

2825
01:48:28,480 --> 01:48:33,360
and we have created create

2826
01:48:30,719 --> 01:48:35,840
employee component and we have added a

2827
01:48:33,360 --> 01:48:38,639
route to create employee component and

2828
01:48:35,840 --> 01:48:40,800
we have also added add employee

2829
01:48:38,639 --> 01:48:42,159
a link in a header section so that once

2830
01:48:40,800 --> 01:48:44,639
we click on add employee it should

2831
01:48:42,159 --> 01:48:46,320
navigate to create employee

2832
01:48:44,639 --> 01:48:49,119
page

2833
01:48:46,320 --> 01:48:50,960
in next video we'll create a form that

2834
01:48:49,119 --> 01:48:53,040
is create empire form through which we

2835
01:48:50,960 --> 01:48:55,280
can add a new employee to the employees

2836
01:48:53,040 --> 01:48:55,280
list

2837
01:48:59,280 --> 01:49:04,239
now let's open create employee component

2838
01:49:03,280 --> 01:49:06,880
and let's

2839
01:49:04,239 --> 01:49:09,600
define a property

2840
01:49:06,880 --> 01:49:11,119
that is employee

2841
01:49:09,600 --> 01:49:12,239
of type

2842
01:49:11,119 --> 01:49:15,199
employee

2843
01:49:12,239 --> 01:49:18,159
class

2844
01:49:15,199 --> 01:49:20,880
and we are going to create object of

2845
01:49:18,159 --> 01:49:20,880
employee class

2846
01:49:21,199 --> 01:49:25,440
and initially all the properties of the

2847
01:49:23,920 --> 01:49:27,520
employee class

2848
01:49:25,440 --> 01:49:28,480
should be emt

2849
01:49:27,520 --> 01:49:30,000
all right

2850
01:49:28,480 --> 01:49:32,880
let's head over to create employ

2851
01:49:30,000 --> 01:49:34,480
component template and let's design a

2852
01:49:32,880 --> 01:49:37,360
form here

2853
01:49:34,480 --> 01:49:38,880
let me replace the default code

2854
01:49:37,360 --> 01:49:41,199
and let me write

2855
01:49:38,880 --> 01:49:44,800
the title of the

2856
01:49:41,199 --> 01:49:46,320
page using s3 tag here

2857
01:49:44,800 --> 01:49:47,199
and let's say

2858
01:49:46,320 --> 01:49:48,560
create

2859
01:49:47,199 --> 01:49:50,320
your employee

2860
01:49:48,560 --> 01:49:53,520
and after that let's go ahead and let's

2861
01:49:50,320 --> 01:49:55,599
create a form

2862
01:49:53,520 --> 01:49:58,719
and inside the form here

2863
01:49:55,599 --> 01:50:00,800
we are going to use ng submit

2864
01:49:58,719 --> 01:50:04,320
event to listen

2865
01:50:00,800 --> 01:50:07,040
you know form submission event

2866
01:50:04,320 --> 01:50:09,599
well look at the syntax here

2867
01:50:07,040 --> 01:50:10,960
within a parenthesis

2868
01:50:09,599 --> 01:50:12,320
we have

2869
01:50:10,960 --> 01:50:13,760
ng

2870
01:50:12,320 --> 01:50:15,280
submit

2871
01:50:13,760 --> 01:50:19,440
and let's assign

2872
01:50:15,280 --> 01:50:21,360
a event handler to this ng submit event

2873
01:50:19,440 --> 01:50:24,679
let's say

2874
01:50:21,360 --> 01:50:24,679
on submit

2875
01:50:25,040 --> 01:50:31,679
all right so this is the ng submit event

2876
01:50:28,480 --> 01:50:34,239
which is enclosed in parenthesis

2877
01:50:31,679 --> 01:50:35,280
and we have assigned a event handler to

2878
01:50:34,239 --> 01:50:38,800
this

2879
01:50:35,280 --> 01:50:41,360
event and this event handler will define

2880
01:50:38,800 --> 01:50:42,400
in component class

2881
01:50:41,360 --> 01:50:45,040
let's

2882
01:50:42,400 --> 01:50:47,119
open create employee component

2883
01:50:45,040 --> 01:50:48,320
and here we're gonna

2884
01:50:47,119 --> 01:50:51,719
define

2885
01:50:48,320 --> 01:50:51,719
an unsubmitted

2886
01:50:52,080 --> 01:50:55,840
function like this

2887
01:50:54,320 --> 01:50:57,199
let's go back to create employee

2888
01:50:55,840 --> 01:50:59,679
component

2889
01:50:57,199 --> 01:51:02,960
and let's use a bootstrap

2890
01:50:59,679 --> 01:51:04,080
css classes to design our create empire

2891
01:51:02,960 --> 01:51:07,760
form

2892
01:51:04,080 --> 01:51:09,920
let's create a new with class

2893
01:51:07,760 --> 01:51:12,320
and then add bootstrap css class that is

2894
01:51:09,920 --> 01:51:15,840
form hyphen group

2895
01:51:12,320 --> 01:51:15,840
after that create a label

2896
01:51:17,199 --> 01:51:22,960
and let's give name to the label like

2897
01:51:20,400 --> 01:51:22,960
first name

2898
01:51:23,920 --> 01:51:29,119
and after that

2899
01:51:26,159 --> 01:51:30,639
create a input field

2900
01:51:29,119 --> 01:51:34,360
input

2901
01:51:30,639 --> 01:51:34,360
type as text

2902
01:51:35,440 --> 01:51:39,440
and then

2903
01:51:36,560 --> 01:51:43,760
add bootstrap css class

2904
01:51:39,440 --> 01:51:46,320
form hypercontrol and then id equals to

2905
01:51:43,760 --> 01:51:46,320
first name

2906
01:51:46,880 --> 01:51:52,560
and then we're gonna use eng model

2907
01:51:49,679 --> 01:51:54,400
directive for two-way binding

2908
01:51:52,560 --> 01:51:55,520
so look at the syntax here

2909
01:51:54,400 --> 01:51:56,639
ng

2910
01:51:55,520 --> 01:51:58,400
model

2911
01:51:56,639 --> 01:52:02,760
and enclose

2912
01:51:58,400 --> 01:52:02,760
ng mod directive in parenthesis

2913
01:52:02,800 --> 01:52:07,920
and after that enclose this in square

2914
01:52:05,520 --> 01:52:07,920
brackets

2915
01:52:08,800 --> 01:52:13,599
okay so this is the syntax to use ng

2916
01:52:11,280 --> 01:52:15,360
directive in input

2917
01:52:13,599 --> 01:52:17,520
element

2918
01:52:15,360 --> 01:52:18,880
and let's assign a property to this

2919
01:52:17,520 --> 01:52:21,119
directive

2920
01:52:18,880 --> 01:52:22,080
let's say employee

2921
01:52:21,119 --> 01:52:23,760
dot

2922
01:52:22,080 --> 01:52:26,239
first name

2923
01:52:23,760 --> 01:52:28,239
so this is the employee we have defined

2924
01:52:26,239 --> 01:52:30,159
in a component

2925
01:52:28,239 --> 01:52:32,000
and employee property is of type

2926
01:52:30,159 --> 01:52:33,119
employee and this is the first name last

2927
01:52:32,000 --> 01:52:34,880
name you may like so these are the

2928
01:52:33,119 --> 01:52:37,760
properties of employee class that we are

2929
01:52:34,880 --> 01:52:37,760
using in the form

2930
01:52:38,400 --> 01:52:43,119
all right next

2931
01:52:39,840 --> 01:52:45,840
give a name to the input element like

2932
01:52:43,119 --> 01:52:45,840
first name

2933
01:52:46,960 --> 01:52:52,159
it's pretty simple right

2934
01:52:49,440 --> 01:52:53,679
so the important point here is eng model

2935
01:52:52,159 --> 01:52:55,840
so this is the directory that we are we

2936
01:52:53,679 --> 01:52:58,800
are using for two-way binding so as soon

2937
01:52:55,840 --> 01:53:00,480
as we enter something in this input text

2938
01:52:58,800 --> 01:53:02,480
the corresponding property will get

2939
01:53:00,480 --> 01:53:04,639
updated and as soon as we update this

2940
01:53:02,480 --> 01:53:07,599
property in component class then this

2941
01:53:04,639 --> 01:53:09,599
input text box will get updated

2942
01:53:07,599 --> 01:53:10,639
well let's go ahead and let's

2943
01:53:09,599 --> 01:53:13,360
add

2944
01:53:10,639 --> 01:53:15,920
this input text box to the last name and

2945
01:53:13,360 --> 01:53:19,440
email id as well let me copy this do and

2946
01:53:15,920 --> 01:53:21,119
paste it here and let me change

2947
01:53:19,440 --> 01:53:23,920
the necessary stuff

2948
01:53:21,119 --> 01:53:27,119
this is the last name

2949
01:53:23,920 --> 01:53:28,560
and id should be last name

2950
01:53:27,119 --> 01:53:30,080
just copy this

2951
01:53:28,560 --> 01:53:32,639
and name should be last name and

2952
01:53:30,080 --> 01:53:32,639
property

2953
01:53:32,880 --> 01:53:35,760
employee dot

2954
01:53:34,080 --> 01:53:37,679
last name

2955
01:53:35,760 --> 01:53:40,960
well let me again copy this and let's

2956
01:53:37,679 --> 01:53:42,800
define for email id let me change the

2957
01:53:40,960 --> 01:53:44,400
label

2958
01:53:42,800 --> 01:53:45,440
this should be

2959
01:53:44,400 --> 01:53:46,560
email

2960
01:53:45,440 --> 01:53:48,400
id

2961
01:53:46,560 --> 01:53:52,080
let's go ahead and change the id here

2962
01:53:48,400 --> 01:53:52,080
this should be an email id

2963
01:53:52,960 --> 01:53:58,000
and name email id and property

2964
01:53:56,239 --> 01:54:00,639
employee dot email id

2965
01:53:58,000 --> 01:54:01,760
and just save the file

2966
01:54:00,639 --> 01:54:04,239
and let's

2967
01:54:01,760 --> 01:54:06,719
add a button here

2968
01:54:04,239 --> 01:54:08,960
so when we enter

2969
01:54:06,719 --> 01:54:11,119
or something in these

2970
01:54:08,960 --> 01:54:12,639
input text fields then we need to submit

2971
01:54:11,119 --> 01:54:14,320
the form right for that we are going to

2972
01:54:12,639 --> 01:54:16,480
create a button over here

2973
01:54:14,320 --> 01:54:19,360
and then let's add a boost of css class

2974
01:54:16,480 --> 01:54:21,119
like button button success and the type

2975
01:54:19,360 --> 01:54:23,840
of the button is

2976
01:54:21,119 --> 01:54:23,840
submit

2977
01:54:24,239 --> 01:54:28,960
and let's give name to the button as

2978
01:54:26,480 --> 01:54:31,040
submit

2979
01:54:28,960 --> 01:54:33,520
let's save all the files and let's head

2980
01:54:31,040 --> 01:54:36,560
over to the browser and let's see

2981
01:54:33,520 --> 01:54:37,520
whether it is working or not so look at

2982
01:54:36,560 --> 01:54:38,960
here

2983
01:54:37,520 --> 01:54:41,520
we got a error

2984
01:54:38,960 --> 01:54:44,000
it says like can't bind to ng model

2985
01:54:41,520 --> 01:54:45,920
directive since it is not a known

2986
01:54:44,000 --> 01:54:48,480
property of input

2987
01:54:45,920 --> 01:54:50,719
well ng model directive is you know

2988
01:54:48,480 --> 01:54:53,360
present in a separate package

2989
01:54:50,719 --> 01:54:55,520
in a separate model that is forms model

2990
01:54:53,360 --> 01:54:58,239
so in order to use ng module directive

2991
01:54:55,520 --> 01:54:59,760
we have to import forms module in our

2992
01:54:58,239 --> 01:55:01,040
app module

2993
01:54:59,760 --> 01:55:03,599
all right

2994
01:55:01,040 --> 01:55:06,320
let's head over to the vs code id again

2995
01:55:03,599 --> 01:55:07,520
and go to the app model

2996
01:55:06,320 --> 01:55:10,480
and here

2997
01:55:07,520 --> 01:55:10,480
we're gonna import

2998
01:55:12,080 --> 01:55:14,960
forms model

2999
01:55:15,920 --> 01:55:18,920
from

3000
01:55:23,520 --> 01:55:26,080
angular

3001
01:55:26,320 --> 01:55:30,480
forms

3002
01:55:27,520 --> 01:55:34,719
and just copy the name of the model

3003
01:55:30,480 --> 01:55:36,480
and here after http client model just

3004
01:55:34,719 --> 01:55:38,400
paste it here

3005
01:55:36,480 --> 01:55:40,800
let's save the file and let's head over

3006
01:55:38,400 --> 01:55:42,639
to the browser so look at here the error

3007
01:55:40,800 --> 01:55:44,639
is resolved

3008
01:55:42,639 --> 01:55:47,840
so remember whenever you want to use ng

3009
01:55:44,639 --> 01:55:50,000
model directory you have to import forms

3010
01:55:47,840 --> 01:55:51,679
module in app model

3011
01:55:50,000 --> 01:55:54,320
okay great

3012
01:55:51,679 --> 01:55:55,840
so look at here the form is scattered so

3013
01:55:54,320 --> 01:55:57,520
let's go and let's align this form

3014
01:55:55,840 --> 01:55:59,920
properly

3015
01:55:57,520 --> 01:56:02,159
go to the create employee component

3016
01:55:59,920 --> 01:56:05,199
template and let's go ahead and let's

3017
01:56:02,159 --> 01:56:05,199
add a new here

3018
01:56:05,360 --> 01:56:09,760
video and add a bootstrap css class like

3019
01:56:08,719 --> 01:56:11,679
column

3020
01:56:09,760 --> 01:56:15,599
mid and

3021
01:56:11,679 --> 01:56:19,360
let's say it and let's add offset

3022
01:56:15,599 --> 01:56:20,560
offset boost of css class like offset

3023
01:56:19,360 --> 01:56:22,560
mid

3024
01:56:20,560 --> 01:56:23,679
and then define theory

3025
01:56:22,560 --> 01:56:26,719
and let's

3026
01:56:23,679 --> 01:56:29,599
close this due at the end

3027
01:56:26,719 --> 01:56:31,360
save the file

3028
01:56:29,599 --> 01:56:33,199
and let's go back to the browser and

3029
01:56:31,360 --> 01:56:35,920
look at here

3030
01:56:33,199 --> 01:56:39,119
we have successfully aligned our form at

3031
01:56:35,920 --> 01:56:40,239
the center not properly at the center so

3032
01:56:39,119 --> 01:56:42,239
let's

3033
01:56:40,239 --> 01:56:44,719
let's go and let's change the css class

3034
01:56:42,239 --> 01:56:49,040
again let's change from

3035
01:56:44,719 --> 01:56:51,280
column 8 to 6 and let's save the file

3036
01:56:49,040 --> 01:56:54,480
and let's go back to the browser yeah

3037
01:56:51,280 --> 01:56:56,719
now the form aligned at the center

3038
01:56:54,480 --> 01:56:58,960
all right great now go to the create

3039
01:56:56,719 --> 01:56:59,920
employ component and here what we'll do

3040
01:56:58,960 --> 01:57:01,520
we'll just

3041
01:56:59,920 --> 01:57:04,800
put some

3042
01:57:01,520 --> 01:57:08,239
logs here and just we're going to print

3043
01:57:04,800 --> 01:57:10,400
m4 object to the console

3044
01:57:08,239 --> 01:57:12,000
let's use this keyword to access the

3045
01:57:10,400 --> 01:57:13,679
properties

3046
01:57:12,000 --> 01:57:15,280
let's save the file and let's go back to

3047
01:57:13,679 --> 01:57:17,199
the browser

3048
01:57:15,280 --> 01:57:19,440
and now what we'll do we'll enter from

3049
01:57:17,199 --> 01:57:21,599
data and we submit the form data and

3050
01:57:19,440 --> 01:57:23,199
we'll able to see the form data will be

3051
01:57:21,599 --> 01:57:24,400
available in

3052
01:57:23,199 --> 01:57:25,599
on submit

3053
01:57:24,400 --> 01:57:27,440
a method

3054
01:57:25,599 --> 01:57:29,360
so let's enter first name ramen's last

3055
01:57:27,440 --> 01:57:30,960
name for the email id remix at the

3056
01:57:29,360 --> 01:57:33,679
gmail.com

3057
01:57:30,960 --> 01:57:34,960
and let me go to the dev tools of chrome

3058
01:57:33,679 --> 01:57:38,239
browser

3059
01:57:34,960 --> 01:57:39,679
go to the console here and just clear

3060
01:57:38,239 --> 01:57:41,119
the console

3061
01:57:39,679 --> 01:57:43,599
and then

3062
01:57:41,119 --> 01:57:45,840
hit submit button

3063
01:57:43,599 --> 01:57:47,599
and let's see yeah here we go the

3064
01:57:45,840 --> 01:57:50,159
employee object is successfully printed

3065
01:57:47,599 --> 01:57:52,480
on a console with proper data

3066
01:57:50,159 --> 01:57:54,800
post name is last name for the email id

3067
01:57:52,480 --> 01:57:57,040
remember gmail.com

3068
01:57:54,800 --> 01:57:59,679
all right guys great

3069
01:57:57,040 --> 01:58:02,000
now the form data is available in on

3070
01:57:59,679 --> 01:58:04,960
submit method

3071
01:58:02,000 --> 01:58:07,440
in next video we'll make a htp call to

3072
01:58:04,960 --> 01:58:09,119
send this form data to the server and

3073
01:58:07,440 --> 01:58:11,679
that the server

3074
01:58:09,119 --> 01:58:15,880
rest api will process this data and it

3075
01:58:11,679 --> 01:58:15,880
will store in a mysql database

3076
01:58:20,639 --> 01:58:26,560
in previous video we have created create

3077
01:58:23,040 --> 01:58:27,679
employee form and once we submit

3078
01:58:26,560 --> 01:58:31,199
this form

3079
01:58:27,679 --> 01:58:32,840
we are able to get a form data inside

3080
01:58:31,199 --> 01:58:35,840
on submit

3081
01:58:32,840 --> 01:58:38,000
method so here we have create employee

3082
01:58:35,840 --> 01:58:41,119
component right and we have defined earn

3083
01:58:38,000 --> 01:58:44,000
submit method inside create employee

3084
01:58:41,119 --> 01:58:45,760
component so once we submit the data the

3085
01:58:44,000 --> 01:58:47,840
form data will be available inside this

3086
01:58:45,760 --> 01:58:50,159
method so look at here we just uh

3087
01:58:47,840 --> 01:58:52,480
provided console log and we have printed

3088
01:58:50,159 --> 01:58:54,560
employee object to the console

3089
01:58:52,480 --> 01:58:57,040
in this video we will make a rest api

3090
01:58:54,560 --> 01:58:58,960
call and we'll send the form data to the

3091
01:58:57,040 --> 01:59:00,159
rest api and rest api internally will

3092
01:58:58,960 --> 01:59:02,880
process

3093
01:59:00,159 --> 01:59:05,520
uh this request and it will you know

3094
01:59:02,880 --> 01:59:07,360
save the employee from data in a mysql

3095
01:59:05,520 --> 01:59:09,679
database

3096
01:59:07,360 --> 01:59:11,520
so first we need to create a method

3097
01:59:09,679 --> 01:59:12,880
inside employee

3098
01:59:11,520 --> 01:59:15,119
service

3099
01:59:12,880 --> 01:59:17,040
so here we're gonna create a method

3100
01:59:15,119 --> 01:59:19,520
which will make a restrip a call and

3101
01:59:17,040 --> 01:59:22,000
we'll send the data from data through

3102
01:59:19,520 --> 01:59:24,159
htp and http internally store data into

3103
01:59:22,000 --> 01:59:26,320
mysql database

3104
01:59:24,159 --> 01:59:28,719
all right guys let's go ahead and let's

3105
01:59:26,320 --> 01:59:31,840
create a method let's say

3106
01:59:28,719 --> 01:59:31,840
create employee

3107
01:59:33,840 --> 01:59:38,960
and let's pass a employee

3108
01:59:36,080 --> 01:59:41,679
object as an argument to create employee

3109
01:59:38,960 --> 01:59:45,040
method and this is the type of

3110
01:59:41,679 --> 01:59:46,080
employee typescript class followed by

3111
01:59:45,040 --> 01:59:47,920
colon

3112
01:59:46,080 --> 01:59:49,280
followed by

3113
01:59:47,920 --> 01:59:51,040
observable

3114
01:59:49,280 --> 01:59:52,320
and here we're going to pass

3115
01:59:51,040 --> 01:59:54,400
object

3116
01:59:52,320 --> 01:59:55,920
as a type or you can pass any so if you

3117
01:59:54,400 --> 02:00:01,119
don't know the response of the hdb you

3118
01:59:55,920 --> 02:00:03,520
can just pass object or any uh type okay

3119
02:00:01,119 --> 02:00:03,520
like this

3120
02:00:04,880 --> 02:00:12,760
all right let me provide object here

3121
02:00:09,040 --> 02:00:12,760
and return

3122
02:00:12,800 --> 02:00:16,560
this dot

3123
02:00:14,320 --> 02:00:18,000
then http client and then we are going

3124
02:00:16,560 --> 02:00:20,000
to send a

3125
02:00:18,000 --> 02:00:22,159
http post request like for that we are

3126
02:00:20,000 --> 02:00:25,280
going to call a post method here

3127
02:00:22,159 --> 02:00:28,320
and then backstick

3128
02:00:25,280 --> 02:00:29,679
let's use dollar and then curly braces

3129
02:00:28,320 --> 02:00:31,840
and just call

3130
02:00:29,679 --> 02:00:36,480
base url

3131
02:00:31,840 --> 02:00:36,480
okay a comma just pass employee object

3132
02:00:37,840 --> 02:00:41,840
that's it

3133
02:00:38,800 --> 02:00:41,840
it's pretty simple right

3134
02:00:42,560 --> 02:00:47,360
so this is the first request so we have

3135
02:00:44,639 --> 02:00:49,360
to send the data in a body of the post

3136
02:00:47,360 --> 02:00:51,280
method like this

3137
02:00:49,360 --> 02:00:52,800
now we'll head over to the component and

3138
02:00:51,280 --> 02:00:54,719
we'll make this

3139
02:00:52,800 --> 02:00:57,360
method call over there

3140
02:00:54,719 --> 02:00:59,280
so basically we inject employee service

3141
02:00:57,360 --> 02:01:00,080
in a create employee component and we'll

3142
02:00:59,280 --> 02:01:02,639
call

3143
02:01:00,080 --> 02:01:05,440
employee service method

3144
02:01:02,639 --> 02:01:07,199
all right great let's head over to

3145
02:01:05,440 --> 02:01:09,840
create employee component

3146
02:01:07,199 --> 02:01:11,520
and let's inject

3147
02:01:09,840 --> 02:01:13,599
using constructor

3148
02:01:11,520 --> 02:01:16,080
let's say

3149
02:01:13,599 --> 02:01:18,960
employee service

3150
02:01:16,080 --> 02:01:20,800
and this is employee service

3151
02:01:18,960 --> 02:01:23,840
and make sure that employee service is

3152
02:01:20,800 --> 02:01:23,840
imported at the top

3153
02:01:24,239 --> 02:01:26,880
okay

3154
02:01:25,679 --> 02:01:29,280
great

3155
02:01:26,880 --> 02:01:32,639
now what we'll do we'll create

3156
02:01:29,280 --> 02:01:34,560
a save employee method here

3157
02:01:32,639 --> 02:01:38,000
and inside save employee method

3158
02:01:34,560 --> 02:01:40,000
let's call this dot employee service and

3159
02:01:38,000 --> 02:01:42,159
then call its method that is create

3160
02:01:40,000 --> 02:01:45,280
employee and let's pass

3161
02:01:42,159 --> 02:01:47,920
employee object as a method argument

3162
02:01:45,280 --> 02:01:50,320
to this method

3163
02:01:47,920 --> 02:01:52,400
and this method returns observable so we

3164
02:01:50,320 --> 02:01:53,920
can subscribe this

3165
02:01:52,400 --> 02:01:56,960
method so that we can process a

3166
02:01:53,920 --> 02:01:59,360
synchronous response here

3167
02:01:56,960 --> 02:02:02,880
and it has

3168
02:01:59,360 --> 02:02:05,840
the data as a response object and arrow

3169
02:02:02,880 --> 02:02:07,920
syntax and we can able to

3170
02:02:05,840 --> 02:02:10,159
print the error

3171
02:02:07,920 --> 02:02:11,119
response like this and here i'm gonna

3172
02:02:10,159 --> 02:02:13,119
just

3173
02:02:11,119 --> 02:02:14,719
print the success response to the

3174
02:02:13,119 --> 02:02:19,040
console

3175
02:02:14,719 --> 02:02:21,119
data so once we submit the employee form

3176
02:02:19,040 --> 02:02:23,599
successfully then we should be able to

3177
02:02:21,119 --> 02:02:24,560
navigate to the employees list page act

3178
02:02:23,599 --> 02:02:27,199
for that

3179
02:02:24,560 --> 02:02:29,760
we are going to use a router here

3180
02:02:27,199 --> 02:02:32,560
so i'm going to create a separate method

3181
02:02:29,760 --> 02:02:34,080
let's say

3182
02:02:32,560 --> 02:02:36,719
go to

3183
02:02:34,080 --> 02:02:36,719
employee list

3184
02:02:38,159 --> 02:02:42,239
and here let's use a router to navigate

3185
02:02:41,199 --> 02:02:43,760
to the

3186
02:02:42,239 --> 02:02:46,560
employees page

3187
02:02:43,760 --> 02:02:48,000
let's first inject a router from

3188
02:02:46,560 --> 02:02:49,840
angular

3189
02:02:48,000 --> 02:02:51,280
you know router package go to the

3190
02:02:49,840 --> 02:02:52,560
constructor

3191
02:02:51,280 --> 02:02:53,840
and here let's

3192
02:02:52,560 --> 02:02:56,159
inject

3193
02:02:53,840 --> 02:02:58,800
a router and make sure that router

3194
02:02:56,159 --> 02:03:02,239
should be imported from

3195
02:02:58,800 --> 02:03:04,080
angular slash router package

3196
02:03:02,239 --> 02:03:06,159
okay now we can use this router to

3197
02:03:04,080 --> 02:03:08,080
navigate to the corresponding

3198
02:03:06,159 --> 02:03:11,119
uh path

3199
02:03:08,080 --> 02:03:14,159
so here i'm going to use router

3200
02:03:11,119 --> 02:03:16,480
this dot router dot navigate and then we

3201
02:03:14,159 --> 02:03:17,840
pass the path of the route that we want

3202
02:03:16,480 --> 02:03:21,440
to navigate

3203
02:03:17,840 --> 02:03:24,080
so router provides a navigate method

3204
02:03:21,440 --> 02:03:25,119
and through navigate method we can pass

3205
02:03:24,080 --> 02:03:27,840
a path

3206
02:03:25,119 --> 02:03:30,480
to which we are going to navigate now we

3207
02:03:27,840 --> 02:03:31,920
call this save employee method from on

3208
02:03:30,480 --> 02:03:34,159
submit

3209
02:03:31,920 --> 02:03:35,360
let's go ahead and let's

3210
02:03:34,159 --> 02:03:36,560
call

3211
02:03:35,360 --> 02:03:38,560
this dot

3212
02:03:36,560 --> 02:03:41,520
save employee method

3213
02:03:38,560 --> 02:03:43,599
from on submit method

3214
02:03:41,520 --> 02:03:46,159
let's go ahead and let's add

3215
02:03:43,599 --> 02:03:47,760
employee information and submit the form

3216
02:03:46,159 --> 02:03:48,800
let's say i'm going to add a employee

3217
02:03:47,760 --> 02:03:50,400
like

3218
02:03:48,800 --> 02:03:51,599
uh let's say

3219
02:03:50,400 --> 02:03:53,199
ram

3220
02:03:51,599 --> 02:03:56,560
and

3221
02:03:53,199 --> 02:03:58,719
power and email id as ramadra gm.com hit

3222
02:03:56,560 --> 02:04:01,360
submit

3223
02:03:58,719 --> 02:04:02,800
i guess we got some error let me see

3224
02:04:01,360 --> 02:04:06,760
what is the error

3225
02:04:02,800 --> 02:04:06,760
inspect and go to the console

3226
02:04:14,320 --> 02:04:19,520
we got a success response but uh we are

3227
02:04:16,960 --> 02:04:22,400
not able to navigate to the

3228
02:04:19,520 --> 02:04:22,400
employees page

3229
02:04:23,599 --> 02:04:29,440
okay so let me head over to the vs code

3230
02:04:26,159 --> 02:04:31,280
id and let me see what is missing

3231
02:04:29,440 --> 02:04:33,679
yeah here we go so basically we need to

3232
02:04:31,280 --> 02:04:34,960
call this method from

3233
02:04:33,679 --> 02:04:37,119
here

3234
02:04:34,960 --> 02:04:39,040
this dot

3235
02:04:37,119 --> 02:04:40,079
let's call go to employee list

3236
02:04:39,040 --> 02:04:42,320
method

3237
02:04:40,079 --> 02:04:44,800
and save the file and let's see how it

3238
02:04:42,320 --> 02:04:44,800
works now

3239
02:04:46,800 --> 02:04:51,679
uh let me go to the employees list

3240
02:04:50,159 --> 02:04:54,000
and let me

3241
02:04:51,679 --> 02:04:56,000
add one more employee now

3242
02:04:54,000 --> 02:04:58,560
let's say

3243
02:04:56,000 --> 02:04:58,560
for a bus

3244
02:04:58,719 --> 02:05:02,079
and then

3245
02:05:00,320 --> 02:05:03,760
let's say jado

3246
02:05:02,079 --> 02:05:07,679
email id as

3247
02:05:03,760 --> 02:05:10,159
prabhas at the rate gmail.com hit submit

3248
02:05:07,679 --> 02:05:12,400
so look at here bus employee is added to

3249
02:05:10,159 --> 02:05:15,679
the employee list it means that we have

3250
02:05:12,400 --> 02:05:18,239
successfully made a sdp call and we have

3251
02:05:15,679 --> 02:05:21,040
successfully stored i employ from data

3252
02:05:18,239 --> 02:05:22,560
into mysql database and we were

3253
02:05:21,040 --> 02:05:25,280
successfully able to navigate to the

3254
02:05:22,560 --> 02:05:27,840
employee list page

3255
02:05:25,280 --> 02:05:29,199
all right great so let me update this

3256
02:05:27,840 --> 02:05:30,719
title

3257
02:05:29,199 --> 02:05:34,560
let me head over to the

3258
02:05:30,719 --> 02:05:37,679
vs code id again and go to the app

3259
02:05:34,560 --> 02:05:39,760
component.ts file and here this is the

3260
02:05:37,679 --> 02:05:41,520
name of the angular project so let me

3261
02:05:39,760 --> 02:05:42,400
update this

3262
02:05:41,520 --> 02:05:44,800
to

3263
02:05:42,400 --> 02:05:46,079
let's say angular

3264
02:05:44,800 --> 02:05:49,079
10

3265
02:05:46,079 --> 02:05:49,079
springboard

3266
02:05:49,119 --> 02:05:54,320
code

3267
02:05:50,560 --> 02:05:56,800
full stack app something like this

3268
02:05:54,320 --> 02:05:58,159
and let's save the file and let's head

3269
02:05:56,800 --> 02:06:00,079
over to the browser

3270
02:05:58,159 --> 02:06:01,760
and you can able to see the title is

3271
02:06:00,079 --> 02:06:04,239
updated

3272
02:06:01,760 --> 02:06:05,679
angular 10 spring boot cool full stack

3273
02:06:04,239 --> 02:06:08,320
app

3274
02:06:05,679 --> 02:06:10,719
now our application looks good

3275
02:06:08,320 --> 02:06:11,920
so let me summarize what we have done in

3276
02:06:10,719 --> 02:06:13,840
this video

3277
02:06:11,920 --> 02:06:16,239
we have created create employee method

3278
02:06:13,840 --> 02:06:17,040
which in turn make a rest a call and we

3279
02:06:16,239 --> 02:06:19,360
have

3280
02:06:17,040 --> 02:06:21,199
you know pass the employee from data to

3281
02:06:19,360 --> 02:06:22,560
the rest api

3282
02:06:21,199 --> 02:06:24,480
and we inject

3283
02:06:22,560 --> 02:06:26,480
employee service in create employee

3284
02:06:24,480 --> 02:06:28,560
component

3285
02:06:26,480 --> 02:06:30,719
and we use its method that is create

3286
02:06:28,560 --> 02:06:32,800
employee method and we pass employee

3287
02:06:30,719 --> 02:06:33,840
form object to the client employee

3288
02:06:32,800 --> 02:06:36,480
method

3289
02:06:33,840 --> 02:06:37,840
and we process the response and we also

3290
02:06:36,480 --> 02:06:39,840
just printed

3291
02:06:37,840 --> 02:06:41,840
a error object if there are any

3292
02:06:39,840 --> 02:06:43,920
exception in

3293
02:06:41,840 --> 02:06:46,800
you know processing this request so

3294
02:06:43,920 --> 02:06:48,480
after a success response of the rest api

3295
02:06:46,800 --> 02:06:50,639
we navigate to the

3296
02:06:48,480 --> 02:06:54,320
list employee page using

3297
02:06:50,639 --> 02:06:54,320
uh you know router here

3298
02:06:54,719 --> 02:07:00,079
okay it's pretty simple

3299
02:06:56,960 --> 02:07:01,679
all right guys uh we completed

3300
02:07:00,079 --> 02:07:02,880
you know create employee functionality

3301
02:07:01,679 --> 02:07:05,119
end-to-end

3302
02:07:02,880 --> 02:07:07,760
in next video we'll create a few rest

3303
02:07:05,119 --> 02:07:10,079
apis and then we'll create update

3304
02:07:07,760 --> 02:07:13,560
employee component to perform update

3305
02:07:10,079 --> 02:07:13,560
employee functionality

3306
02:07:17,280 --> 02:07:21,520
get

3307
02:07:18,239 --> 02:07:24,400
employee by id rest api

3308
02:07:21,520 --> 02:07:24,400
get employee

3309
02:07:24,639 --> 02:07:28,719
by id rest api

3310
02:07:27,599 --> 02:07:31,520
okay

3311
02:07:28,719 --> 02:07:32,880
just type a method

3312
02:07:31,520 --> 02:07:33,920
public

3313
02:07:32,880 --> 02:07:35,679
and this

3314
02:07:33,920 --> 02:07:37,360
method returns

3315
02:07:35,679 --> 02:07:39,199
ample object

3316
02:07:37,360 --> 02:07:40,800
to the client so let's give a return

3317
02:07:39,199 --> 02:07:42,960
type as employee

3318
02:07:40,800 --> 02:07:45,679
and let's view method name as

3319
02:07:42,960 --> 02:07:48,079
get employee

3320
02:07:45,679 --> 02:07:50,159
by id

3321
02:07:48,079 --> 02:07:53,280
all right

3322
02:07:50,159 --> 02:07:54,400
and we are going to pass

3323
02:07:53,280 --> 02:07:56,159
id as

3324
02:07:54,400 --> 02:07:59,199
a method argument right

3325
02:07:56,159 --> 02:08:01,599
long id

3326
02:07:59,199 --> 02:08:03,679
let's annotate this

3327
02:08:01,599 --> 02:08:06,880
method with at the rate

3328
02:08:03,679 --> 02:08:08,960
and get mapping annotation

3329
02:08:06,880 --> 02:08:11,280
let's configure the rest endpoint url

3330
02:08:08,960 --> 02:08:14,239
over here

3331
02:08:11,280 --> 02:08:15,520
employees slash

3332
02:08:14,239 --> 02:08:18,560
id

3333
02:08:15,520 --> 02:08:21,199
okay so this is the path variable

3334
02:08:18,560 --> 02:08:23,920
now we want to

3335
02:08:21,199 --> 02:08:25,520
map or we want to store this id value

3336
02:08:23,920 --> 02:08:29,199
into

3337
02:08:25,520 --> 02:08:30,560
you know the java variable so for that

3338
02:08:29,199 --> 02:08:33,280
we are going to use at the right path

3339
02:08:30,560 --> 02:08:35,360
variable annotation to map this id

3340
02:08:33,280 --> 02:08:36,560
with this variable

3341
02:08:35,360 --> 02:08:37,920
so let's use

3342
02:08:36,560 --> 02:08:41,119
add the rate

3343
02:08:37,920 --> 02:08:41,119
path variable annotation

3344
02:08:42,480 --> 02:08:46,800
now let's retrieve a ampulla object from

3345
02:08:44,880 --> 02:08:48,000
the database for that we are going to

3346
02:08:46,800 --> 02:08:51,320
use

3347
02:08:48,000 --> 02:08:51,320
employee repository

3348
02:08:51,440 --> 02:08:56,079
let's create employee

3349
02:08:53,440 --> 02:08:57,440
object here

3350
02:08:56,079 --> 02:08:59,440
and let's use

3351
02:08:57,440 --> 02:09:01,920
the employee repository

3352
02:08:59,440 --> 02:09:05,040
and we're going to call

3353
02:09:01,920 --> 02:09:07,920
find by id right find your d method

3354
02:09:05,040 --> 02:09:09,199
and just fast id id to the find by

3355
02:09:07,920 --> 02:09:11,760
method

3356
02:09:09,199 --> 02:09:12,960
so look at here find by id returns

3357
02:09:11,760 --> 02:09:14,239
optional

3358
02:09:12,960 --> 02:09:15,679
as a

3359
02:09:14,239 --> 02:09:18,560
written type

3360
02:09:15,679 --> 02:09:21,280
so here what we'll do we'll use at the

3361
02:09:18,560 --> 02:09:21,280
air dot

3362
02:09:21,440 --> 02:09:26,560
orioles throw method so if record not

3363
02:09:24,480 --> 02:09:28,320
existing database then

3364
02:09:26,560 --> 02:09:30,320
we are going to throw resource not from

3365
02:09:28,320 --> 02:09:32,560
the exception for that

3366
02:09:30,320 --> 02:09:34,159
let's use orioles throw

3367
02:09:32,560 --> 02:09:35,040
method over here

3368
02:09:34,159 --> 02:09:37,199
and

3369
02:09:35,040 --> 02:09:39,360
basically we need to

3370
02:09:37,199 --> 02:09:43,199
pass a lambda expression to this method

3371
02:09:39,360 --> 02:09:44,880
because this method internally uses

3372
02:09:43,199 --> 02:09:46,639
uh

3373
02:09:44,880 --> 02:09:48,800
functional interfaces

3374
02:09:46,639 --> 02:09:52,639
okay and we use lambda expression to

3375
02:09:48,800 --> 02:09:52,639
implement a functional interface

3376
02:09:54,800 --> 02:09:59,679
let's use lambda expression syntax here

3377
02:09:57,599 --> 02:10:01,679
and just pass

3378
02:09:59,679 --> 02:10:03,440
object of

3379
02:10:01,679 --> 02:10:06,400
the custom exception that is resource

3380
02:10:03,440 --> 02:10:06,400
not found exception

3381
02:10:07,040 --> 02:10:09,840
a resource

3382
02:10:10,079 --> 02:10:15,760
not found exception and just pass the

3383
02:10:12,159 --> 02:10:17,440
custom message over here

3384
02:10:15,760 --> 02:10:20,000
employee

3385
02:10:17,440 --> 02:10:20,800
not exist

3386
02:10:20,000 --> 02:10:22,079
with

3387
02:10:20,800 --> 02:10:26,599
id

3388
02:10:22,079 --> 02:10:26,599
then just pass the id over here

3389
02:10:30,159 --> 02:10:34,159
let me break this statement

3390
02:10:38,960 --> 02:10:41,520
okay great

3391
02:10:40,159 --> 02:10:44,239
so what we have done

3392
02:10:41,520 --> 02:10:45,760
we have we have called find by id method

3393
02:10:44,239 --> 02:10:46,960
so this method basically returns

3394
02:10:45,760 --> 02:10:49,679
optional

3395
02:10:46,960 --> 02:10:52,480
uh object as written type and optional

3396
02:10:49,679 --> 02:10:54,960
provides or else throw method so if we

3397
02:10:52,480 --> 02:10:56,719
record not existing database then we

3398
02:10:54,960 --> 02:10:59,199
just simply throw resource not from the

3399
02:10:56,719 --> 02:11:00,719
exception like this

3400
02:10:59,199 --> 02:11:02,000
now let's return

3401
02:11:00,719 --> 02:11:03,280
a employee

3402
02:11:02,000 --> 02:11:06,000
object

3403
02:11:03,280 --> 02:11:09,280
to the client

3404
02:11:06,000 --> 02:11:12,079
so what we'll do we need to also return

3405
02:11:09,280 --> 02:11:14,639
http status right for that we need to

3406
02:11:12,079 --> 02:11:16,079
use a response entity

3407
02:11:14,639 --> 02:11:18,000
class

3408
02:11:16,079 --> 02:11:20,639
let's use return type as

3409
02:11:18,000 --> 02:11:20,639
response

3410
02:11:23,679 --> 02:11:27,119
entity and this is the generic class so

3411
02:11:26,000 --> 02:11:30,079
let's type

3412
02:11:27,119 --> 02:11:32,639
let's pass employee as a generic type

3413
02:11:30,079 --> 02:11:35,679
and here let's return

3414
02:11:32,639 --> 02:11:35,679
response entity

3415
02:11:35,920 --> 02:11:40,320
and we are going to

3416
02:11:37,360 --> 02:11:43,199
return our case status that is 200

3417
02:11:40,320 --> 02:11:45,760
status so let's choose ok and just pass

3418
02:11:43,199 --> 02:11:47,679
the empire object in a body

3419
02:11:45,760 --> 02:11:50,719
that's it

3420
02:11:47,679 --> 02:11:50,719
it's pretty simple right

3421
02:11:50,960 --> 02:11:54,719
right guys this is pretty simple uh rest

3422
02:11:53,119 --> 02:11:58,000
api that is

3423
02:11:54,719 --> 02:12:00,239
uh you know get employed by idealist api

3424
02:11:58,000 --> 02:12:01,520
now let's go ahead and let's test this

3425
02:12:00,239 --> 02:12:03,520
rest api

3426
02:12:01,520 --> 02:12:05,280
for that what we will do i will start

3427
02:12:03,520 --> 02:12:07,599
the application

3428
02:12:05,280 --> 02:12:08,480
go to the spring boot application main

3429
02:12:07,599 --> 02:12:12,719
class

3430
02:12:08,480 --> 02:12:12,719
right click run as spring boot app

3431
02:12:16,159 --> 02:12:20,159
now look at here springboard application

3432
02:12:18,320 --> 02:12:22,400
is up and running on embedded tomcat

3433
02:12:20,159 --> 02:12:24,000
server on 4080

3434
02:12:22,400 --> 02:12:27,760
now let's go back to the postmodernist

3435
02:12:24,000 --> 02:12:28,880
client and let us test this rest api

3436
02:12:27,760 --> 02:12:30,480
open

3437
02:12:28,880 --> 02:12:31,840
a new tab

3438
02:12:30,480 --> 02:12:35,840
and just type

3439
02:12:31,840 --> 02:12:37,440
localhost address slash api slash v1

3440
02:12:35,840 --> 02:12:38,639
slash employees

3441
02:12:37,440 --> 02:12:41,040
and here

3442
02:12:38,639 --> 02:12:42,079
we are going to retrieve a particular

3443
02:12:41,040 --> 02:12:44,480
employee

3444
02:12:42,079 --> 02:12:47,199
so let's go back to the

3445
02:12:44,480 --> 02:12:49,520
database so i am going to get a employee

3446
02:12:47,199 --> 02:12:51,760
ramesh with id 1

3447
02:12:49,520 --> 02:12:53,920
so let's pass id 1

3448
02:12:51,760 --> 02:12:55,280
as a path variable

3449
02:12:53,920 --> 02:12:59,040
slash 1

3450
02:12:55,280 --> 02:13:02,480
and choose http get method over here and

3451
02:12:59,040 --> 02:13:04,639
simply hit send button

3452
02:13:02,480 --> 02:13:06,320
so this will retrieve a employee object

3453
02:13:04,639 --> 02:13:08,480
with ide 1.

3454
02:13:06,320 --> 02:13:11,520
if you want to retrieve employee with id

3455
02:13:08,480 --> 02:13:13,520
2 just pass id 2 over here and just hit

3456
02:13:11,520 --> 02:13:17,280
send button so this will retrieve my

3457
02:13:13,520 --> 02:13:18,880
employee with id 2. alright guys we have

3458
02:13:17,280 --> 02:13:21,040
successfully created

3459
02:13:18,880 --> 02:13:22,960
get employee by id rest api and we have

3460
02:13:21,040 --> 02:13:26,239
tested

3461
02:13:22,960 --> 02:13:26,239
using postman rest client

3462
02:13:29,760 --> 02:13:33,840
now let's create

3463
02:13:31,440 --> 02:13:36,560
update employers dpi

3464
02:13:33,840 --> 02:13:39,760
go to the employee controller

3465
02:13:36,560 --> 02:13:43,280
within employee controller

3466
02:13:39,760 --> 02:13:43,280
let me just write the comment here

3467
02:13:43,440 --> 02:13:47,360
update

3468
02:13:45,040 --> 02:13:48,560
employee arrest api

3469
02:13:47,360 --> 02:13:50,880
okay

3470
02:13:48,560 --> 02:13:52,800
so just follow the steps

3471
02:13:50,880 --> 02:13:54,079
public

3472
02:13:52,800 --> 02:13:56,800
and

3473
02:13:54,079 --> 02:14:00,079
response entity and

3474
02:13:56,800 --> 02:14:02,960
just pass type as employee

3475
02:14:00,079 --> 02:14:04,560
and let's give a method name as

3476
02:14:02,960 --> 02:14:06,079
update

3477
02:14:04,560 --> 02:14:08,159
employee

3478
02:14:06,079 --> 02:14:09,360
okay

3479
02:14:08,159 --> 02:14:12,480
make this

3480
02:14:09,360 --> 02:14:15,040
e as caps

3481
02:14:12,480 --> 02:14:17,360
and we are going to pass

3482
02:14:15,040 --> 02:14:20,159
id as a method argument

3483
02:14:17,360 --> 02:14:22,560
along with that

3484
02:14:20,159 --> 02:14:23,679
the object of the employee

3485
02:14:22,560 --> 02:14:26,480
class

3486
02:14:23,679 --> 02:14:28,639
so basically client sends updated

3487
02:14:26,480 --> 02:14:30,239
employee object in a request body for

3488
02:14:28,639 --> 02:14:32,000
that we are going to

3489
02:14:30,239 --> 02:14:34,800
use

3490
02:14:32,000 --> 02:14:36,800
employee object here

3491
02:14:34,800 --> 02:14:40,400
now what we will do we will use

3492
02:14:36,800 --> 02:14:41,840
annotations over here so let's use both

3493
02:14:40,400 --> 02:14:44,960
mapping annotation

3494
02:14:41,840 --> 02:14:47,360
for update operation

3495
02:14:44,960 --> 02:14:48,800
so this method will basically handles a

3496
02:14:47,360 --> 02:14:50,400
put request

3497
02:14:48,800 --> 02:14:52,239
for that we're going to use at the

3498
02:14:50,400 --> 02:14:54,239
report mapping annotation

3499
02:14:52,239 --> 02:14:55,040
let's configure rest endpoint url over

3500
02:14:54,239 --> 02:14:56,480
here

3501
02:14:55,040 --> 02:14:57,679
slash

3502
02:14:56,480 --> 02:14:59,520
implies

3503
02:14:57,679 --> 02:15:02,800
slash just fast

3504
02:14:59,520 --> 02:15:04,960
path variable here that is id

3505
02:15:02,800 --> 02:15:08,079
now let's map this path variable with

3506
02:15:04,960 --> 02:15:11,360
the java variable by using at the rate

3507
02:15:08,079 --> 02:15:11,360
path variable annotation

3508
02:15:12,400 --> 02:15:15,760
and also we are going to

3509
02:15:14,400 --> 02:15:19,440
directly map

3510
02:15:15,760 --> 02:15:22,560
a request json object into a java object

3511
02:15:19,440 --> 02:15:25,599
for that we are going to use at the rate

3512
02:15:22,560 --> 02:15:27,760
request body annotation

3513
02:15:25,599 --> 02:15:30,079
pretty simple right

3514
02:15:27,760 --> 02:15:30,079
great

3515
02:15:30,320 --> 02:15:33,679
so to update i employ first we need to

3516
02:15:32,639 --> 02:15:36,880
retrieve

3517
02:15:33,679 --> 02:15:38,560
our existing employee from the database

3518
02:15:36,880 --> 02:15:42,320
for that what we will do we will reuse

3519
02:15:38,560 --> 02:15:42,320
this code just copy this code

3520
02:15:42,400 --> 02:15:47,199
so this will basically

3521
02:15:44,560 --> 02:15:48,960
you know retrieve employee by id if

3522
02:15:47,199 --> 02:15:50,480
employee is not existing database then

3523
02:15:48,960 --> 02:15:51,520
it simply throws resource not found

3524
02:15:50,480 --> 02:15:54,400
exception

3525
02:15:51,520 --> 02:15:56,800
so look at here this is the

3526
02:15:54,400 --> 02:15:57,920
duplicate local variable employee here

3527
02:15:56,800 --> 02:16:00,400
just pass

3528
02:15:57,920 --> 02:16:00,400
this as

3529
02:16:03,199 --> 02:16:06,800
let's rename this

3530
02:16:04,719 --> 02:16:07,840
object as

3531
02:16:06,800 --> 02:16:10,320
employee

3532
02:16:07,840 --> 02:16:10,320
details

3533
02:16:10,639 --> 02:16:16,560
now what we do will update this

3534
02:16:13,599 --> 02:16:20,239
retrieved employee object with

3535
02:16:16,560 --> 02:16:22,400
a request employee object okay

3536
02:16:20,239 --> 02:16:24,960
just

3537
02:16:22,400 --> 02:16:26,400
change the first name

3538
02:16:24,960 --> 02:16:28,960
employee details

3539
02:16:26,400 --> 02:16:30,000
dot get first name

3540
02:16:28,960 --> 02:16:34,800
similarly

3541
02:16:30,000 --> 02:16:34,800
let's also change last name

3542
02:16:35,200 --> 02:16:39,599
employee details

3543
02:16:37,599 --> 02:16:41,679
dot get

3544
02:16:39,599 --> 02:16:43,359
last name

3545
02:16:41,679 --> 02:16:44,319
employee

3546
02:16:43,359 --> 02:16:47,679
dot

3547
02:16:44,319 --> 02:16:48,880
set email id and let's get a email id

3548
02:16:47,679 --> 02:16:50,880
from the

3549
02:16:48,880 --> 02:16:51,599
employer details object

3550
02:16:50,880 --> 02:16:53,519
and

3551
02:16:51,599 --> 02:16:56,160
set to the object

3552
02:16:53,519 --> 02:16:58,319
now once we set all the

3553
02:16:56,160 --> 02:17:00,319
information that we want to update to

3554
02:16:58,319 --> 02:17:03,599
the employee object we simply save the

3555
02:17:00,319 --> 02:17:03,599
sample object to the database

3556
02:17:05,120 --> 02:17:08,960
let's go ahead and let's save

3557
02:17:07,439 --> 02:17:10,960
this updated employee object to the

3558
02:17:08,960 --> 02:17:13,760
database

3559
02:17:10,960 --> 02:17:16,399
let's use save method and just pass

3560
02:17:13,760 --> 02:17:18,960
employee object as a method argument

3561
02:17:16,399 --> 02:17:18,960
and here

3562
02:17:19,120 --> 02:17:23,439
we store

3563
02:17:21,200 --> 02:17:25,519
the updated employee object in a

3564
02:17:23,439 --> 02:17:27,040
separate employee variable and we simply

3565
02:17:25,519 --> 02:17:29,439
return

3566
02:17:27,040 --> 02:17:33,120
this object to the client

3567
02:17:29,439 --> 02:17:36,399
for that just use return

3568
02:17:33,120 --> 02:17:36,399
response entity

3569
02:17:38,399 --> 02:17:43,040
dot okay

3570
02:17:39,760 --> 02:17:44,399
so this is 200 status and in a body just

3571
02:17:43,040 --> 02:17:46,960
type

3572
02:17:44,399 --> 02:17:49,359
updated employee

3573
02:17:46,960 --> 02:17:51,519
all right that is pretty much

3574
02:17:49,359 --> 02:17:54,479
so what we have done we have retrieved

3575
02:17:51,519 --> 02:17:56,399
our employee from the database and we

3576
02:17:54,479 --> 02:17:58,399
have added all the

3577
02:17:56,399 --> 02:18:00,559
updated information to the employee

3578
02:17:58,399 --> 02:18:03,200
object and we have stored that tempo

3579
02:18:00,559 --> 02:18:05,200
object into a database and we have just

3580
02:18:03,200 --> 02:18:07,920
written updated employee object to the

3581
02:18:05,200 --> 02:18:10,399
client very simple rest api

3582
02:18:07,920 --> 02:18:12,559
now let's run the spring project and

3583
02:18:10,399 --> 02:18:15,040
let's test this rest api using postman

3584
02:18:12,559 --> 02:18:15,040
rash client

3585
02:18:20,080 --> 02:18:26,399
alright guys springboard application is

3586
02:18:22,319 --> 02:18:29,679
running on tonka's server on port 8080

3587
02:18:26,399 --> 02:18:31,200
let's go back to the post manage client

3588
02:18:29,679 --> 02:18:34,080
go to the new tab

3589
02:18:31,200 --> 02:18:38,479
and just type localhost

3590
02:18:34,080 --> 02:18:41,760
h0 api slash v1 slash employees and this

3591
02:18:38,479 --> 02:18:43,200
is the update rest api so select

3592
02:18:41,760 --> 02:18:45,120
put http

3593
02:18:43,200 --> 02:18:46,880
method

3594
02:18:45,120 --> 02:18:49,760
and go to the header

3595
02:18:46,880 --> 02:18:52,319
and we are sending json as

3596
02:18:49,760 --> 02:18:55,120
a request body right so for that let's

3597
02:18:52,319 --> 02:18:58,080
use content type

3598
02:18:55,120 --> 02:19:00,160
as application slash json

3599
02:18:58,080 --> 02:19:01,599
and i can go back to the body in a body

3600
02:19:00,160 --> 02:19:03,439
where you're sending

3601
02:19:01,599 --> 02:19:07,200
a json right

3602
02:19:03,439 --> 02:19:11,040
so let me copy the json object from the

3603
02:19:07,200 --> 02:19:12,240
post request and let me paste in a body

3604
02:19:11,040 --> 02:19:14,559
and

3605
02:19:12,240 --> 02:19:16,880
what we'll do is simply update a

3606
02:19:14,559 --> 02:19:19,439
employee that is a remiss employee let

3607
02:19:16,880 --> 02:19:20,960
me show you that go back to the

3608
02:19:19,439 --> 02:19:23,599
my circle work point so look at here

3609
02:19:20,960 --> 02:19:25,920
this is the table it has four record we

3610
02:19:23,599 --> 02:19:30,240
are going to update the employee with id

3611
02:19:25,920 --> 02:19:31,920
one okay that is a ramesh employee

3612
02:19:30,240 --> 02:19:33,679
so let's pass

3613
02:19:31,920 --> 02:19:35,920
id here to the

3614
02:19:33,679 --> 02:19:37,920
url as a path variable

3615
02:19:35,920 --> 02:19:40,319
and i am going to update a first name

3616
02:19:37,920 --> 02:19:42,399
from remiss to rom

3617
02:19:40,319 --> 02:19:44,240
and last name from pathetic to

3618
02:19:42,399 --> 02:19:46,840
something like jado

3619
02:19:44,240 --> 02:19:49,760
an email id from ramishadra

3620
02:19:46,840 --> 02:19:51,840
gmail.com or i'm at the right gmail.com

3621
02:19:49,760 --> 02:19:53,680
so look at here first name is remix last

3622
02:19:51,840 --> 02:19:55,600
name for 33 email id i mentioned

3623
02:19:53,680 --> 02:19:57,359
gmail.com right so i am going to update

3624
02:19:55,600 --> 02:20:00,080
these details

3625
02:19:57,359 --> 02:20:01,840
with these details okay so once you

3626
02:20:00,080 --> 02:20:04,160
configure all the details hit send

3627
02:20:01,840 --> 02:20:04,160
button

3628
02:20:07,040 --> 02:20:11,600
yeah here we go so look at here the

3629
02:20:08,560 --> 02:20:14,000
response we got a updated record in a

3630
02:20:11,600 --> 02:20:15,840
response and we have successfully

3631
02:20:14,000 --> 02:20:17,200
updated first name last name and email

3632
02:20:15,840 --> 02:20:19,200
address

3633
02:20:17,200 --> 02:20:21,600
let's verify in a

3634
02:20:19,200 --> 02:20:24,479
table so let's

3635
02:20:21,600 --> 02:20:26,800
uh let's query the select statement here

3636
02:20:24,479 --> 02:20:29,439
so look at your record first record is

3637
02:20:26,800 --> 02:20:30,720
get successfully updated

3638
02:20:29,439 --> 02:20:33,280
all right guys we have successfully

3639
02:20:30,720 --> 02:20:37,359
created updated rest api and we also

3640
02:20:33,280 --> 02:20:37,359
tested it using post management

3641
02:20:41,359 --> 02:20:44,880
well

3642
02:20:42,240 --> 02:20:47,760
in this video we create update employee

3643
02:20:44,880 --> 02:20:50,160
component and we'll configure route for

3644
02:20:47,760 --> 02:20:51,520
update employee component and we create

3645
02:20:50,160 --> 02:20:54,000
a update button

3646
02:20:51,520 --> 02:20:55,760
correspond to each employee once we

3647
02:20:54,000 --> 02:20:58,080
click on update button it should

3648
02:20:55,760 --> 02:21:00,800
navigate to the update employ page let's

3649
02:20:58,080 --> 02:21:02,240
head over to the visual studio code id

3650
02:21:00,800 --> 02:21:04,880
and let's create

3651
02:21:02,240 --> 02:21:07,200
update empire component

3652
02:21:04,880 --> 02:21:10,319
go to the integrated terminal make sure

3653
02:21:07,200 --> 02:21:12,000
that you are in a root folder of our

3654
02:21:10,319 --> 02:21:14,560
angular application that is angular

3655
02:21:12,000 --> 02:21:16,319
hyphen front end and let's go ahead and

3656
02:21:14,560 --> 02:21:17,680
let's type the command

3657
02:21:16,319 --> 02:21:20,479
ng

3658
02:21:17,680 --> 02:21:22,880
g4 generate c4 component and then

3659
02:21:20,479 --> 02:21:23,680
followed by name of the component that

3660
02:21:22,880 --> 02:21:25,520
is

3661
02:21:23,680 --> 02:21:26,960
update hyphen

3662
02:21:25,520 --> 02:21:28,479
employee

3663
02:21:26,960 --> 02:21:31,040
hit enter

3664
02:21:28,479 --> 02:21:34,880
once the command completes it created

3665
02:21:31,040 --> 02:21:36,160
four files and updated app module

3666
02:21:34,880 --> 02:21:38,240
right

3667
02:21:36,160 --> 02:21:39,439
so if you go to the app folder within

3668
02:21:38,240 --> 02:21:42,000
app folder

3669
02:21:39,439 --> 02:21:44,000
update m5 folder is created

3670
02:21:42,000 --> 02:21:46,319
and within update employee four files

3671
02:21:44,000 --> 02:21:50,000
are generated all right

3672
02:21:46,319 --> 02:21:52,479
and angular cli will automatically add

3673
02:21:50,000 --> 02:21:55,120
a newly created component to app model

3674
02:21:52,479 --> 02:21:57,680
so we no need to explicitly add a newly

3675
02:21:55,120 --> 02:21:58,560
created component to app model

3676
02:21:57,680 --> 02:22:00,720
okay

3677
02:21:58,560 --> 02:22:02,319
now once we created update template

3678
02:22:00,720 --> 02:22:04,399
component let's go ahead and let's

3679
02:22:02,319 --> 02:22:05,600
configure a route for update employee

3680
02:22:04,399 --> 02:22:09,520
component

3681
02:22:05,600 --> 02:22:12,240
open app routing module

3682
02:22:09,520 --> 02:22:16,080
and go to the routes array within the

3683
02:22:12,240 --> 02:22:16,080
routes array create a object

3684
02:22:16,960 --> 02:22:21,560
and we have path property

3685
02:22:22,000 --> 02:22:26,240
and let's give

3686
02:22:23,439 --> 02:22:28,720
a path as update

3687
02:22:26,240 --> 02:22:28,720
employee

3688
02:22:29,280 --> 02:22:31,600
and then slash

3689
02:22:30,560 --> 02:22:33,280
colon

3690
02:22:31,600 --> 02:22:35,120
id so we are going to update a

3691
02:22:33,280 --> 02:22:37,840
particular employee right so this id

3692
02:22:35,120 --> 02:22:40,160
represents the particular employee id

3693
02:22:37,840 --> 02:22:42,000
okay and we basically pass this id to

3694
02:22:40,160 --> 02:22:43,280
the rest api to get a particular

3695
02:22:42,000 --> 02:22:44,720
employee from the

3696
02:22:43,280 --> 02:22:45,840
rest api

3697
02:22:44,720 --> 02:22:49,040
well

3698
02:22:45,840 --> 02:22:50,399
after that we have a component property

3699
02:22:49,040 --> 02:22:53,840
and here

3700
02:22:50,399 --> 02:22:54,800
we specify the particular component name

3701
02:22:53,840 --> 02:22:57,359
that is

3702
02:22:54,800 --> 02:22:59,600
updated by component

3703
02:22:57,359 --> 02:23:01,439
so whenever we hit this url in browser

3704
02:22:59,600 --> 02:23:02,640
the corresponding component will get

3705
02:23:01,439 --> 02:23:04,880
rendered

3706
02:23:02,640 --> 02:23:06,560
so this is a very simple routing for

3707
02:23:04,880 --> 02:23:08,560
update employee component

3708
02:23:06,560 --> 02:23:10,160
now let's go ahead and let's add update

3709
02:23:08,560 --> 02:23:12,160
button

3710
02:23:10,160 --> 02:23:14,319
so we'll add update button corresponding

3711
02:23:12,160 --> 02:23:16,319
to each employee so that whenever we

3712
02:23:14,319 --> 02:23:17,920
click on update button we'll name we'll

3713
02:23:16,319 --> 02:23:19,359
able to navigate to the update employee

3714
02:23:17,920 --> 02:23:22,080
page

3715
02:23:19,359 --> 02:23:22,080
let's open

3716
02:23:22,479 --> 02:23:25,920
the employee list

3717
02:23:24,080 --> 02:23:27,359
component template

3718
02:23:25,920 --> 02:23:30,720
and here

3719
02:23:27,359 --> 02:23:34,000
we have a table right and let's create

3720
02:23:30,720 --> 02:23:34,000
actions column first

3721
02:23:34,319 --> 02:23:38,080
actions

3722
02:23:35,600 --> 02:23:42,000
under actions column we have

3723
02:23:38,080 --> 02:23:42,000
a table right we have a button

3724
02:23:44,399 --> 02:23:47,359
let's

3725
02:23:45,280 --> 02:23:50,160
create a button over here

3726
02:23:47,359 --> 02:23:51,439
so inside a button we handle a click

3727
02:23:50,160 --> 02:23:54,000
event

3728
02:23:51,439 --> 02:23:56,240
so this is the syntax of

3729
02:23:54,000 --> 02:23:58,080
angular to bind a click event to the

3730
02:23:56,240 --> 02:24:02,000
button

3731
02:23:58,080 --> 02:24:05,439
and then here we specify event handler

3732
02:24:02,000 --> 02:24:05,439
in our case we have

3733
02:24:05,760 --> 02:24:09,600
update

3734
02:24:07,040 --> 02:24:14,479
to employee event handler

3735
02:24:09,600 --> 02:24:16,960
and then within a parenthesis we provide

3736
02:24:14,479 --> 02:24:18,960
id we pass the id

3737
02:24:16,960 --> 02:24:21,040
all right pretty simple

3738
02:24:18,960 --> 02:24:22,880
followed by let's add a bootleg css

3739
02:24:21,040 --> 02:24:25,359
class

3740
02:24:22,880 --> 02:24:27,600
like button button info

3741
02:24:25,359 --> 02:24:29,840
and then give a name to the button like

3742
02:24:27,600 --> 02:24:29,840
update

3743
02:24:30,240 --> 02:24:33,520
now we'll define this

3744
02:24:31,840 --> 02:24:35,760
event handler

3745
02:24:33,520 --> 02:24:38,319
in

3746
02:24:35,760 --> 02:24:40,319
our employee list component

3747
02:24:38,319 --> 02:24:41,760
here so once we click on button it

3748
02:24:40,319 --> 02:24:43,600
should navigate to the update employee

3749
02:24:41,760 --> 02:24:44,800
page right so let's go ahead and let's

3750
02:24:43,600 --> 02:24:46,880
define this

3751
02:24:44,800 --> 02:24:49,600
event handler here and we are going to

3752
02:24:46,880 --> 02:24:52,720
use a router to route

3753
02:24:49,600 --> 02:24:54,720
this request to the update employee page

3754
02:24:52,720 --> 02:24:57,200
for that let's go ahead and let's inject

3755
02:24:54,720 --> 02:24:59,520
a router here

3756
02:24:57,200 --> 02:25:02,000
private

3757
02:24:59,520 --> 02:25:02,000
router

3758
02:25:03,280 --> 02:25:08,080
and make sure that a router is imported

3759
02:25:06,800 --> 02:25:11,280
from

3760
02:25:08,080 --> 02:25:12,160
the package angular slash router

3761
02:25:11,280 --> 02:25:13,520
okay

3762
02:25:12,160 --> 02:25:14,960
now let's go ahead and let's use this

3763
02:25:13,520 --> 02:25:16,319
router here

3764
02:25:14,960 --> 02:25:18,160
this dot

3765
02:25:16,319 --> 02:25:20,720
router dot

3766
02:25:18,160 --> 02:25:20,720
navigate

3767
02:25:23,120 --> 02:25:27,200
and update employee

3768
02:25:25,359 --> 02:25:30,479
event handler

3769
02:25:27,200 --> 02:25:30,479
should have id right

3770
02:25:33,040 --> 02:25:37,280
so look at here this id we have passed

3771
02:25:35,120 --> 02:25:39,920
in a button

3772
02:25:37,280 --> 02:25:41,760
this is the id right

3773
02:25:39,920 --> 02:25:44,160
okay

3774
02:25:41,760 --> 02:25:46,640
so to the navigate method we're going to

3775
02:25:44,160 --> 02:25:49,200
pass a array of

3776
02:25:46,640 --> 02:25:50,720
elements so first is

3777
02:25:49,200 --> 02:25:52,800
the path

3778
02:25:50,720 --> 02:25:54,640
path of the route that is update

3779
02:25:52,800 --> 02:25:56,560
employee

3780
02:25:54,640 --> 02:25:58,640
followed by

3781
02:25:56,560 --> 02:26:00,319
id

3782
02:25:58,640 --> 02:26:02,000
so update iphone employee so this is the

3783
02:26:00,319 --> 02:26:05,359
route that we have defined in app

3784
02:26:02,000 --> 02:26:07,359
routing component right here

3785
02:26:05,359 --> 02:26:08,800
so this is the syntax

3786
02:26:07,359 --> 02:26:11,040
uh you know to

3787
02:26:08,800 --> 02:26:12,560
call update empire page

3788
02:26:11,040 --> 02:26:15,359
using a router

3789
02:26:12,560 --> 02:26:15,359
it's pretty simple

3790
02:26:15,520 --> 02:26:21,359
now let's go ahead and let's uh

3791
02:26:18,640 --> 02:26:24,240
test this from the browser

3792
02:26:21,359 --> 02:26:25,280
so look at here update button is

3793
02:26:24,240 --> 02:26:27,680
appear

3794
02:26:25,280 --> 02:26:29,920
correspond to each employee

3795
02:26:27,680 --> 02:26:31,040
and once we click on update button

3796
02:26:29,920 --> 02:26:32,720
it is

3797
02:26:31,040 --> 02:26:34,880
navigating to

3798
02:26:32,720 --> 02:26:36,240
update employee page and look at here

3799
02:26:34,880 --> 02:26:37,680
the route

3800
02:26:36,240 --> 02:26:40,240
this is the route we have configured

3801
02:26:37,680 --> 02:26:44,399
right so update hyphen employee slash

3802
02:26:40,240 --> 02:26:47,280
2929 is id of particular employee

3803
02:26:44,399 --> 02:26:49,280
and this is the update employee page

3804
02:26:47,280 --> 02:26:52,160
now let's go back to the vs squad id and

3805
02:26:49,280 --> 02:26:53,840
let's design update employee page

3806
02:26:52,160 --> 02:26:54,880
in previous one of the video we have

3807
02:26:53,840 --> 02:26:56,160
created

3808
02:26:54,880 --> 02:26:58,560
uh you know

3809
02:26:56,160 --> 02:27:00,880
create employee form right and i have

3810
02:26:58,560 --> 02:27:03,200
explained you step by step how to design

3811
02:27:00,880 --> 02:27:05,520
a create employee form

3812
02:27:03,200 --> 02:27:08,800
and update employee form which uh which

3813
02:27:05,520 --> 02:27:12,160
looks similar to a create employee form

3814
02:27:08,800 --> 02:27:14,680
so let me just copy the whole

3815
02:27:12,160 --> 02:27:16,640
whole content of create employee

3816
02:27:14,680 --> 02:27:19,040
component.html page

3817
02:27:16,640 --> 02:27:22,160
and let's

3818
02:27:19,040 --> 02:27:24,960
open update employee component.html and

3819
02:27:22,160 --> 02:27:27,359
here i'm going to just paste it

3820
02:27:24,960 --> 02:27:29,760
and let's go and exchange accordingly so

3821
02:27:27,359 --> 02:27:33,040
let's change a page title from create

3822
02:27:29,760 --> 02:27:33,040
employee to update employee

3823
02:27:33,520 --> 02:27:36,560
well

3824
02:27:34,399 --> 02:27:39,520
you can use a single component to

3825
02:27:36,560 --> 02:27:41,760
perform create and update functionality

3826
02:27:39,520 --> 02:27:44,080
but to keep it simple i am going to use

3827
02:27:41,760 --> 02:27:47,600
separate update employee component to

3828
02:27:44,080 --> 02:27:48,720
perform update employee functionality

3829
02:27:47,600 --> 02:27:52,240
well

3830
02:27:48,720 --> 02:27:54,240
so this is the input field to handle

3831
02:27:52,240 --> 02:27:56,000
first name and this is the input field

3832
02:27:54,240 --> 02:27:57,600
to handle last name and this is input

3833
02:27:56,000 --> 02:28:01,200
build to a handle

3834
02:27:57,600 --> 02:28:03,600
employ a email id and this is the button

3835
02:28:01,200 --> 02:28:05,600
let's save the file and let's go back to

3836
02:28:03,600 --> 02:28:07,040
browser and let's see how this page

3837
02:28:05,600 --> 02:28:08,479
looks like

3838
02:28:07,040 --> 02:28:11,280
yeah here we go

3839
02:28:08,479 --> 02:28:13,280
update employee page

3840
02:28:11,280 --> 02:28:15,120
once i click on update button it should

3841
02:28:13,280 --> 02:28:16,479
navigate to the update empire page and

3842
02:28:15,120 --> 02:28:18,880
this is how the update employee page

3843
02:28:16,479 --> 02:28:18,880
looks like

3844
02:28:19,200 --> 02:28:22,720
well create employee and update employee

3845
02:28:21,120 --> 02:28:24,080
page both looks

3846
02:28:22,720 --> 02:28:26,160
same

3847
02:28:24,080 --> 02:28:28,160
and yes so you can use the same

3848
02:28:26,160 --> 02:28:29,840
component to perform both operations but

3849
02:28:28,160 --> 02:28:31,359
to keep it simple i have created a

3850
02:28:29,840 --> 02:28:35,200
separate update employee component to

3851
02:28:31,359 --> 02:28:37,040
perform update employee functionality

3852
02:28:35,200 --> 02:28:38,080
well in case of update we need to

3853
02:28:37,040 --> 02:28:40,640
populate

3854
02:28:38,080 --> 02:28:42,880
a particular employee data

3855
02:28:40,640 --> 02:28:44,479
in the form so that user can able to

3856
02:28:42,880 --> 02:28:45,840
update the employee right

3857
02:28:44,479 --> 02:28:48,640
so basically we

3858
02:28:45,840 --> 02:28:51,520
make a get employee by id sdpa call and

3859
02:28:48,640 --> 02:28:53,760
we pass this id to the rest api rest api

3860
02:28:51,520 --> 02:28:55,760
basically uh you know fetch the

3861
02:28:53,760 --> 02:28:58,080
particular employee by id from the

3862
02:28:55,760 --> 02:29:00,479
database and it will send that employee

3863
02:28:58,080 --> 02:29:03,280
data employee data in a response and we

3864
02:29:00,479 --> 02:29:05,840
populate that response employee data in

3865
02:29:03,280 --> 02:29:08,319
the update employee page

3866
02:29:05,840 --> 02:29:10,720
well in next video we'll make a get

3867
02:29:08,319 --> 02:29:13,520
employee by id rest api call

3868
02:29:10,720 --> 02:29:14,479
and we'll fetch a particular employee by

3869
02:29:13,520 --> 02:29:16,720
id

3870
02:29:14,479 --> 02:29:17,680
and then we populate that employee

3871
02:29:16,720 --> 02:29:19,359
in the

3872
02:29:17,680 --> 02:29:23,840
update employee page so that user can

3873
02:29:19,359 --> 02:29:23,840
able to update that particular employee

3874
02:29:27,439 --> 02:29:31,840
in previous video we have created update

3875
02:29:29,280 --> 02:29:33,760
empire component and we have configured

3876
02:29:31,840 --> 02:29:35,040
route for update employee component and

3877
02:29:33,760 --> 02:29:37,120
we have added

3878
02:29:35,040 --> 02:29:39,520
update button correspond to each

3879
02:29:37,120 --> 02:29:41,359
employee in employee list page and once

3880
02:29:39,520 --> 02:29:43,120
we click on update button

3881
02:29:41,359 --> 02:29:45,520
it should navigate to the update employ

3882
02:29:43,120 --> 02:29:46,560
page and we have also designed update

3883
02:29:45,520 --> 02:29:47,520
employee

3884
02:29:46,560 --> 02:29:49,840
form

3885
02:29:47,520 --> 02:29:52,720
in this video we'll make get employed by

3886
02:29:49,840 --> 02:29:54,479
id rest api and we populate that

3887
02:29:52,720 --> 02:29:56,560
particular employee

3888
02:29:54,479 --> 02:29:58,800
in the update employee form so that user

3889
02:29:56,560 --> 02:30:01,200
can able to update

3890
02:29:58,800 --> 02:30:03,200
the employee all right let's go ahead

3891
02:30:01,200 --> 02:30:05,200
and let's write the code

3892
02:30:03,200 --> 02:30:07,600
to make a rest api call

3893
02:30:05,200 --> 02:30:10,319
and we populate the response of the rest

3894
02:30:07,600 --> 02:30:13,439
api in the update employee page

3895
02:30:10,319 --> 02:30:15,120
let's head over to the vs code id

3896
02:30:13,439 --> 02:30:17,600
let's open

3897
02:30:15,120 --> 02:30:19,600
employee service and here we're gonna

3898
02:30:17,600 --> 02:30:23,120
write a rest client code which will make

3899
02:30:19,600 --> 02:30:27,760
a get employed by id rest api call

3900
02:30:23,120 --> 02:30:31,359
let's give a method name as get employee

3901
02:30:27,760 --> 02:30:33,280
by id something like this

3902
02:30:31,359 --> 02:30:37,280
and then we need to pass id to this

3903
02:30:33,280 --> 02:30:39,359
method and this is the type of number

3904
02:30:37,280 --> 02:30:42,160
followed by

3905
02:30:39,359 --> 02:30:42,160
observable

3906
02:30:42,479 --> 02:30:46,240
and then

3907
02:30:43,600 --> 02:30:48,240
we know that this this rest api returns

3908
02:30:46,240 --> 02:30:49,280
a employee object so let's go and let's

3909
02:30:48,240 --> 02:30:51,439
pass

3910
02:30:49,280 --> 02:30:53,680
a employee

3911
02:30:51,439 --> 02:30:55,040
employee model as a type to the

3912
02:30:53,680 --> 02:30:57,200
observable

3913
02:30:55,040 --> 02:31:00,200
class like

3914
02:30:57,200 --> 02:31:00,200
employee

3915
02:31:02,960 --> 02:31:07,120
and then just simply return

3916
02:31:05,760 --> 02:31:09,680
this dot

3917
02:31:07,120 --> 02:31:13,439
http client

3918
02:31:09,680 --> 02:31:15,920
and then call a get method

3919
02:31:13,439 --> 02:31:16,960
so we are making a get http request

3920
02:31:15,920 --> 02:31:19,600
right

3921
02:31:16,960 --> 02:31:21,280
and then we know that this rest api

3922
02:31:19,600 --> 02:31:24,240
returns empty object so let's go ahead

3923
02:31:21,280 --> 02:31:26,800
and let's pass employee

3924
02:31:24,240 --> 02:31:29,200
model as a type

3925
02:31:26,800 --> 02:31:30,479
followed by let's pass a parameters to

3926
02:31:29,200 --> 02:31:32,399
get method

3927
02:31:30,479 --> 02:31:35,280
notice here we are using backstick

3928
02:31:32,399 --> 02:31:35,280
within a backstick

3929
02:31:35,920 --> 02:31:43,680
we use dollar within the curly braces

3930
02:31:39,680 --> 02:31:45,200
we're gonna use this dot base url

3931
02:31:43,680 --> 02:31:46,960
followed by

3932
02:31:45,200 --> 02:31:48,160
slash

3933
02:31:46,960 --> 02:31:49,920
dollar

3934
02:31:48,160 --> 02:31:50,960
and within a currently basis just pass

3935
02:31:49,920 --> 02:31:52,640
the id

3936
02:31:50,960 --> 02:31:54,479
that's it

3937
02:31:52,640 --> 02:31:57,040
it's pretty simple right

3938
02:31:54,479 --> 02:31:59,359
now i'm gonna call this method from the

3939
02:31:57,040 --> 02:32:01,120
update employee component

3940
02:31:59,359 --> 02:32:02,479
well let's go and let's first inject

3941
02:32:01,120 --> 02:32:06,000
employee service

3942
02:32:02,479 --> 02:32:06,000
in update employee component

3943
02:32:06,399 --> 02:32:11,760
open up the template component and go to

3944
02:32:08,560 --> 02:32:15,040
the constructor just in inject

3945
02:32:11,760 --> 02:32:15,040
empire service over here

3946
02:32:18,160 --> 02:32:23,640
and make sure that employee service is

3947
02:32:19,920 --> 02:32:23,640
imported at the top

3948
02:32:25,600 --> 02:32:29,359
and let's go let's create an employer

3949
02:32:27,040 --> 02:32:31,760
property

3950
02:32:29,359 --> 02:32:33,680
employee

3951
02:32:31,760 --> 02:32:37,000
equals to

3952
02:32:33,680 --> 02:32:37,000
new employee

3953
02:32:38,240 --> 02:32:42,560
here we're going to make

3954
02:32:40,160 --> 02:32:46,160
a method call here employee service and

3955
02:32:42,560 --> 02:32:46,160
then get employee id

3956
02:32:48,080 --> 02:32:52,640
so look at here this is important

3957
02:32:50,479 --> 02:32:54,800
so get empire by id

3958
02:32:52,640 --> 02:32:56,720
method expects

3959
02:32:54,800 --> 02:32:58,960
uh id right

3960
02:32:56,720 --> 02:33:00,240
and we need to retrieve id from the

3961
02:32:58,960 --> 02:33:02,880
route

3962
02:33:00,240 --> 02:33:05,439
so let me show you how to do it

3963
02:33:02,880 --> 02:33:06,560
we'll use activated route

3964
02:33:05,439 --> 02:33:09,920
model

3965
02:33:06,560 --> 02:33:11,359
to retrieve id from the route

3966
02:33:09,920 --> 02:33:13,120
for example

3967
02:33:11,359 --> 02:33:15,120
in a browser you can just search for

3968
02:33:13,120 --> 02:33:16,560
activity route

3969
02:33:15,120 --> 02:33:21,080
in angular

3970
02:33:16,560 --> 02:33:21,080
and go to the activated route api

3971
02:33:21,600 --> 02:33:26,560
so basically activated route provides

3972
02:33:23,840 --> 02:33:28,720
access to information about a route

3973
02:33:26,560 --> 02:33:30,880
associated with a component that is

3974
02:33:28,720 --> 02:33:32,840
loaded in an outlet

3975
02:33:30,880 --> 02:33:35,840
and this activated route

3976
02:33:32,840 --> 02:33:38,880
provides a couple of methods like couple

3977
02:33:35,840 --> 02:33:40,880
of properties snapshot and params so we

3978
02:33:38,880 --> 02:33:43,520
use these properties to access id from

3979
02:33:40,880 --> 02:33:45,200
particular route

3980
02:33:43,520 --> 02:33:46,720
let's first

3981
02:33:45,200 --> 02:33:49,760
you know inject

3982
02:33:46,720 --> 02:33:52,160
activated route

3983
02:33:49,760 --> 02:33:53,600
private

3984
02:33:52,160 --> 02:33:56,880
let's call it as

3985
02:33:53,600 --> 02:33:58,399
route and then activated route

3986
02:33:56,880 --> 02:34:01,359
and make sure that activated route

3987
02:33:58,399 --> 02:34:03,680
should be imported from angular slash

3988
02:34:01,359 --> 02:34:05,359
router

3989
02:34:03,680 --> 02:34:08,080
and we're gonna use

3990
02:34:05,359 --> 02:34:09,840
a route here

3991
02:34:08,080 --> 02:34:11,280
so first i will create a property here

3992
02:34:09,840 --> 02:34:14,080
id

3993
02:34:11,280 --> 02:34:17,840
id should be a type of number

3994
02:34:14,080 --> 02:34:17,840
and then here i am going to assign

3995
02:34:19,200 --> 02:34:25,280
id from route to id property here

3996
02:34:22,640 --> 02:34:27,840
let's use this dot route

3997
02:34:25,280 --> 02:34:30,160
and then we have snapshot

3998
02:34:27,840 --> 02:34:31,359
and then we have parents pass the key

3999
02:34:30,160 --> 02:34:33,280
here to get

4000
02:34:31,359 --> 02:34:35,760
id value

4001
02:34:33,280 --> 02:34:38,160
that's it so this is how we get id from

4002
02:34:35,760 --> 02:34:40,479
particular route

4003
02:34:38,160 --> 02:34:42,640
using this syntax

4004
02:34:40,479 --> 02:34:44,880
so we use activated route it has

4005
02:34:42,640 --> 02:34:47,040
snapshot and parents properties

4006
02:34:44,880 --> 02:34:48,479
and we use these properties to access id

4007
02:34:47,040 --> 02:34:50,800
from the route

4008
02:34:48,479 --> 02:34:53,040
well now we can able to get id and we

4009
02:34:50,800 --> 02:34:55,120
can pass this id here

4010
02:34:53,040 --> 02:34:56,960
all right and just subscribe to this

4011
02:34:55,120 --> 02:34:59,200
method so it returns observable so we

4012
02:34:56,960 --> 02:35:01,439
can subscribe to it

4013
02:34:59,200 --> 02:35:04,560
and then handle the response data here

4014
02:35:01,439 --> 02:35:06,720
data arrow syntax

4015
02:35:04,560 --> 02:35:08,640
and then just assign data to the

4016
02:35:06,720 --> 02:35:12,640
employee property here

4017
02:35:08,640 --> 02:35:14,000
this dot employee equals to data

4018
02:35:12,640 --> 02:35:16,000
and here

4019
02:35:14,000 --> 02:35:18,080
we can also handle error response we

4020
02:35:16,000 --> 02:35:19,840
just print the error response here

4021
02:35:18,080 --> 02:35:22,479
like this

4022
02:35:19,840 --> 02:35:24,319
okay great and this employ property we

4023
02:35:22,479 --> 02:35:26,960
have used in

4024
02:35:24,319 --> 02:35:28,560
update employee page here

4025
02:35:26,960 --> 02:35:31,840
employee dot first name employee dot

4026
02:35:28,560 --> 02:35:34,240
last name and employee dot email id

4027
02:35:31,840 --> 02:35:36,640
well as soon as this employee

4028
02:35:34,240 --> 02:35:39,680
property is populated with data that

4029
02:35:36,640 --> 02:35:41,439
data will be reflected in the form

4030
02:35:39,680 --> 02:35:43,359
now let's save all the files and let's

4031
02:35:41,439 --> 02:35:44,640
go back to the browser and let's see how

4032
02:35:43,359 --> 02:35:46,800
it works

4033
02:35:44,640 --> 02:35:49,680
yeah here we go

4034
02:35:46,800 --> 02:35:51,600
the browser automatically refresh and it

4035
02:35:49,680 --> 02:35:54,240
internally made a get employee by direct

4036
02:35:51,600 --> 02:35:55,680
api and it will populated employee data

4037
02:35:54,240 --> 02:35:56,960
in the update employee

4038
02:35:55,680 --> 02:35:58,880
page

4039
02:35:56,960 --> 02:36:00,880
it means that we have successfully made

4040
02:35:58,880 --> 02:36:02,960
a get employee by direct api and we have

4041
02:36:00,880 --> 02:36:05,760
populated the response of get employed

4042
02:36:02,960 --> 02:36:07,760
by idealist api in update employee page

4043
02:36:05,760 --> 02:36:10,640
so let's go back to the employee list

4044
02:36:07,760 --> 02:36:13,280
page and if i click on update button of

4045
02:36:10,640 --> 02:36:14,880
particular employee let's say ramesh

4046
02:36:13,280 --> 02:36:16,880
employee

4047
02:36:14,880 --> 02:36:19,280
here here we go

4048
02:36:16,880 --> 02:36:21,120
the employee particular employee data is

4049
02:36:19,280 --> 02:36:22,479
you know updated successfully on update

4050
02:36:21,120 --> 02:36:24,880
employ page

4051
02:36:22,479 --> 02:36:26,880
now user can able to update the first

4052
02:36:24,880 --> 02:36:30,560
name last name

4053
02:36:26,880 --> 02:36:31,920
and email id and once user sub hit turn

4054
02:36:30,560 --> 02:36:33,680
submit button

4055
02:36:31,920 --> 02:36:36,319
we again make a sd pay call that is

4056
02:36:33,680 --> 02:36:38,000
update employees tp call we submit this

4057
02:36:36,319 --> 02:36:41,040
updated employee from data to the rest

4058
02:36:38,000 --> 02:36:42,800
api rest api internally store this data

4059
02:36:41,040 --> 02:36:45,280
into mysql database

4060
02:36:42,800 --> 02:36:48,240
so in next video we will make update

4061
02:36:45,280 --> 02:36:49,920
employees tpa call and will send this

4062
02:36:48,240 --> 02:36:53,200
updated employee form data to the rest

4063
02:36:49,920 --> 02:36:56,000
api and rest api will internally store

4064
02:36:53,200 --> 02:36:58,240
this data into mysql database all right

4065
02:36:56,000 --> 02:36:58,240
guys

4066
02:37:01,920 --> 02:37:06,640
in previous video we have made

4067
02:37:04,479 --> 02:37:09,120
get employee by id rest api and we have

4068
02:37:06,640 --> 02:37:10,880
populated a particular employee data in

4069
02:37:09,120 --> 02:37:13,359
update employee page

4070
02:37:10,880 --> 02:37:16,399
in this video we will make a update

4071
02:37:13,359 --> 02:37:18,319
employer sdp call and will send update

4072
02:37:16,399 --> 02:37:20,000
employee from data to the update

4073
02:37:18,319 --> 02:37:22,240
employee rest api and update employee

4074
02:37:20,000 --> 02:37:24,960
sdp internally store this update

4075
02:37:22,240 --> 02:37:26,640
employee data into mysql database

4076
02:37:24,960 --> 02:37:29,280
let's go ahead and let's write arrest

4077
02:37:26,640 --> 02:37:32,319
client code to make update employees dpi

4078
02:37:29,280 --> 02:37:33,920
let's head over to vs code id and let's

4079
02:37:32,319 --> 02:37:35,600
open

4080
02:37:33,920 --> 02:37:38,960
employee service

4081
02:37:35,600 --> 02:37:40,479
and here we are going to create a method

4082
02:37:38,960 --> 02:37:42,240
let's say update

4083
02:37:40,479 --> 02:37:44,880
employee

4084
02:37:42,240 --> 02:37:48,800
and this method takes two parameters

4085
02:37:44,880 --> 02:37:51,520
one is id of the particular employee

4086
02:37:48,800 --> 02:37:53,120
and second argument as

4087
02:37:51,520 --> 02:37:56,000
employee

4088
02:37:53,120 --> 02:37:56,000
updated data

4089
02:37:56,560 --> 02:38:01,760
and this is the type of

4090
02:37:58,399 --> 02:38:02,960
employee typescript class

4091
02:38:01,760 --> 02:38:05,120
followed by

4092
02:38:02,960 --> 02:38:06,880
colon and then observable

4093
02:38:05,120 --> 02:38:09,600
and here we can pass

4094
02:38:06,880 --> 02:38:11,200
object as a type

4095
02:38:09,600 --> 02:38:13,280
and then

4096
02:38:11,200 --> 02:38:15,200
we simply return

4097
02:38:13,280 --> 02:38:17,600
this dot

4098
02:38:15,200 --> 02:38:20,800
http client

4099
02:38:17,600 --> 02:38:24,240
and then this is a put http request so

4100
02:38:20,800 --> 02:38:25,359
let's call put method

4101
02:38:24,240 --> 02:38:27,280
and

4102
02:38:25,359 --> 02:38:30,479
use backstick

4103
02:38:27,280 --> 02:38:32,560
and dollar within a curly basis let's

4104
02:38:30,479 --> 02:38:34,319
call base url

4105
02:38:32,560 --> 02:38:36,720
and then

4106
02:38:34,319 --> 02:38:36,720
slash

4107
02:38:39,760 --> 02:38:43,439
and then dollar and let's access id

4108
02:38:42,240 --> 02:38:46,240
using

4109
02:38:43,439 --> 02:38:48,080
dollar curly braces like this

4110
02:38:46,240 --> 02:38:50,960
and let's pass second

4111
02:38:48,080 --> 02:38:52,000
argument as employee object that's it

4112
02:38:50,960 --> 02:38:54,160
guys

4113
02:38:52,000 --> 02:38:55,439
pretty simple

4114
02:38:54,160 --> 02:38:57,359
now i'm going to call this update

4115
02:38:55,439 --> 02:38:59,840
employee method

4116
02:38:57,359 --> 02:39:01,200
in update employee component let's head

4117
02:38:59,840 --> 02:39:03,280
over to the update template component

4118
02:39:01,200 --> 02:39:06,560
here

4119
02:39:03,280 --> 02:39:07,920
and we have update employee form right

4120
02:39:06,560 --> 02:39:11,520
and once we submit the update and

4121
02:39:07,920 --> 02:39:13,359
platform it will you know call

4122
02:39:11,520 --> 02:39:15,840
on submit

4123
02:39:13,359 --> 02:39:18,319
event handler so let's first

4124
02:39:15,840 --> 02:39:21,680
define this on submit event handler in

4125
02:39:18,319 --> 02:39:21,680
update employee component here

4126
02:39:23,439 --> 02:39:27,200
within our unsubmitted method

4127
02:39:25,520 --> 02:39:30,240
we're going to call

4128
02:39:27,200 --> 02:39:30,240
user service

4129
02:39:30,640 --> 02:39:34,319
and then we call

4130
02:39:32,399 --> 02:39:36,080
update empire method of user service

4131
02:39:34,319 --> 02:39:39,840
object

4132
02:39:36,080 --> 02:39:41,840
and update employee method expect two

4133
02:39:39,840 --> 02:39:43,840
arguments one is id and another is

4134
02:39:41,840 --> 02:39:46,160
employee object

4135
02:39:43,840 --> 02:39:49,040
so let's go ahead and let's pass id here

4136
02:39:46,160 --> 02:39:52,720
so ide how can we get id and we can get

4137
02:39:49,040 --> 02:39:55,120
id like this this dot id

4138
02:39:52,720 --> 02:39:56,160
comma this dot

4139
02:39:55,120 --> 02:39:58,479
employee

4140
02:39:56,160 --> 02:40:00,000
so this id we already got from the route

4141
02:39:58,479 --> 02:40:01,200
using this syntax

4142
02:40:00,000 --> 02:40:03,439
and

4143
02:40:01,200 --> 02:40:04,640
this is the employee object right

4144
02:40:03,439 --> 02:40:06,640
and this employee object will

4145
02:40:04,640 --> 02:40:07,680
automatically populated

4146
02:40:06,640 --> 02:40:11,760
by

4147
02:40:07,680 --> 02:40:13,680
angular using ng model directive

4148
02:40:11,760 --> 02:40:15,760
and we're gonna subscribe to this method

4149
02:40:13,680 --> 02:40:17,760
because if this method uh

4150
02:40:15,760 --> 02:40:19,680
returns observable

4151
02:40:17,760 --> 02:40:22,240
so we can subscribe and we can handle

4152
02:40:19,680 --> 02:40:23,760
those synchronous response

4153
02:40:22,240 --> 02:40:25,439
and followed by

4154
02:40:23,760 --> 02:40:26,880
handle a response inside subscribe

4155
02:40:25,439 --> 02:40:29,760
method like this

4156
02:40:26,880 --> 02:40:29,760
zero syntax

4157
02:40:30,160 --> 02:40:34,399
so once

4158
02:40:31,920 --> 02:40:36,880
employee updated successfully and we got

4159
02:40:34,399 --> 02:40:39,040
a success response from the rest api

4160
02:40:36,880 --> 02:40:41,520
then we'll navigate to the employee list

4161
02:40:39,040 --> 02:40:41,520
page right

4162
02:40:41,760 --> 02:40:46,640
so for that we need to write a route

4163
02:40:44,479 --> 02:40:49,600
here so that we should navigate to the

4164
02:40:46,640 --> 02:40:52,240
employee list page

4165
02:40:49,600 --> 02:40:54,720
so go to the create employee component

4166
02:40:52,240 --> 02:40:56,720
and here we have already written a code

4167
02:40:54,720 --> 02:40:59,520
let me just reuse this code

4168
02:40:56,720 --> 02:41:03,600
just copy and go to the again

4169
02:40:59,520 --> 02:41:06,000
update employee component paste it here

4170
02:41:03,600 --> 02:41:06,880
and first we need to inject a router

4171
02:41:06,000 --> 02:41:09,120
here

4172
02:41:06,880 --> 02:41:10,720
inside a constructor

4173
02:41:09,120 --> 02:41:13,920
private

4174
02:41:10,720 --> 02:41:18,160
router and then it's a router so make

4175
02:41:13,920 --> 02:41:20,479
sure that router is imported at the top

4176
02:41:18,160 --> 02:41:22,800
all right and we use navigate method of

4177
02:41:20,479 --> 02:41:25,520
router and then we pass

4178
02:41:22,800 --> 02:41:27,439
a path a particular route

4179
02:41:25,520 --> 02:41:29,439
which it navigate

4180
02:41:27,439 --> 02:41:31,279
okay for example this is the path we

4181
02:41:29,439 --> 02:41:33,200
have configured in app

4182
02:41:31,279 --> 02:41:35,200
routing model

4183
02:41:33,200 --> 02:41:37,920
this is and it will

4184
02:41:35,200 --> 02:41:40,399
render a corresponding component that is

4185
02:41:37,920 --> 02:41:41,680
employee list component

4186
02:41:40,399 --> 02:41:42,840
now let's go ahead and let's call this

4187
02:41:41,680 --> 02:41:46,720
method

4188
02:41:42,840 --> 02:41:49,439
here this dot

4189
02:41:46,720 --> 02:41:51,200
go to employee list

4190
02:41:49,439 --> 02:41:52,240
and here we can

4191
02:41:51,200 --> 02:41:54,399
handle

4192
02:41:52,240 --> 02:41:58,520
the error response like we can print

4193
02:41:54,399 --> 02:41:58,520
the error response to the console

4194
02:42:01,040 --> 02:42:06,880
all right pretty simple right

4195
02:42:03,760 --> 02:42:09,520
so we just call update employee method

4196
02:42:06,880 --> 02:42:12,319
of employee service class

4197
02:42:09,520 --> 02:42:14,399
and then we pass id and updated employee

4198
02:42:12,319 --> 02:42:16,800
object to the update employee method

4199
02:42:14,399 --> 02:42:19,359
and this is our synchronous call so it

4200
02:42:16,800 --> 02:42:20,640
returns observable so we subscribe to it

4201
02:42:19,359 --> 02:42:23,279
and we can handle the response

4202
02:42:20,640 --> 02:42:26,240
asynchronously and once we got success

4203
02:42:23,279 --> 02:42:28,319
response from the rest api we can call

4204
02:42:26,240 --> 02:42:30,160
you know uh

4205
02:42:28,319 --> 02:42:31,359
go to employee list method right

4206
02:42:30,160 --> 02:42:33,359
internally

4207
02:42:31,359 --> 02:42:35,520
uh you know it or it will route to the

4208
02:42:33,359 --> 02:42:37,279
employees page

4209
02:42:35,520 --> 02:42:38,880
well let's see all the files and let's

4210
02:42:37,279 --> 02:42:40,880
go back to browser and let's see how it

4211
02:42:38,880 --> 02:42:41,760
works

4212
02:42:40,880 --> 02:42:43,520
well

4213
02:42:41,760 --> 02:42:44,479
go to the employee list

4214
02:42:43,520 --> 02:42:45,840
page

4215
02:42:44,479 --> 02:42:48,160
let's go ahead and let's update one of

4216
02:42:45,840 --> 02:42:49,200
the employee i'm going to update admin

4217
02:42:48,160 --> 02:42:51,200
employee

4218
02:42:49,200 --> 02:42:52,399
click on update button and let's update

4219
02:42:51,200 --> 02:42:54,399
first name

4220
02:42:52,399 --> 02:42:56,640
from admin to

4221
02:42:54,399 --> 02:43:01,279
administrator

4222
02:42:56,640 --> 02:43:04,479
and email id from admin to administrator

4223
02:43:01,279 --> 02:43:04,479
and hit submit button

4224
02:43:04,800 --> 02:43:08,479
yeah here we go the employee is

4225
02:43:06,640 --> 02:43:09,760
successfully updated

4226
02:43:08,479 --> 02:43:11,920
the first name and email id is

4227
02:43:09,760 --> 02:43:13,120
successfully updated right

4228
02:43:11,920 --> 02:43:15,200
all right guys

4229
02:43:13,120 --> 02:43:17,760
we have successfully made update

4230
02:43:15,200 --> 02:43:19,200
employer hdpa call and we have sent

4231
02:43:17,760 --> 02:43:21,439
updated employee form data to the

4232
02:43:19,200 --> 02:43:23,760
updated employee rest api and employee

4233
02:43:21,439 --> 02:43:25,439
html internally store this data into a

4234
02:43:23,760 --> 02:43:27,279
mysql database

4235
02:43:25,439 --> 02:43:30,560
or guys we have successfully implemented

4236
02:43:27,279 --> 02:43:30,560
update employee functionality

4237
02:43:34,640 --> 02:43:40,800
let's develop delete employee rest api

4238
02:43:38,800 --> 02:43:42,399
go to the employee controller within

4239
02:43:40,800 --> 02:43:44,000
employee controller

4240
02:43:42,399 --> 02:43:46,800
we are going to develop

4241
02:43:44,000 --> 02:43:48,319
delete employee rest api

4242
02:43:46,800 --> 02:43:51,800
delete employee

4243
02:43:48,319 --> 02:43:51,800
rsd api

4244
02:43:52,000 --> 02:43:56,479
all right just follow the steps

4245
02:43:54,000 --> 02:43:59,200
just create a method first public

4246
02:43:56,479 --> 02:44:02,560
so we are going to return

4247
02:43:59,200 --> 02:44:05,600
a deleted employee with status

4248
02:44:02,560 --> 02:44:09,200
message right for that just type

4249
02:44:05,600 --> 02:44:10,960
just return a map as a response

4250
02:44:09,200 --> 02:44:13,680
just give key as

4251
02:44:10,960 --> 02:44:15,040
string and value as

4252
02:44:13,680 --> 02:44:17,439
boolean

4253
02:44:15,040 --> 02:44:18,800
and let's your method name as

4254
02:44:17,439 --> 02:44:20,800
delete

4255
02:44:18,800 --> 02:44:23,600
employee

4256
02:44:20,800 --> 02:44:23,600
and let's pass

4257
02:44:24,000 --> 02:44:27,920
id as method argument

4258
02:44:26,560 --> 02:44:30,080
long id

4259
02:44:27,920 --> 02:44:31,680
and let's use add the rate delete

4260
02:44:30,080 --> 02:44:34,000
mapping rotation so this method will

4261
02:44:31,680 --> 02:44:35,600
handle or delete http request for that

4262
02:44:34,000 --> 02:44:37,200
we are going to use address delete

4263
02:44:35,600 --> 02:44:39,120
mapping annotation

4264
02:44:37,200 --> 02:44:41,520
and let's go and let's configure

4265
02:44:39,120 --> 02:44:44,080
the rest endpoint url

4266
02:44:41,520 --> 02:44:46,479
employees slash

4267
02:44:44,080 --> 02:44:48,240
id as a path variable and now we are

4268
02:44:46,479 --> 02:44:50,560
going to map this id with the java

4269
02:44:48,240 --> 02:44:52,800
variable right that is a long type for

4270
02:44:50,560 --> 02:44:55,920
that we are going to use at the rate

4271
02:44:52,800 --> 02:44:58,080
path variable annotation

4272
02:44:55,920 --> 02:44:59,760
it's pretty simple so in order to delete

4273
02:44:58,080 --> 02:45:00,880
the employee first we need to get a

4274
02:44:59,760 --> 02:45:02,720
existing

4275
02:45:00,880 --> 02:45:06,080
employee with id right

4276
02:45:02,720 --> 02:45:06,080
so let me reuse this code

4277
02:45:07,840 --> 02:45:12,640
so first we will retrieve a employee

4278
02:45:10,720 --> 02:45:15,120
with the id

4279
02:45:12,640 --> 02:45:17,200
if employee with this particular id is

4280
02:45:15,120 --> 02:45:20,160
not existing database then we simply

4281
02:45:17,200 --> 02:45:22,319
throw the resource not one exception

4282
02:45:20,160 --> 02:45:24,160
it's pretty simple again we just simply

4283
02:45:22,319 --> 02:45:26,720
pass

4284
02:45:24,160 --> 02:45:28,399
the employee object to the delete method

4285
02:45:26,720 --> 02:45:30,479
so here we're going to use

4286
02:45:28,399 --> 02:45:32,399
the employee repository

4287
02:45:30,479 --> 02:45:34,560
and we're going to call

4288
02:45:32,399 --> 02:45:37,200
delete method and we pass import object

4289
02:45:34,560 --> 02:45:39,600
to the delete method so this will return

4290
02:45:37,200 --> 02:45:41,279
this will delete a particular employee

4291
02:45:39,600 --> 02:45:43,200
and look at here the return type delete

4292
02:45:41,279 --> 02:45:45,520
method it is a wide

4293
02:45:43,200 --> 02:45:45,520
okay

4294
02:45:45,600 --> 02:45:50,800
now what we'll do we'll simply create a

4295
02:45:47,359 --> 02:45:54,800
map object to simply return

4296
02:45:50,800 --> 02:45:58,479
like a message deleted as a true

4297
02:45:54,800 --> 02:46:00,080
key as a string and value as

4298
02:45:58,479 --> 02:46:03,439
boolean

4299
02:46:00,080 --> 02:46:05,920
so we need to notify to the client

4300
02:46:03,439 --> 02:46:07,600
uh something like the delete record is

4301
02:46:05,920 --> 02:46:09,359
deleted successfully right for that we

4302
02:46:07,600 --> 02:46:11,840
are going to just written

4303
02:46:09,359 --> 02:46:12,720
deleted as true or false

4304
02:46:11,840 --> 02:46:14,479
okay

4305
02:46:12,720 --> 02:46:15,920
and just give

4306
02:46:14,479 --> 02:46:18,880
reference

4307
02:46:15,920 --> 02:46:22,760
as a response and this is

4308
02:46:18,880 --> 02:46:22,760
acorsa hash map

4309
02:46:24,080 --> 02:46:30,240
response

4310
02:46:26,479 --> 02:46:32,640
dot put so let's put our entry here

4311
02:46:30,240 --> 02:46:34,080
so we're gonna say key as

4312
02:46:32,640 --> 02:46:36,840
deleted

4313
02:46:34,080 --> 02:46:39,120
the response as uh the value

4314
02:46:36,840 --> 02:46:40,800
as true

4315
02:46:39,120 --> 02:46:43,359
okay

4316
02:46:40,800 --> 02:46:43,359
and return

4317
02:46:45,439 --> 02:46:48,720
response entity

4318
02:46:47,840 --> 02:46:49,680
dot

4319
02:46:48,720 --> 02:46:53,040
okay

4320
02:46:49,680 --> 02:46:55,760
and just in a body just pass

4321
02:46:53,040 --> 02:46:55,760
a response

4322
02:46:59,439 --> 02:47:04,080
so again

4323
02:47:00,560 --> 02:47:04,080
we have to specify

4324
02:47:04,640 --> 02:47:10,960
response entity as a return type here

4325
02:47:08,960 --> 02:47:12,880
all right that is pretty much what we

4326
02:47:10,960 --> 02:47:14,960
have done

4327
02:47:12,880 --> 02:47:17,600
let me stop the server

4328
02:47:14,960 --> 02:47:19,600
we have retrieved a employee with id

4329
02:47:17,600 --> 02:47:22,080
particular id from the database if

4330
02:47:19,600 --> 02:47:24,000
record is not exist then we simply throw

4331
02:47:22,080 --> 02:47:26,080
the resource not found exception

4332
02:47:24,000 --> 02:47:28,399
and we have called a delete method of

4333
02:47:26,080 --> 02:47:31,279
employee repository and we pass

4334
02:47:28,399 --> 02:47:32,880
employee object to the delete method

4335
02:47:31,279 --> 02:47:35,279
this will delete a

4336
02:47:32,880 --> 02:47:37,520
you know employee and delete method does

4337
02:47:35,279 --> 02:47:38,720
not return anything so we simply create

4338
02:47:37,520 --> 02:47:41,279
a map

4339
02:47:38,720 --> 02:47:43,040
with a entry as deleted through and we

4340
02:47:41,279 --> 02:47:44,960
simply return that

4341
02:47:43,040 --> 02:47:47,040
map to the client

4342
02:47:44,960 --> 02:47:49,680
it's pretty simple rest api

4343
02:47:47,040 --> 02:47:51,760
now let's start our springboot project

4344
02:47:49,680 --> 02:47:54,080
and let us test

4345
02:47:51,760 --> 02:47:56,399
delete employer hdpi using postman rest

4346
02:47:54,080 --> 02:47:56,399
client

4347
02:47:57,200 --> 02:48:00,880
alright guys our application is up and

4348
02:47:59,120 --> 02:48:03,359
running on embedded tomcat server on

4349
02:48:00,880 --> 02:48:04,319
port 8080

4350
02:48:03,359 --> 02:48:06,160
now

4351
02:48:04,319 --> 02:48:07,600
we will delete a particular employee let

4352
02:48:06,160 --> 02:48:09,680
me show you

4353
02:48:07,600 --> 02:48:11,920
uh here in our mysql workbench so look

4354
02:48:09,680 --> 02:48:13,920
at here we have four records in a table

4355
02:48:11,920 --> 02:48:16,399
so we are going to delete

4356
02:48:13,920 --> 02:48:19,200
or record one uh

4357
02:48:16,399 --> 02:48:21,200
record with id one okay we're going to

4358
02:48:19,200 --> 02:48:23,520
delete this particular record

4359
02:48:21,200 --> 02:48:26,000
go back to the post manage client and go

4360
02:48:23,520 --> 02:48:27,600
to the new tab here and just type

4361
02:48:26,000 --> 02:48:31,200
localhost

4362
02:48:27,600 --> 02:48:31,200
slash 8080 slash api

4363
02:48:31,520 --> 02:48:35,439
and we are going to

4364
02:48:33,439 --> 02:48:38,160
call or delete rest api for that we are

4365
02:48:35,439 --> 02:48:39,200
going to choose a delete http method

4366
02:48:38,160 --> 02:48:40,960
here

4367
02:48:39,200 --> 02:48:44,000
and we are going to delete uh required

4368
02:48:40,960 --> 02:48:48,000
with id1 so lets pass one here as a path

4369
02:48:44,000 --> 02:48:51,359
variable and hit send button

4370
02:48:48,000 --> 02:48:53,439
so look at here the status 200 and

4371
02:48:51,359 --> 02:48:56,960
the record is successfully deleted and

4372
02:48:53,439 --> 02:49:00,080
we got deleted true as a response

4373
02:48:56,960 --> 02:49:02,479
let's verify it in a database

4374
02:49:00,080 --> 02:49:04,880
so let me quickly run this query select

4375
02:49:02,479 --> 02:49:06,560
query and look at here a particular

4376
02:49:04,880 --> 02:49:08,160
record is successfully deleted from the

4377
02:49:06,560 --> 02:49:09,359
table

4378
02:49:08,160 --> 02:49:11,520
let's

4379
02:49:09,359 --> 02:49:14,080
delete one more record so we are going

4380
02:49:11,520 --> 02:49:15,920
to delete a record with id2

4381
02:49:14,080 --> 02:49:18,479
so let's go back to the post manager

4382
02:49:15,920 --> 02:49:20,240
client and just pass to here

4383
02:49:18,479 --> 02:49:21,680
and hit send button

4384
02:49:20,240 --> 02:49:23,840
yeah here we go

4385
02:49:21,680 --> 02:49:25,760
we got a success response let's verify

4386
02:49:23,840 --> 02:49:29,040
let's execute select statement here we

4387
02:49:25,760 --> 02:49:31,680
go the record is deleted successfully

4388
02:49:29,040 --> 02:49:34,000
alright that is pretty much about delete

4389
02:49:31,680 --> 02:49:35,760
employee rest api we have successfully

4390
02:49:34,000 --> 02:49:38,560
developed delete

4391
02:49:35,760 --> 02:49:42,399
employee rest api and we have tested it

4392
02:49:38,560 --> 02:49:42,399
using postman arrest client

4393
02:49:45,840 --> 02:49:51,200
in previous video we have created delete

4394
02:49:48,640 --> 02:49:52,160
employee rest api in this video we are

4395
02:49:51,200 --> 02:49:53,680
going to

4396
02:49:52,160 --> 02:49:56,080
implement a daily temporary

4397
02:49:53,680 --> 02:49:58,319
functionality in angular application and

4398
02:49:56,080 --> 02:50:01,200
basically we consume delete employer

4399
02:49:58,319 --> 02:50:03,840
hdpi in our angular application

4400
02:50:01,200 --> 02:50:04,960
so in a employee list page

4401
02:50:03,840 --> 02:50:07,680
we add

4402
02:50:04,960 --> 02:50:09,760
a delete button in actions column once

4403
02:50:07,680 --> 02:50:12,319
we click on delete button it will make

4404
02:50:09,760 --> 02:50:14,880
our http call to delete a particular

4405
02:50:12,319 --> 02:50:16,880
employee from the database

4406
02:50:14,880 --> 02:50:18,240
well let's go and let's first add a

4407
02:50:16,880 --> 02:50:21,120
delete button

4408
02:50:18,240 --> 02:50:22,720
to employees list page here inside

4409
02:50:21,120 --> 02:50:23,760
actions column

4410
02:50:22,720 --> 02:50:25,600
and then

4411
02:50:23,760 --> 02:50:28,479
once we click on delete button it should

4412
02:50:25,600 --> 02:50:30,399
make a delete employer hdpa call

4413
02:50:28,479 --> 02:50:32,240
let's head over to the

4414
02:50:30,399 --> 02:50:35,520
visual studio code id

4415
02:50:32,240 --> 02:50:38,479
and go to the employees component.html

4416
02:50:35,520 --> 02:50:40,240
and here we're gonna add a button

4417
02:50:38,479 --> 02:50:42,880
so we have already added a button that

4418
02:50:40,240 --> 02:50:47,120
is update buttons similar to that

4419
02:50:42,880 --> 02:50:47,120
let's add a button that is delete button

4420
02:50:48,240 --> 02:50:53,600
and let's bind a click event to this

4421
02:50:51,279 --> 02:50:53,600
button

4422
02:50:53,760 --> 02:50:57,359
and here we have event handler name that

4423
02:50:56,319 --> 02:51:01,359
is

4424
02:50:57,359 --> 02:51:05,279
delete employee and within a parenthesis

4425
02:51:01,359 --> 02:51:07,439
we need to pass id that is employee id

4426
02:51:05,279 --> 02:51:09,200
and then add some bootstrap css classes

4427
02:51:07,439 --> 02:51:10,720
like

4428
02:51:09,200 --> 02:51:12,000
button

4429
02:51:10,720 --> 02:51:14,319
and then button

4430
02:51:12,000 --> 02:51:16,880
hyphen danger

4431
02:51:14,319 --> 02:51:18,880
give name to the button like delete

4432
02:51:16,880 --> 02:51:21,359
here remove this hyphen

4433
02:51:18,880 --> 02:51:23,760
so this class is different and button

4434
02:51:21,359 --> 02:51:26,479
hyphen danger class is different

4435
02:51:23,760 --> 02:51:29,920
and also add some inline

4436
02:51:26,479 --> 02:51:31,439
style here that is margin left 10

4437
02:51:29,920 --> 02:51:32,800
and let's

4438
02:51:31,439 --> 02:51:35,520
save the file and let's go back to the

4439
02:51:32,800 --> 02:51:37,520
browser so look at here now it's looking

4440
02:51:35,520 --> 02:51:39,760
good right

4441
02:51:37,520 --> 02:51:43,359
so look at here the putter uh you know

4442
02:51:39,760 --> 02:51:44,840
height is quite high so let me

4443
02:51:43,359 --> 02:51:50,279
reduce the height of the

4444
02:51:44,840 --> 02:51:50,279
putter so go to the styles.css

4445
02:51:52,080 --> 02:51:56,880
and this is the height is 70 pixel let's

4446
02:51:55,040 --> 02:51:58,720
go and let's give

4447
02:51:56,880 --> 02:52:00,640
40

4448
02:51:58,720 --> 02:52:02,319
all right and let's save the file and

4449
02:52:00,640 --> 02:52:04,399
let's go back to browser

4450
02:52:02,319 --> 02:52:07,040
yeah here we go the height of the footer

4451
02:52:04,399 --> 02:52:08,160
is reduced for now and it looks good

4452
02:52:07,040 --> 02:52:10,399
right

4453
02:52:08,160 --> 02:52:12,560
now once we click on delete button it

4454
02:52:10,399 --> 02:52:14,479
should make a rest api call right for

4455
02:52:12,560 --> 02:52:18,560
that let's go ahead and let's write a

4456
02:52:14,479 --> 02:52:21,359
rest client code to make a sdpa call

4457
02:52:18,560 --> 02:52:24,479
so this uh delete event handler we're

4458
02:52:21,359 --> 02:52:27,479
gonna define in a employees component

4459
02:52:24,479 --> 02:52:27,479
here

4460
02:52:28,160 --> 02:52:32,800
it expects id

4461
02:52:29,920 --> 02:52:32,800
of type number

4462
02:52:34,640 --> 02:52:37,840
well

4463
02:52:35,600 --> 02:52:39,680
so first we're gonna make a rest api

4464
02:52:37,840 --> 02:52:42,560
call for that we are going to write a

4465
02:52:39,680 --> 02:52:45,120
rest client code

4466
02:52:42,560 --> 02:52:46,960
so inside employee service we write the

4467
02:52:45,120 --> 02:52:49,279
rest client code right here

4468
02:52:46,960 --> 02:52:50,880
so first write a

4469
02:52:49,279 --> 02:52:52,880
rest client code which make a delete

4470
02:52:50,880 --> 02:52:53,680
employees api so let's go ahead and

4471
02:52:52,880 --> 02:52:56,880
let's

4472
02:52:53,680 --> 02:53:00,560
create a method like delete employee

4473
02:52:56,880 --> 02:53:04,000
and then pass id to this method like

4474
02:53:00,560 --> 02:53:04,000
id colon number

4475
02:53:04,240 --> 02:53:09,080
followed by colon and then observable

4476
02:53:12,800 --> 02:53:16,800
and you can pass object as a type

4477
02:53:18,399 --> 02:53:21,680
and then simply return

4478
02:53:22,000 --> 02:53:26,160
this dot

4479
02:53:23,600 --> 02:53:28,479
http client

4480
02:53:26,160 --> 02:53:30,560
followed by call delete method so we are

4481
02:53:28,479 --> 02:53:32,160
making a delete http request so let's

4482
02:53:30,560 --> 02:53:34,640
call delete

4483
02:53:32,160 --> 02:53:36,960
and backstick

4484
02:53:34,640 --> 02:53:40,160
dollar within a curly braces

4485
02:53:36,960 --> 02:53:40,160
just call the base url

4486
02:53:42,080 --> 02:53:47,600
and followed by slash

4487
02:53:45,520 --> 02:53:49,200
dollar and within a curly basis just

4488
02:53:47,600 --> 02:53:51,279
pass the id

4489
02:53:49,200 --> 02:53:53,439
it's pretty simple right

4490
02:53:51,279 --> 02:53:55,279
and save the file

4491
02:53:53,439 --> 02:53:58,640
and let's use this delete employee

4492
02:53:55,279 --> 02:54:01,760
method inside employees component

4493
02:53:58,640 --> 02:54:03,520
so this is the delete event you know

4494
02:54:01,760 --> 02:54:05,279
event handler right so this we have

4495
02:54:03,520 --> 02:54:08,800
already bind in

4496
02:54:05,279 --> 02:54:11,120
a button in employee list component here

4497
02:54:08,800 --> 02:54:13,120
so once we click on this button

4498
02:54:11,120 --> 02:54:15,920
delete button it will call delete

4499
02:54:13,120 --> 02:54:17,520
employee event handler and this delete

4500
02:54:15,920 --> 02:54:19,120
employment handler we have defined in

4501
02:54:17,520 --> 02:54:22,720
employees component

4502
02:54:19,120 --> 02:54:24,080
inside a delete empire event handler

4503
02:54:22,720 --> 02:54:26,640
we're gonna use

4504
02:54:24,080 --> 02:54:26,640
this dot

4505
02:54:27,120 --> 02:54:31,040
employee service and we call a delete

4506
02:54:29,359 --> 02:54:34,319
employee

4507
02:54:31,040 --> 02:54:36,880
method and just we pass the id

4508
02:54:34,319 --> 02:54:38,880
and then we subscribe to this method as

4509
02:54:36,880 --> 02:54:40,319
it returns observable

4510
02:54:38,880 --> 02:54:42,160
and we can handle responses

4511
02:54:40,319 --> 02:54:44,640
synchronously

4512
02:54:42,160 --> 02:54:46,319
and handle the data here response data

4513
02:54:44,640 --> 02:54:49,120
like this

4514
02:54:46,319 --> 02:54:52,319
so after successful deletion

4515
02:54:49,120 --> 02:54:54,160
we're gonna navigate to the

4516
02:54:52,319 --> 02:54:56,080
list employees page right for that i'm

4517
02:54:54,160 --> 02:54:58,160
going to call

4518
02:54:56,080 --> 02:54:59,279
get employees

4519
02:54:58,160 --> 02:55:00,840
method

4520
02:54:59,279 --> 02:55:04,160
it's pretty

4521
02:55:00,840 --> 02:55:05,680
simple all right and this data we can

4522
02:55:04,160 --> 02:55:08,240
simply

4523
02:55:05,680 --> 02:55:08,240
log here

4524
02:55:11,200 --> 02:55:13,600
all right

4525
02:55:13,760 --> 02:55:18,080
now let's go and let's test our daily

4526
02:55:15,840 --> 02:55:19,439
template functionality from the

4527
02:55:18,080 --> 02:55:20,800
browser

4528
02:55:19,439 --> 02:55:22,960
let's save all the files and let's go

4529
02:55:20,800 --> 02:55:24,479
back to the browser

4530
02:55:22,960 --> 02:55:26,319
and let's go ahead and let's delete one

4531
02:55:24,479 --> 02:55:29,200
of the employee

4532
02:55:26,319 --> 02:55:31,920
let's say prabhas

4533
02:55:29,200 --> 02:55:33,439
so hit delete button

4534
02:55:31,920 --> 02:55:35,600
yeah so probably employee is

4535
02:55:33,439 --> 02:55:36,960
successfully deleted let me delete one

4536
02:55:35,600 --> 02:55:39,520
more employee

4537
02:55:36,960 --> 02:55:40,720
let me delete this ram employee

4538
02:55:39,520 --> 02:55:42,640
yeah so ram employee is also

4539
02:55:40,720 --> 02:55:45,600
successfully deleted let me delete one

4540
02:55:42,640 --> 02:55:47,760
more employee john yeah here we go

4541
02:55:45,600 --> 02:55:51,439
it means that our delete employee

4542
02:55:47,760 --> 02:55:53,200
functionality is working as expected

4543
02:55:51,439 --> 02:55:55,840
all right guys so far we have

4544
02:55:53,200 --> 02:55:57,600
implemented create employee list

4545
02:55:55,840 --> 02:55:59,200
employee update employee and delete

4546
02:55:57,600 --> 02:56:01,040
employee

4547
02:55:59,200 --> 02:56:03,040
in next video

4548
02:56:01,040 --> 02:56:05,680
we'll implement weave employee details

4549
02:56:03,040 --> 02:56:05,680
functionality

4550
02:56:09,680 --> 02:56:13,760
alright guys so far we have implemented

4551
02:56:12,240 --> 02:56:16,319
four functionalities

4552
02:56:13,760 --> 02:56:20,160
employee list add employee

4553
02:56:16,319 --> 02:56:22,479
update employee and delete employee

4554
02:56:20,160 --> 02:56:24,560
in this video we're gonna implement view

4555
02:56:22,479 --> 02:56:27,120
employee details functionality so

4556
02:56:24,560 --> 02:56:28,720
basically we add view button in actions

4557
02:56:27,120 --> 02:56:30,720
column

4558
02:56:28,720 --> 02:56:32,640
once we click on v button

4559
02:56:30,720 --> 02:56:34,720
it will navigate to the vmware details

4560
02:56:32,640 --> 02:56:36,960
page over there we can able to see a

4561
02:56:34,720 --> 02:56:38,000
particular employee details

4562
02:56:36,960 --> 02:56:39,920
all right

4563
02:56:38,000 --> 02:56:41,840
let's head over to the vs code id and

4564
02:56:39,920 --> 02:56:44,640
let's quickly create a view empire

4565
02:56:41,840 --> 02:56:46,720
details component and let's design a

4566
02:56:44,640 --> 02:56:49,040
vmware component template to show a

4567
02:56:46,720 --> 02:56:51,040
particular employee details

4568
02:56:49,040 --> 02:56:54,040
all right let's head over to the vs code

4569
02:56:51,040 --> 02:56:54,040
id

4570
02:56:54,399 --> 02:56:58,960
inside integrated terminal

4571
02:56:56,640 --> 02:57:00,640
make sure that you are in a root folder

4572
02:56:58,960 --> 02:57:02,880
of our application that is angular

4573
02:57:00,640 --> 02:57:06,160
hyphen front end

4574
02:57:02,880 --> 02:57:09,600
and just enter angular cli command

4575
02:57:06,160 --> 02:57:11,520
ng followed by g g for generate c for

4576
02:57:09,600 --> 02:57:13,600
component followed by a name of the

4577
02:57:11,520 --> 02:57:16,479
component let's say

4578
02:57:13,600 --> 02:57:16,479
employee details

4579
02:57:16,960 --> 02:57:20,279
hit enter

4580
02:57:22,240 --> 02:57:26,720
so this command

4581
02:57:23,760 --> 02:57:30,160
created four files and

4582
02:57:26,720 --> 02:57:31,840
it also updated app models

4583
02:57:30,160 --> 02:57:34,640
file

4584
02:57:31,840 --> 02:57:38,000
all right so if you expand

4585
02:57:34,640 --> 02:57:39,840
app folder inside app folder you can see

4586
02:57:38,000 --> 02:57:42,000
employee details folder is created

4587
02:57:39,840 --> 02:57:43,120
within amp details four files are

4588
02:57:42,000 --> 02:57:44,880
generated

4589
02:57:43,120 --> 02:57:46,880
and also

4590
02:57:44,880 --> 02:57:49,200
app model

4591
02:57:46,880 --> 02:57:51,040
is also you know updated with newly

4592
02:57:49,200 --> 02:57:53,439
created component

4593
02:57:51,040 --> 02:57:55,760
in declarations array

4594
02:57:53,439 --> 02:57:58,640
so whenever we create a component using

4595
02:57:55,760 --> 02:58:00,880
angular cli angular cli automatically

4596
02:57:58,640 --> 02:58:03,920
configure a component for that

4597
02:58:00,880 --> 02:58:08,080
particular model so in our application

4598
02:58:03,920 --> 02:58:09,200
we have only one model that is app model

4599
02:58:08,080 --> 02:58:11,680
all right

4600
02:58:09,200 --> 02:58:15,840
now let's go ahead and let's configure a

4601
02:58:11,680 --> 02:58:19,760
route for employee details component

4602
02:58:15,840 --> 02:58:21,760
go to the app routing model and here

4603
02:58:19,760 --> 02:58:24,640
we're gonna create a javascript object

4604
02:58:21,760 --> 02:58:26,000
within a route array and we configure

4605
02:58:24,640 --> 02:58:28,479
route for

4606
02:58:26,000 --> 02:58:31,200
employed it as component

4607
02:58:28,479 --> 02:58:34,399
let's create a javascript object

4608
02:58:31,200 --> 02:58:34,399
with property path

4609
02:58:35,680 --> 02:58:39,920
and let's give path as

4610
02:58:38,160 --> 02:58:42,399
employee

4611
02:58:39,920 --> 02:58:42,399
details

4612
02:58:43,120 --> 02:58:47,520
and we need to get a idea right idea of

4613
02:58:46,000 --> 02:58:49,439
particular employee

4614
02:58:47,520 --> 02:58:50,880
so we're going to show a particular

4615
02:58:49,439 --> 02:58:52,399
employee details right for that we're

4616
02:58:50,880 --> 02:58:54,720
going to need id of that particular

4617
02:58:52,399 --> 02:58:57,040
employee

4618
02:58:54,720 --> 02:58:59,120
and then

4619
02:58:57,040 --> 02:59:01,439
corresponding we define corresponding

4620
02:58:59,120 --> 02:59:04,960
component here that is

4621
02:59:01,439 --> 02:59:04,960
employee details component

4622
02:59:08,080 --> 02:59:12,640
that's it guys

4623
02:59:09,680 --> 02:59:12,640
it's very simple

4624
02:59:13,600 --> 02:59:18,960
so once we configure route next we

4625
02:59:16,240 --> 02:59:20,000
create a view button inside a employee

4626
02:59:18,960 --> 02:59:21,680
list

4627
02:59:20,000 --> 02:59:23,600
template

4628
02:59:21,680 --> 02:59:26,720
let's head over to the employee list

4629
02:59:23,600 --> 02:59:29,520
folder within employees folder we have

4630
02:59:26,720 --> 02:59:32,240
employee employees component template

4631
02:59:29,520 --> 02:59:34,800
and here we have a table right within a

4632
02:59:32,240 --> 02:59:36,720
table we have actions column

4633
02:59:34,800 --> 02:59:39,120
and within access column

4634
02:59:36,720 --> 02:59:40,800
we have already defined update and

4635
02:59:39,120 --> 02:59:42,800
delete button so along with these

4636
02:59:40,800 --> 02:59:44,080
buttons we'll also create one more

4637
02:59:42,800 --> 02:59:45,279
button that is

4638
02:59:44,080 --> 02:59:47,520
wave button

4639
02:59:45,279 --> 02:59:48,960
let me copy this existing delete button

4640
02:59:47,520 --> 02:59:51,600
and paste it here

4641
02:59:48,960 --> 02:59:53,600
and let me change it accordingly let's

4642
02:59:51,600 --> 02:59:55,520
give button name as

4643
02:59:53,600 --> 02:59:57,680
view

4644
02:59:55,520 --> 02:59:59,439
and let's change

4645
02:59:57,680 --> 03:00:01,520
our event handler

4646
02:59:59,439 --> 03:00:02,720
name here so this is

4647
03:00:01,520 --> 03:00:04,080
the on click

4648
03:00:02,720 --> 03:00:06,640
event

4649
03:00:04,080 --> 03:00:08,399
handler and here we're gonna change the

4650
03:00:06,640 --> 03:00:11,760
event handler name

4651
03:00:08,399 --> 03:00:14,000
something like

4652
03:00:11,760 --> 03:00:16,399
employee details

4653
03:00:14,000 --> 03:00:19,279
pretty simple

4654
03:00:16,399 --> 03:00:21,760
and once we click on this v button

4655
03:00:19,279 --> 03:00:23,279
this event handler will get called and

4656
03:00:21,760 --> 03:00:24,399
let's go and let's define this event

4657
03:00:23,279 --> 03:00:25,120
handler

4658
03:00:24,399 --> 03:00:28,319
in

4659
03:00:25,120 --> 03:00:28,319
invalid component

4660
03:00:31,359 --> 03:00:36,000
employ details

4661
03:00:32,880 --> 03:00:38,640
and then we need to get the id right

4662
03:00:36,000 --> 03:00:39,920
id of type number

4663
03:00:38,640 --> 03:00:41,920
and then

4664
03:00:39,920 --> 03:00:44,160
once we click on view button we should

4665
03:00:41,920 --> 03:00:46,080
be able to navigate to the vmware

4666
03:00:44,160 --> 03:00:47,840
details page right

4667
03:00:46,080 --> 03:00:49,920
for that we're going to use a route and

4668
03:00:47,840 --> 03:00:52,560
we have already defined a route

4669
03:00:49,920 --> 03:00:55,200
in one of the previous video for

4670
03:00:52,560 --> 03:00:58,800
uh you know for update operation let me

4671
03:00:55,200 --> 03:01:00,880
just copy the existing line of code

4672
03:00:58,800 --> 03:01:03,840
paste it here

4673
03:01:00,880 --> 03:01:06,479
and let me change the route name

4674
03:01:03,840 --> 03:01:09,520
right name route name we have the

4675
03:01:06,479 --> 03:01:09,520
employee details right

4676
03:01:09,840 --> 03:01:12,080
employee

4677
03:01:11,040 --> 03:01:14,880
details

4678
03:01:12,080 --> 03:01:16,640
it's very simple so this is the route

4679
03:01:14,880 --> 03:01:18,399
path we have defined

4680
03:01:16,640 --> 03:01:21,279
in app model

4681
03:01:18,399 --> 03:01:23,120
app routing module this is

4682
03:01:21,279 --> 03:01:26,080
and this is the id

4683
03:01:23,120 --> 03:01:28,560
and that id we pass it here

4684
03:01:26,080 --> 03:01:30,880
all right great

4685
03:01:28,560 --> 03:01:34,200
now let's save the file and let's head

4686
03:01:30,880 --> 03:01:34,200
over to the browser

4687
03:01:34,560 --> 03:01:39,279
and look at here view button is added

4688
03:01:36,880 --> 03:01:42,720
let me change the bootstrap css

4689
03:01:39,279 --> 03:01:42,720
class for view button

4690
03:01:44,319 --> 03:01:50,080
so instead of danger

4691
03:01:46,160 --> 03:01:51,680
let's say info and save the file let's

4692
03:01:50,080 --> 03:01:52,800
go back to browser

4693
03:01:51,680 --> 03:01:54,960
yeah

4694
03:01:52,800 --> 03:01:58,560
so once we click on

4695
03:01:54,960 --> 03:02:00,399
view button we should navigate to the

4696
03:01:58,560 --> 03:02:03,120
we employ details page

4697
03:02:00,399 --> 03:02:05,439
all right and look at here the url

4698
03:02:03,120 --> 03:02:06,240
so this is the path we have configured

4699
03:02:05,439 --> 03:02:07,920
in

4700
03:02:06,240 --> 03:02:10,640
app routing model right and this is the

4701
03:02:07,920 --> 03:02:13,359
id of that particular employee

4702
03:02:10,640 --> 03:02:15,840
well now what we will do we will design

4703
03:02:13,359 --> 03:02:18,000
a vampire details page and we'll make

4704
03:02:15,840 --> 03:02:20,640
our sdpa call and we pass this id to the

4705
03:02:18,000 --> 03:02:22,720
rest api rest api will return a employee

4706
03:02:20,640 --> 03:02:24,720
object of this particular id and will

4707
03:02:22,720 --> 03:02:26,240
populate the template object

4708
03:02:24,720 --> 03:02:30,120
on this page

4709
03:02:26,240 --> 03:02:30,120
alright great

4710
03:02:32,160 --> 03:02:36,720
go to the employee details component and

4711
03:02:34,960 --> 03:02:39,040
let's go and let's define a properties

4712
03:02:36,720 --> 03:02:41,200
inside a component that is id of type

4713
03:02:39,040 --> 03:02:42,960
number

4714
03:02:41,200 --> 03:02:46,000
and then

4715
03:02:42,960 --> 03:02:48,479
define employee property

4716
03:02:46,000 --> 03:02:48,479
of type

4717
03:02:48,560 --> 03:02:53,279
employee typescript class

4718
03:02:50,880 --> 03:02:55,680
now inside a component we need to

4719
03:02:53,279 --> 03:02:57,920
retrieve id right id of that particular

4720
03:02:55,680 --> 03:02:59,920
employee for example so look at here

4721
03:02:57,920 --> 03:03:00,800
this is the url and we need to get this

4722
03:02:59,920 --> 03:03:02,560
id

4723
03:03:00,800 --> 03:03:05,279
inside a component

4724
03:03:02,560 --> 03:03:07,680
for that we are going to use route

4725
03:03:05,279 --> 03:03:09,840
so in one of the previous video uh i

4726
03:03:07,680 --> 03:03:11,680
have shown you how to use activity route

4727
03:03:09,840 --> 03:03:14,000
to get this id

4728
03:03:11,680 --> 03:03:16,240
so similarly let's go and let's use

4729
03:03:14,000 --> 03:03:18,160
activated route to get this id from the

4730
03:03:16,240 --> 03:03:19,439
route

4731
03:03:18,160 --> 03:03:24,359
let's inject

4732
03:03:19,439 --> 03:03:24,359
activated route in this component

4733
03:03:26,240 --> 03:03:31,760
activity route

4734
03:03:28,960 --> 03:03:33,120
and using route we can

4735
03:03:31,760 --> 03:03:34,880
get the id

4736
03:03:33,120 --> 03:03:36,800
from the route

4737
03:03:34,880 --> 03:03:40,720
id equals to

4738
03:03:36,800 --> 03:03:43,120
this dot id equals to

4739
03:03:40,720 --> 03:03:43,120
route

4740
03:03:45,200 --> 03:03:47,600
and then

4741
03:03:48,800 --> 03:03:51,920
snapshot

4742
03:03:50,080 --> 03:03:55,359
and then params

4743
03:03:51,920 --> 03:03:57,760
and here we can pass the id

4744
03:03:55,359 --> 03:03:59,680
so this will give you the id of that

4745
03:03:57,760 --> 03:04:00,640
particular route

4746
03:03:59,680 --> 03:04:03,279
okay

4747
03:04:00,640 --> 03:04:04,960
so once we got the id we can pass this

4748
03:04:03,279 --> 03:04:07,040
id to the rest api and the sdp will

4749
03:04:04,960 --> 03:04:09,520
return our employee object updates

4750
03:04:07,040 --> 03:04:11,680
particular ide

4751
03:04:09,520 --> 03:04:14,960
so within an employee service we have

4752
03:04:11,680 --> 03:04:17,120
already created get employee by idsd

4753
03:04:14,960 --> 03:04:19,760
method right which will internally make

4754
03:04:17,120 --> 03:04:21,760
get get employee by id rest api let's go

4755
03:04:19,760 --> 03:04:23,359
and let's call this method to get a

4756
03:04:21,760 --> 03:04:25,040
particular employee

4757
03:04:23,359 --> 03:04:27,200
by ide

4758
03:04:25,040 --> 03:04:29,600
all right let's go let's inject

4759
03:04:27,200 --> 03:04:33,120
employees service

4760
03:04:29,600 --> 03:04:35,279
in employee details component

4761
03:04:33,120 --> 03:04:37,520
then a constructor

4762
03:04:35,279 --> 03:04:40,399
private

4763
03:04:37,520 --> 03:04:40,399
employee service

4764
03:04:40,800 --> 03:04:44,000
learning by service

4765
03:04:44,479 --> 03:04:48,800
now let's use employee service

4766
03:04:47,040 --> 03:04:50,880
here

4767
03:04:48,800 --> 03:04:53,920
so first we're gonna define

4768
03:04:50,880 --> 03:04:53,920
the empire object right

4769
03:04:54,080 --> 03:04:57,359
new and then apply

4770
03:04:58,720 --> 03:05:04,319
and here let's use this dot

4771
03:05:02,240 --> 03:05:06,479
empire service and then call the method

4772
03:05:04,319 --> 03:05:08,720
get your club id and let's pass the id

4773
03:05:06,479 --> 03:05:08,720
here

4774
03:05:09,120 --> 03:05:14,880
and this method returns

4775
03:05:11,439 --> 03:05:17,760
observable so let's use a subscribe

4776
03:05:14,880 --> 03:05:19,600
method to subscribe to the observable

4777
03:05:17,760 --> 03:05:21,439
and inside this

4778
03:05:19,600 --> 03:05:23,200
subscribe method we can handle the

4779
03:05:21,439 --> 03:05:26,319
response this is our basically our

4780
03:05:23,200 --> 03:05:28,880
circular response

4781
03:05:26,319 --> 03:05:32,920
now let's assign a response of the rest

4782
03:05:28,880 --> 03:05:32,920
api to the employee object

4783
03:05:33,200 --> 03:05:37,600
now once we got a response

4784
03:05:35,120 --> 03:05:38,800
of rest api and we populate that

4785
03:05:37,600 --> 03:05:40,080
response

4786
03:05:38,800 --> 03:05:42,560
in employee

4787
03:05:40,080 --> 03:05:44,960
object let's go to the employee details

4788
03:05:42,560 --> 03:05:48,240
component template and here we're gonna

4789
03:05:44,960 --> 03:05:49,520
design we employ details page

4790
03:05:48,240 --> 03:05:51,200
let's say

4791
03:05:49,520 --> 03:05:52,399
header of the page

4792
03:05:51,200 --> 03:05:53,840
like

4793
03:05:52,399 --> 03:05:57,040
we employee

4794
03:05:53,840 --> 03:05:57,040
details something like this

4795
03:05:58,240 --> 03:06:02,399
and then followed by the due

4796
03:06:02,800 --> 03:06:06,080
now let's create one more due

4797
03:06:07,279 --> 03:06:10,319
let's create a label

4798
03:06:11,279 --> 03:06:15,840
and

4799
03:06:13,520 --> 03:06:17,439
this is the bold element html element

4800
03:06:15,840 --> 03:06:21,600
and then

4801
03:06:17,439 --> 03:06:23,439
let's give label name as first name

4802
03:06:21,600 --> 03:06:25,840
and then let's use

4803
03:06:23,439 --> 03:06:28,160
angular interpolation to access the

4804
03:06:25,840 --> 03:06:31,120
property of the component

4805
03:06:28,160 --> 03:06:32,000
so this is the employee

4806
03:06:31,120 --> 03:06:34,479
dot

4807
03:06:32,000 --> 03:06:37,200
first name

4808
03:06:34,479 --> 03:06:39,279
so this is the employee property we have

4809
03:06:37,200 --> 03:06:41,279
defined in a component right

4810
03:06:39,279 --> 03:06:43,520
empirical component and this employee

4811
03:06:41,279 --> 03:06:46,640
property we are going to access

4812
03:06:43,520 --> 03:06:48,160
in a component template like this

4813
03:06:46,640 --> 03:06:49,920
okay

4814
03:06:48,160 --> 03:06:52,160
now similarly let's go ahead and let's

4815
03:06:49,920 --> 03:06:55,520
display employee last name and email id

4816
03:06:52,160 --> 03:06:58,240
as well let me copy and paste twice here

4817
03:06:55,520 --> 03:07:01,200
and let me change the label

4818
03:06:58,240 --> 03:07:02,800
last name and here let's

4819
03:07:01,200 --> 03:07:05,520
change the property

4820
03:07:02,800 --> 03:07:08,160
employer employee dot last name

4821
03:07:05,520 --> 03:07:11,600
and this is

4822
03:07:08,160 --> 03:07:13,760
email id right email id

4823
03:07:11,600 --> 03:07:15,200
and this is the

4824
03:07:13,760 --> 03:07:17,359
email id

4825
03:07:15,200 --> 03:07:20,000
it's pretty simple

4826
03:07:17,359 --> 03:07:21,760
let's save the files and let's go back

4827
03:07:20,000 --> 03:07:24,240
to the browser and let's see how it

4828
03:07:21,760 --> 03:07:26,640
works

4829
03:07:24,240 --> 03:07:28,640
yeah it is working

4830
03:07:26,640 --> 03:07:29,760
let me go to the employee list

4831
03:07:28,640 --> 03:07:31,439
page

4832
03:07:29,760 --> 03:07:34,080
from here

4833
03:07:31,439 --> 03:07:35,359
if i want to see a john cena employee

4834
03:07:34,080 --> 03:07:37,200
details

4835
03:07:35,359 --> 03:07:39,040
then i can click on view button and i

4836
03:07:37,200 --> 03:07:42,160
can able to see

4837
03:07:39,040 --> 03:07:43,840
a johnson empire details here

4838
03:07:42,160 --> 03:07:46,160
all right

4839
03:07:43,840 --> 03:07:49,359
all right guys we have successfully

4840
03:07:46,160 --> 03:07:51,760
implemented we apply details

4841
03:07:49,359 --> 03:07:53,359
let me quickly add a employee here

4842
03:07:51,760 --> 03:07:54,800
ram

4843
03:07:53,359 --> 03:07:56,880
over

4844
03:07:54,800 --> 03:07:58,960
ramadridgeman.com

4845
03:07:56,880 --> 03:08:01,279
hit submit and

4846
03:07:58,960 --> 03:08:03,840
let's say i want to view

4847
03:08:01,279 --> 03:08:05,120
ram employee details then i can click on

4848
03:08:03,840 --> 03:08:06,960
view button

4849
03:08:05,120 --> 03:08:09,520
and i can see

4850
03:08:06,960 --> 03:08:11,359
all the details of ram employee in a

4851
03:08:09,520 --> 03:08:12,800
separate page and if you want to

4852
03:08:11,359 --> 03:08:14,720
navigate to the employee list you can

4853
03:08:12,800 --> 03:08:16,080
click on employee list here

4854
03:08:14,720 --> 03:08:17,200
all right guys we have successfully

4855
03:08:16,080 --> 03:08:18,720
implemented

4856
03:08:17,200 --> 03:08:21,720
view employee details

4857
03:08:18,720 --> 03:08:21,720
functionality

4858
03:08:24,880 --> 03:08:28,560
in this video

4859
03:08:26,240 --> 03:08:30,880
let's quickly have end-to-end demo of

4860
03:08:28,560 --> 03:08:32,000
our angular spring boot crude full stack

4861
03:08:30,880 --> 03:08:33,920
application

4862
03:08:32,000 --> 03:08:35,840
and let me recap what are the

4863
03:08:33,920 --> 03:08:38,080
functionality we have implemented in our

4864
03:08:35,840 --> 03:08:39,439
employee management application in this

4865
03:08:38,080 --> 03:08:42,560
series

4866
03:08:39,439 --> 03:08:45,040
well we have implemented employee list

4867
03:08:42,560 --> 03:08:47,520
ad employee update employee delete

4868
03:08:45,040 --> 03:08:49,760
employee and we employ

4869
03:08:47,520 --> 03:08:50,800
features

4870
03:08:49,760 --> 03:08:51,920
all right

4871
03:08:50,800 --> 03:08:54,800
let me

4872
03:08:51,920 --> 03:08:56,960
uh you know clean all the records from

4873
03:08:54,800 --> 03:08:58,640
the employee list i mean i will delete

4874
03:08:56,960 --> 03:09:02,600
all the records and let's

4875
03:08:58,640 --> 03:09:02,600
have into end demo

4876
03:09:04,560 --> 03:09:08,720
now let's go ahead and let's add a

4877
03:09:06,560 --> 03:09:11,040
employee to the employee list click on

4878
03:09:08,720 --> 03:09:12,960
add employee link

4879
03:09:11,040 --> 03:09:15,680
and here i'm gonna add

4880
03:09:12,960 --> 03:09:17,600
employee that is ramesh employee first

4881
03:09:15,680 --> 03:09:18,760
name parameters last name

4882
03:09:17,600 --> 03:09:21,040
email id

4883
03:09:18,760 --> 03:09:22,399
remission.gmail.com hit submit

4884
03:09:21,040 --> 03:09:24,880
let's go ahead and let's add one more

4885
03:09:22,399 --> 03:09:25,680
employee click on add employee

4886
03:09:24,880 --> 03:09:26,960
tab

4887
03:09:25,680 --> 03:09:29,439
and let's go ahead and let's add one

4888
03:09:26,960 --> 03:09:31,040
more employee first name john

4889
03:09:29,439 --> 03:09:34,319
last name cena

4890
03:09:31,040 --> 03:09:35,680
and john gmail.com hit submit

4891
03:09:34,319 --> 03:09:38,399
let's go ahead and let's add one more

4892
03:09:35,680 --> 03:09:40,880
employee let's say admin

4893
03:09:38,399 --> 03:09:42,560
last name admin email id admin at the

4894
03:09:40,880 --> 03:09:45,200
regime.com

4895
03:09:42,560 --> 03:09:47,279
yeah here we go let's go let's add one

4896
03:09:45,200 --> 03:09:48,640
more employee let's say ram

4897
03:09:47,279 --> 03:09:52,080
and then power

4898
03:09:48,640 --> 03:09:54,319
ram at gmail.com hit submit

4899
03:09:52,080 --> 03:09:56,479
great we have added four employees to

4900
03:09:54,319 --> 03:09:59,040
the employee list now let's go ahead and

4901
03:09:56,479 --> 03:10:00,720
let's update one of the employee

4902
03:09:59,040 --> 03:10:02,399
i am going to update

4903
03:10:00,720 --> 03:10:04,160
ramesh employee

4904
03:10:02,399 --> 03:10:05,359
click on update button

4905
03:10:04,160 --> 03:10:07,520
and let's

4906
03:10:05,359 --> 03:10:09,200
change first name from

4907
03:10:07,520 --> 03:10:11,760
image to

4908
03:10:09,200 --> 03:10:13,439
arama something like this and last name

4909
03:10:11,760 --> 03:10:15,279
from

4910
03:10:13,439 --> 03:10:17,359
432

4911
03:10:15,279 --> 03:10:19,600
uh

4912
03:10:17,359 --> 03:10:21,600
jada

4913
03:10:19,600 --> 03:10:24,960
okay and email id

4914
03:10:21,600 --> 03:10:28,399
from ramesh at the gmail.com to

4915
03:10:24,960 --> 03:10:30,399
rama gmail.com hit submit

4916
03:10:28,399 --> 03:10:32,479
so look at here the image employee

4917
03:10:30,399 --> 03:10:35,040
successfully updated

4918
03:10:32,479 --> 03:10:36,399
earlier the first name was ramesh now it

4919
03:10:35,040 --> 03:10:39,120
is updated to

4920
03:10:36,399 --> 03:10:42,080
ram and similarly last name and email id

4921
03:10:39,120 --> 03:10:43,359
also updated right

4922
03:10:42,080 --> 03:10:45,840
well

4923
03:10:43,359 --> 03:10:48,080
add employee and update employee first

4924
03:10:45,840 --> 03:10:50,000
functionalities are working as expected

4925
03:10:48,080 --> 03:10:51,359
now let's see the delete

4926
03:10:50,000 --> 03:10:54,080
functionality

4927
03:10:51,359 --> 03:10:56,720
i'm going to delete this ram employee

4928
03:10:54,080 --> 03:10:58,880
click on delete button yeah here we go

4929
03:10:56,720 --> 03:11:00,960
ram employee is successfully deleted let

4930
03:10:58,880 --> 03:11:03,840
me delete johnson employee click on

4931
03:11:00,960 --> 03:11:06,960
delete button yeah

4932
03:11:03,840 --> 03:11:09,120
john employs also successfully deleted

4933
03:11:06,960 --> 03:11:11,040
now let's go ahead and let's see the

4934
03:11:09,120 --> 03:11:13,279
view employee details functionality

4935
03:11:11,040 --> 03:11:15,359
let's say i want to view admin employee

4936
03:11:13,279 --> 03:11:16,239
details click on view button yeah here

4937
03:11:15,359 --> 03:11:18,000
we go

4938
03:11:16,239 --> 03:11:20,880
we can able to see

4939
03:11:18,000 --> 03:11:23,200
all the admin employee details in vmware

4940
03:11:20,880 --> 03:11:25,279
editors page well if you want to

4941
03:11:23,200 --> 03:11:28,319
navigate to the employee list page you

4942
03:11:25,279 --> 03:11:29,920
can click on employees tab over here

4943
03:11:28,319 --> 03:11:32,160
and if you want to see ram employee

4944
03:11:29,920 --> 03:11:33,840
details you can click on view button you

4945
03:11:32,160 --> 03:11:35,359
can able to see

4946
03:11:33,840 --> 03:11:38,640
all the details of this particular

4947
03:11:35,359 --> 03:11:40,399
employee in real employee details page

4948
03:11:38,640 --> 03:11:42,960
well these are the five functionalities

4949
03:11:40,399 --> 03:11:45,920
we have implemented in this

4950
03:11:42,960 --> 03:11:46,720
employee management application

4951
03:11:45,920 --> 03:11:49,040
well

4952
03:11:46,720 --> 03:11:50,960
maybe in future i will add some more

4953
03:11:49,040 --> 03:11:52,640
feature to our

4954
03:11:50,960 --> 03:11:54,399
angular springboard group for stack

4955
03:11:52,640 --> 03:11:55,359
application

4956
03:11:54,399 --> 03:11:57,279
okay

4957
03:11:55,359 --> 03:12:00,960
great

4958
03:11:57,279 --> 03:12:03,359
so i have created 25 videos on angular

4959
03:12:00,960 --> 03:12:06,160
spring boot crew full stack application

4960
03:12:03,359 --> 03:12:08,319
series and i have created a

4961
03:12:06,160 --> 03:12:10,560
youtube playlist for them

4962
03:12:08,319 --> 03:12:12,720
so if you go to the my youtube channel

4963
03:12:10,560 --> 03:12:14,640
and go to the playlist section here you

4964
03:12:12,720 --> 03:12:17,760
can able to see angular springboard

4965
03:12:14,640 --> 03:12:19,200
crude fullstack application playlist

4966
03:12:17,760 --> 03:12:21,680
if you click on

4967
03:12:19,200 --> 03:12:24,080
view full playlist you can able to see

4968
03:12:21,680 --> 03:12:26,640
here all the videos of this particular

4969
03:12:24,080 --> 03:12:28,800
course are listed here

4970
03:12:26,640 --> 03:12:30,000
so i highly recommend you guys to go to

4971
03:12:28,800 --> 03:12:32,160
this playlist

4972
03:12:30,000 --> 03:12:34,000
and you can check out all the videos to

4973
03:12:32,160 --> 03:12:35,520
learn how to develop

4974
03:12:34,000 --> 03:12:38,640
you know full stack

4975
03:12:35,520 --> 03:12:39,600
application using angular and spring

4976
03:12:38,640 --> 03:12:41,600
boot

4977
03:12:39,600 --> 03:12:43,520
well i have already created a github

4978
03:12:41,600 --> 03:12:45,359
repository on my github profile and i

4979
03:12:43,520 --> 03:12:47,040
have hosted source code of this angular

4980
03:12:45,359 --> 03:12:50,000
springboard group for stack application

4981
03:12:47,040 --> 03:12:51,359
and my github repository so you can go

4982
03:12:50,000 --> 03:12:53,600
ahead and you can check out my guitar

4983
03:12:51,359 --> 03:12:55,520
repository for example

4984
03:12:53,600 --> 03:12:57,520
so look at here this is the angular 10

4985
03:12:55,520 --> 03:12:59,680
spring boot crude full stack app github

4986
03:12:57,520 --> 03:13:02,319
repository i have created

4987
03:12:59,680 --> 03:13:05,200
in my github profile account

4988
03:13:02,319 --> 03:13:08,239
so whenever you get a you know whenever

4989
03:13:05,200 --> 03:13:09,840
you get any issues while implementing

4990
03:13:08,239 --> 03:13:11,040
angular springboard code full stack

4991
03:13:09,840 --> 03:13:12,479
application

4992
03:13:11,040 --> 03:13:14,479
you can go ahead and you can check out

4993
03:13:12,479 --> 03:13:16,319
my github repository over here so this

4994
03:13:14,479 --> 03:13:19,439
is the working code

4995
03:13:16,319 --> 03:13:21,760
that we have seen throughout the series

4996
03:13:19,439 --> 03:13:25,040
this is the working code so whenever you

4997
03:13:21,760 --> 03:13:26,479
struct anywhere while creating this

4998
03:13:25,040 --> 03:13:28,560
full stack application you can just

4999
03:13:26,479 --> 03:13:30,399
check out a source code of this github

5000
03:13:28,560 --> 03:13:33,840
repository and compare your code with

5001
03:13:30,399 --> 03:13:36,319
this source code and you can find

5002
03:13:33,840 --> 03:13:38,800
the issues well angular 10 springboard

5003
03:13:36,319 --> 03:13:41,520
crore full stack app repository has two

5004
03:13:38,800 --> 03:13:44,560
projects angular front end spring boot

5005
03:13:41,520 --> 03:13:46,239
back end and this is the readme file

5006
03:13:44,560 --> 03:13:48,640
i have provided

5007
03:13:46,239 --> 03:13:50,880
link of all the videos of this

5008
03:13:48,640 --> 03:13:53,200
series in readme file

5009
03:13:50,880 --> 03:13:56,640
you can also go through

5010
03:13:53,200 --> 03:13:58,560
each videos whenever you want you guys

5011
03:13:56,640 --> 03:14:00,960
can follow me on github

5012
03:13:58,560 --> 03:14:04,800
usually i will host source code of all

5013
03:14:00,960 --> 03:14:06,560
the tutorials series courses on my

5014
03:14:04,800 --> 03:14:08,399
github profile account

5015
03:14:06,560 --> 03:14:11,279
so whenever i will host source code of

5016
03:14:08,399 --> 03:14:13,200
any tutorials courses or series you will

5017
03:14:11,279 --> 03:14:14,080
get notified

5018
03:14:13,200 --> 03:14:17,920
well

5019
03:14:14,080 --> 03:14:20,080
i hope this video tutorial series is

5020
03:14:17,920 --> 03:14:22,399
useful for you guys

5021
03:14:20,080 --> 03:14:25,279
if you like this course

5022
03:14:22,399 --> 03:14:26,319
then subscribe to my channel

5023
03:14:25,279 --> 03:14:29,040
and

5024
03:14:26,319 --> 03:14:31,520
if you have any queries or any questions

5025
03:14:29,040 --> 03:14:35,359
let me know in the comment section below

5026
03:14:31,520 --> 03:14:37,439
so that i will try to clear your doubts

5027
03:14:35,359 --> 03:14:41,920
alright guys thanks for watching this

5028
03:14:37,439 --> 03:14:44,239
series and yeah i will see you guys in

5029
03:14:41,920 --> 03:14:46,319
one more new brand series

5030
03:14:44,239 --> 03:14:50,479
all right guys thanks for watching i'll

5031
03:14:46,319 --> 03:14:50,479
see you guys in next one

